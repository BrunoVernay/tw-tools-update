[
  {
    "last_update": "2016-04-21",
    "author": [
      "Adam Coddington (coddingtonbear)",
      "Yoi-Nami-Ra (Yoi-Nami-Ra)"
    ],
    "url_src": "https://github.com/coddingtonbear/taskwarrior-pomodoro",
    "license": "Unknown",
    "url": "https://github.com/coddingtonbear/taskwarrior-pomodoro",
    "obsolete": false,
    "name": "taskwarrior-pomodoro",
    "theme": [
      "OSX",
      "OSX"
    ],
    "verified": "2016-04-24",
    "language": [
      "Swift"
    ],
    "descriptionText": "Simple OSX tray application allowing you to use Pomodoro techniques with Taskwarrior",
    "category": "Front Ends",
    "readme": "Taskwarrior Pomodoro http coddingtonbear public s3 amazonaws com github taskwarrior pomodoro screenshot png A simple application allowing you to use Pomodoro techniques with Taskwarrior on OSX Installation You can download the latest release here http coddingtonbear public s3 amazonaws com github taskwarrior pomodoro releases taskwarrior pomodoro 1 4 0 dmg and install it by dragging the application into your Applications directory Configuration Configuring Taskwarrior Pomodoro is handled by adding lines to your taskrc file See below for what features you can configure Task List Filter By default the list of tasks is limited to displaying only tasks that are currently pending status pending but you can specify any filter you d like for further reducing that list by setting the key pomodoro defaultFilter in your taskrc While at work for example you could limit your tasks to only pending tasks having the work tag by adding a line as follows pomodoro defaultFilter work Note that taskwarrior filters can be quite complex although my specific use of this feature will not be particularly helpful it may help you come to terms with what is possible by knowing that the one I used for generating the above screenshot was pomodoro defaultFilter intheamtrellolistid 5591ecedb12a520b50d2e8b8 or intheamtrellolistid 559173de3295c9b2e550243f or intheamtrellolistid 55aee69377ccc07e295462a3 and work and are thus outside the scope of this document but you can find more information about filters in Taskwarrior s documentation http taskwarrior org docs filter html Post Pomodoro Hook Taskwarrior Pomodoro Beeminder https github com coddingtonbear taskwarrior pomodoro beeminder provides functionality allowing you to increment Beeminder goals using this Post Pomodoro Hook functionality You can configure Taskwarrior Pomodoro to call a script of your choice after you complete a Pomodoro The script will receive one additional command line argument the UUID of the task that you were working on You could use this for a variety of things including updating goal tracking software or recording billable hours pomodoro postCompletionCommand path to my script Pomodoro Counter By default Taskwarrior Pomodoro will display a running count of Pomodoros completed during each day If you d like to disable the display of this running count you can turn it off by setting the pomodoro displayCount setting to false pomodoro displayCount false Pomodoro Duration By default Taskwarrior Pomodoro uses standard 25 minute 1 500 second pomodoros You can override the default duration by adding a setting named pomodoro durationSeconds setting the number of seconds you d like a pomodoro to last For example to set your pomodoros to last 45 minutes 2 700 seconds you could set this setting as follows pomodoro durationSeconds 2700",
    "compatibility": "2.0+",
    "description": "Simple OSX tray application allowing you to use Pomodoro techniques with Taskwarrior"
  },
  {
    "last_update": "2016-04-14",
    "author": [
      "Daniel Shahaf (danielshahaf)"
    ],
    "url_src": "https://github.com/danielshahaf/taskswamp",
    "license": "Apache 2.0",
    "url": "https://github.com/danielshahaf/taskswamp",
    "obsolete": false,
    "name": "taskswamp",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Create a taskwarrior/tmux/xterm session with multiple reports and refreshing",
    "category": "Front Ends",
    "readme": "What is this Taskswamp is a scriptlet that creates a tmux session with multiple task reports and allows those reports to be easily refreshed Each tmux window shows a single taskwarrior report Quick start To start create a config file in taskswamprc following the example below and then run taskswamp cat taskswamprc EOF taskswamp 1 windows name main task name waiting task waiting name myproject task project myproject due today ls limit page EOF taskswamp If you get an error make sure you have the dependencies dependencies installed The config file format is json The taskswamp key must be set to 1 this is a format number for forward compatibility The windows key must be set to an array of window specifications where each specification contains a name shown in the tmux status bar and a task report to show The value of the task key is a task command line as a single string If you type at the shell prompt task foo bar baz you would put task foo bar baz in the window specification It is also possible to specify arbitrary commands using a cmd key via cmd echo hello world or cmd echo hello world FAQ How do I refresh the task report Press any key except y If you press y the last display will remain but will not be updated until you use the tmux respawn window colon command Why doesn t taskswamp have a usage help message packaging glue etc Because taskswamp has no known users It wouldn t be hard to add all these niceties once this project has at least one user Dependencies Required Python 3 Taskwarrior flock 1 tmux zsh Is screen supported No but such support would be easy to add screen can create a detached session with multiple windows screen dmS sessionname screen S sessionname X screen cmd screen r sessioname It s just a matter of writing the glue code to invoke screen and to choose between screen and tmux Known issues The config file is json because that s easiest to parse assert is used for input validation If this project ever has users which currently it doesn t invalid input should result not in an AssertionError traceback but in a normal error message as in the existing FileNotFoundError handling The code spawns a new XTerm Options to spawn other terminal emulators or to just start tmux have not been implemented",
    "compatibility": "any",
    "description": "Create a taskwarrior/tmux/xterm session with multiple reports and refreshing"
  },
  {
    "last_update": "2016-04-23",
    "author": [
      "zc he (blindFS)",
      "David J Patrick (linuxcaffe)",
      "harciga",
      "Tomas Babej (tbabej)",
      "Bitdeli Chef (bitdeli-chef)",
      "Casey Robinson (rampantmonkey)",
      "theRemix (theRemix)",
      "Benjamin Lipp (blipp)",
      "noctux (noctux)"
    ],
    "url_src": "https://github.com/blindFS/vim-taskwarrior",
    "license": "MIT",
    "url": "https://github.com/blindFS/vim-taskwarrior",
    "obsolete": false,
    "name": "vim-taskwarrior",
    "theme": [
      "Vim",
      "Vim"
    ],
    "verified": "2016-04-24",
    "language": [
      "VimL"
    ],
    "descriptionText": "vim interface for taskwarrior",
    "category": "Front Ends",
    "readme": "vim taskwarrior _a vim interface for taskwarrior http taskwarrior org _ Taskwarrior is a command line todo list manager It helps you manage task lists with projects tags dates dependencies annotations recurrences and apply complex or simple queries with attribute modifiers boolean regex filters and produce any number of reports built in or customizable reports attributes and color themes Task keeps data in JSON text files and it s always improving Find out more at http taskwarrior org and read man task and man taskrc vim taskwarrior is a vim plugin that extends taskwarrior with an interactive interface It features a rich set of mappings and commands is easy to customize and makes adding modifying sorting reporting and marking done fast easy and fun Homepage https github com farseer90718 vim taskwarrior patches welcome Prerequisites This plugin requires Taskwarrior 2 2 0 or higher although 2 3 x is required for taskd sync functions and recommended in general and well worth the price free see http taskwarrior org projects taskwarrior wiki Download Vim version 7 x is required Suggested plugins vim airline https github com bling vim airline for better statusline information https github com farseer90718 vim taskwarrior screenshot unite vim https github com Shougo unite vim for easier bookmark history operations If you experience line wrapping issues add the following line to your vimrc let g task_rc_override rc defaultwidth 0 If you experience task truncation vim taskwarrior not showing enough tasks add let g task_rc_override rc defaultheight 0 Screenshot screenshot https raw github com farseer90718 vim taskwarrior master screenshot png vim taskwarrior animated gif http taskextras org attachments download 655 20131110_002753 gif Installing Either download zip file https github com farseer90718 vim taskwarrior archive master zip and extract in vim or use your favorite plugin manager Pathogen https github com tpope vim pathogen git clone https github com farseer90718 vim taskwarrior vim bundle vim taskwarrior Vundle https github com gmarik vundle 1 Add Bundle farseer90718 vim taskwarrior to vimrc 2 Run BundleInstall NeoBundle https github com Shougo neobundle vim 1 Add NeoBundle farseer90718 vim taskwarrior to vimrc 2 Run NeoBundleInstall vim plug https github com junegunn vim plug 1 Add Plug blindFS vim taskwarrior to vimrc 2 Run PlugInstall Default map vim nnoremap buffer A add annotation nnoremap buffer x delete annotation nnoremap buffer o open the annotation as a file nnoremap buffer a create new task nnoremap buffer d set the task in current line done nnoremap buffer D delete task nnoremap buffer Del delete field annotation task nnoremap buffer Space select remove current task to selected list nnoremap buffer m modify current field nnoremap buffer M modify current task nnoremap buffer f change filter nnoremap buffer r change report type nnoremap buffer c execute a command for selected tasks current task nnoremap buffer R refresh the report clear selected list nnoremap buffer q quit buffer nnoremap buffer X clear all completed task nnoremap buffer p duplicate selected tasks nnoremap buffer u undo last change nnoremap buffer start task nnoremap buffer stop task nnoremap buffer S sync with taskd server nnoremap buffer s sort by this column primarily if already of the highest priority then switch the polarity nnoremap buffer sort by this column increasingly if already increasingly then increase its priority nnoremap buffer sort by this column decreasingly if already decreasingly then decrease its priority nnoremap buffer H cycle column format left nnoremap buffer L cycle column format right nnoremap buffer J next historical entry nnoremap buffer K previous historical entry nnoremap buffer B create a bookmark for current combination nnoremap buffer F1 view the documents nnoremap buffer CR show task info nnoremap buffer TAB jump to the next column nnoremap buffer S TAB jump to the previous column nnoremap buffer right jump to the next non empty column nnoremap buffer left jump to the previous non empty column vnoremap buffer d set done to all visual selected tasks vnoremap buffer D delete all visual selected tasks vnoremap buffer CR show information about visual selected tasks vnoremap buffer Space add visual selected tasks to selected list Commands vim TW args task filter report arguments TWUndo undo the previous modification TWEditTaskrc edit taskrc TWEditVitrc edit vitrc TWDeleteCompleted clear all completed tasks TWAdd add new tasks interactively TWAnnotate add an annotation TWComplete mark task done TWDelete deleta a task TWDeleteAnnotation delete an annotation TWModifyInteractive make changes to a task interactively use with caution TWReportInfo run the info report TWReportSort args overide the sort method reset to default if no arguments passed TWSync synchronise with taskd server TWToggleReadonly toggle readonly option TWToggleHLField toggle highlight field option TWHistory list history records using unite vim TWHistoryClear clear history TWBookmark list bookmarks using unite vim TWBookmarkClear clear bookmarks Options vim default task report type let g task_report_name next custom reports have to be listed explicitly to make them available let g task_report_command whether the field under the cursor is highlighted let g task_highlight_field 1 can not make change to task data when set to 1 let g task_readonly 0 vim built in term for task undo in gvim let g task_gui_term 1 allows user to override task configurations Seperated by space Defaults to let g task_rc_override rc defaultwidth 999 default fields to ask when adding a new task let g task_default_prompt due description whether the info window is splited vertically let g task_info_vsplit 0 info window size let g task_info_size 15 info window position let g task_info_position belowright directory to store log files defaults to taskwarrior data location let g task_log_directory task max number of historical entries let g task_log_max 20 forward arrow shown on statusline let g task_left_arrow backward arrow let g task_left_arrow Syntax highlightling Default scheme vim highlight default link taskwarrior_tablehead Tabline highlight default link taskwarrior_field IncSearch highlight default link taskwarrior_selected Visual highlight default link taskwarrior_id VarId highlight default link taskwarrior_project String highlight default link taskwarrior_Status Include highlight default link taskwarrior_priority Class highlight default link taskwarrior_due Todo highlight default link taskwarrior_end Keyword highlight default link taskwarrior_description Normal highlight default link taskwarrior_entry Special highlight default link taskwarrior_depends Todo highlight default link taskwarrior_tags Keyword highlight default link taskwarrior_uuid VarId highlight default link taskwarrior_urgency Todo Feel free to change any of above by something like vim hi taskwarrior_xxx guibg xxx guifg xxx ctermbg xxx ctermfg xxx in your vimrc Acknowledgement vim airline https github com bling vim airline by bling unite vim https github com Shougo unite vim by Shougo webapi vim https github com mattn webapi vim by mattn License MIT https raw github com farseer90718 vim taskwarrior master LICENSE txt Bitdeli Badge https d2weczhvl823v0 cloudfront net farseer90718 vim taskwarrior trend png https bitdeli com free Bitdeli Badge",
    "compatibility": "2.2.0+",
    "description": "vim interface for taskwarrior"
  },
  {
    "last_update": "2015-03-08",
    "author": [
      "Scott Kostyshak",
      "Steve Rader"
    ],
    "url_src": "https://git.tasktools.org/scm/ex/vit.git",
    "license": "GPLv3",
    "url": "http://tasktools.org/projects/vit.html",
    "obsolete": false,
    "name": "Vit",
    "theme": [
      "Vim"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Vit is a full-screen terminal interface to Taskwarrior with Vim key bindings.",
    "category": "Front Ends",
    "compatibility": "2.0.0+",
    "description": "Vit is a full-screen terminal interface to Taskwarrior with Vim key bindings."
  },
  {
    "last_update": null,
    "author": [
      "Adam Coddington & others"
    ],
    "url_src": null,
    "license": "AGPLv3",
    "url": "http://inthe.am/",
    "obsolete": false,
    "name": "Inthe.AM",
    "theme": [
      "Web"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "A modern web frontend for accessing your tasks",
    "category": "Front Ends",
    "compatibility": "2.3.0+",
    "description": "A modern web frontend for accessing your tasks"
  },
  {
    "last_update": "2015-01-11",
    "author": [
      "Jan Palus (jpalus)"
    ],
    "url_src": "https://github.com/pld-linux/tasksh",
    "license": "MIT",
    "url": "https://github.com/pld-linux/tasksh",
    "obsolete": false,
    "name": "tasksh",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "A shell/frontend for the command line task list manager taskwarrior",
    "category": "Front Ends",
    "compatibility": "2.4.0+",
    "description": "A shell/frontend for the command line task list manager taskwarrior"
  },
  {
    "last_update": "2014-11-22",
    "author": [
      "Jean-Philippe Orsini"
    ],
    "url_src": "http://wpitchoune.net/ptask/files",
    "license": "GPLv2",
    "url": "http://wpitchoune.net/ptask",
    "obsolete": false,
    "name": "ptask",
    "theme": [
      "GUI"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "ptask is a GTK+ graphical user interface for managing tasks.",
    "category": "Front Ends",
    "compatibility": "2.0.0+",
    "description": "ptask is a GTK+ graphical user interface for managing tasks."
  },
  {
    "last_update": "2016-04-21",
    "author": [
      "Grov\u00e9 Steyn (grovesteyn)"
    ],
    "url_src": "https://github.com/grovesteyn/tchart",
    "license": "GPLv2",
    "url": "https://github.com/grovesteyn/tchart",
    "obsolete": false,
    "name": "tchart",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Python reporting and front end for Taskwarrior",
    "category": "Front Ends",
    "readme": "tchart Python reporting and front end for Taskwarrior Tchart provides a GANTT type report and rapid use listbox task selection and modification tool for Taskwarrior Invocation If tchart is invoked without any switches it displays the GANTT type report and exits Using the f or filter FILTER switch allows specific task filters to be specified Using the s or selector switch invokes the listbox task selection and modification screens GANTT type report The GANTT report looks like this pre task temp due before 2wks erma status pending export 14 Oct 2013 21 Oct 2013 28 Oct 2013 04 Nov 2013 M T W T F S S M T W T F S S M T W T F S S M T W T F S S O U E H R A U O U E H R A U O U E H R A U O U E H R A U N E D U I T N N E D U I T N N E D U I T N N E D U I T N 37 w rompco application ROMPCO UPDATED NERSA APPLICATION 70 w tips regulation Kry datum vir TIPS regulation forum and berei voor 60 wadmin FINALISEER MEPTY BTW NOMMER 62 wadmin Kyk na epos van PKF oor stappe om ME BTW registrasie te doen 87 w strat LEES TELEKOMS GOED 84 w tips regulation TIPS KONTRAK 78 wadmin Request people to act as referenences 71 pers LEES ERMA SE OPSTELLE 30 wadmin BETAAL VIR LOMBARD VIR DIE BANDWIDTH 40 wadmin REVIEW MANAGEMENT ACCOUNTS 35 wadmin tax Renew tax clearance certificate 92 pers draf 74 wadmin DOEN BTW 83 w tips regulation Berei seminaar voor vir TIPS 17 wadmin Combine all sent emails in one place 29 aviation Doen vlieg medies pre Overdue tasks are indicated in red the current day s tasks in yellow and the rest in the normal font Tasks are indented in accordance with their due dates Tasks with priority set to high are shown in capital letters Tasks that have annotations attached have a in front of their name Tasks from the same project are grouped together for each date The number of tasks shown is selected to fill the available screen space Overall the intention is to provide a visual overview of my TODO list that is an improvement on what is available from Taskwarrior Listbox task selection and modification The listbox selection tool allows rapid updates of the task list by using the s switch Onscreen buttons or hotkeys allow rapid changes to selected tasks due dates marking tasks as complete or an easy way to completing the Taskwarrior commandline for the selected tasks Tasks are selected with the spacebar If no selection is made the task under the cursor is used Keys 1 7 sets the due date 1 7 days into the future e g key 2 executes task 22 mod due 2 0 sets the due date to today d marks tasks as done Pressing any hotkey or hitting Enter after selecting a task s moves to the next screen Tchart compiles the appropriate TW commandline and displays it for approval or modification press Enter twice to execute the line Mode of use I generally find that I use tchart in combination with the normal Taskwarrior commands I have also setup autocompletion to work with task and with tchart which futher increases its power Being an amateur programmer I would welcome contributions and improvements and especially pull requests",
    "compatibility": "Unknown",
    "description": "Python reporting and front end for Taskwarrior"
  },
  {
    "last_update": "2013-09-18",
    "author": [
      "Jake Bell"
    ],
    "url_src": "https://github.com/theunraveler/taskwarrior-web",
    "license": "MIT",
    "url": "https://github.com/theunraveler/taskwarrior-web",
    "obsolete": false,
    "name": "Taskwarrior-web",
    "theme": [
      "Web"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Taskwarrior-web is a Sinatra-based web front end for Taskwarrior.",
    "category": "Front Ends",
    "compatibility": "Unknown",
    "description": "Taskwarrior-web is a Sinatra-based web front end for Taskwarrior."
  },
  {
    "last_update": null,
    "author": [
      "Jack Desert"
    ],
    "url_src": null,
    "license": "Unknown",
    "url": "http://freecinc.com",
    "obsolete": false,
    "name": "FreeCinc",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Don't want to manage your own Taskserver? FreeCinc is a hosted implementation of Taskserver, where you can download a set of uniquely-generated credentials and start syncing for free.",
    "category": "Services",
    "compatibility": "2.3.0+",
    "description": "Don't want to manage your own Taskserver? FreeCinc is a hosted implementation of Taskserver, where you can download a set of uniquely-generated credentials and start syncing for free."
  },
  {
    "last_update": "2016-04-21",
    "author": [
      "Tomas Babej (tbabej)",
      "Rob Golding (robgolding63)",
      "Gabriel Pettier (tshirtman)"
    ],
    "url_src": "https://github.com/robgolding63/tasklib",
    "license": "BSD 3 clause",
    "url": "http://tasklib.readthedocs.org/en/latest/",
    "obsolete": false,
    "name": "tasklib",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "A Python library for interacting with taskwarrior databases.",
    "category": "Libraries",
    "readme": "tasklib image https travis ci org robgolding63 tasklib png branch develop target http travis ci org robgolding63 tasklib image https coveralls io repos robgolding63 tasklib badge png branch develop target https coveralls io r robgolding63 tasklib branch develop tasklib is a Python library for interacting with taskwarrior_ databases using a queryset API similar to that of Django s ORM Supports Python 2 6 2 7 3 2 3 3 and 3 4 with taskwarrior 2 1 x and above Older versions of taskwarrior are untested and may not work Requirements taskwarrior_ v2 1 x or above Installation Install via pip pip install tasklib Usage tasklib has a similar API to that of Django s ORM from tasklib task import TaskWarrior tw TaskWarrior home rob task tasks tw tasks pending tasks Tidy the house Learn German tasks filter tags__contain chores Tidy the house type tasks 0 class tasklib task Task task 0 done tasks tw tasks pending tasks Learn German tasks 0 tags languages tasks 0 save For more advanced usage see the documentation_ _taskwarrior http taskwarrior org _documentation http tasklib readthedocs org en latest",
    "compatibility": "2.1.x - 2.4.x",
    "description": "A Python library for interacting with taskwarrior databases."
  },
  {
    "last_update": "2015-08-01",
    "author": [
      "David Badura"
    ],
    "url_src": "https://github.com/DavidBadura/Taskwarrior",
    "license": "MIT",
    "url": "https://github.com/DavidBadura/Taskwarrior",
    "obsolete": false,
    "name": "Taskwarrior PHP lib",
    "theme": [],
    "verified": "2015-08-15",
    "language": [
      "PHP"
    ],
    "descriptionText": "PHP Taskwarrior library, used in doThings.",
    "category": "Libraries",
    "compatibility": "2.4.4",
    "description": "PHP Taskwarrior library, used in \n<a href=\"https://github.com/DavidBadura/doThings\">doThings</a>."
  },
  {
    "last_update": "2015-06-30",
    "author": [
      "Jack Laxson"
    ],
    "url_src": "https://github.com/jrabbit/taskd-client-py",
    "license": "LGPLv3",
    "url": "https://pypi.python.org/pypi/taskc",
    "obsolete": false,
    "name": "taskc",
    "theme": [],
    "verified": "2015-08-15",
    "language": [
      "Python"
    ],
    "descriptionText": "Python taskd client library",
    "category": "Libraries",
    "compatibility": "taskd 1.0+",
    "description": "Python taskd client library"
  },
  {
    "last_update": "2016-04-22",
    "author": [
      "Will Paul (dropofwill)"
    ],
    "url_src": "https://github.com/dropofwill/rtasklib",
    "license": "MiT",
    "url": "http://will-paul.com/rtasklib/",
    "obsolete": false,
    "name": "rtasklib",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "A Ruby wrapper around the TaskWarrior command line tool",
    "category": "Libraries",
    "readme": "Rtasklib Coverage Status https travis ci org dropofwill rtasklib svg branch master https travis ci org dropofwill rtasklib Coverage Status https coveralls io repos dropofwill rtasklib badge svg branch master https coveralls io r dropofwill rtasklib branch master yard docs http b repl ca v1 yard docs blue png http will paul com rtasklib Description A Ruby wrapper around the TaskWarrior command line tool Installation Using bundle or gem With Bundler Add this line to your application s Gemfile ruby gem rtasklib And then execute bundle With Rubygems Or install it yourself as gem install rtasklib With this method you will need to install TaskWarrior version 2 4 or above yourself On OSX brew install task On Fedora yum install task On Debian Ubuntu The major repos TaskWarrior packages are extremely outdated so you will have to install from source The following is what we re using to build on Travis CI your mileage may vary sudo add apt repository ppa ubuntu toolchain r test y sudo apt get update qq sudo apt get install qq build essential cmake uuid dev g 4 8 sudo update alternatives install usr bin g g usr bin g 4 8 50 git clone https git tasktools org scm tm task git cd task git checkout TASK_VERSION git clean dfx cmake make sudo make install Using the RPM If you are running Fedora there is an RPM available this comes with the advantage of being managed by yum and installing TaskWarrior for you Simply get the desired version RPM from the rpms dir sudo yum install rubygem rtasklib VERSION noarch rpm sudo yum install rubygem rtasklib docs VERSION noarch rpm The docs package installs documentation that you can access through the ruby doc interface ri e g ri Rtasklib This will bring up a less like interface to browse the documentation with Configure TaskWarrior Once you install TaskWarrior a database still needs to be created luckily this is as simple as running task and answer yes when it asks you about creating a taskrc file There is a small testing database in spec data task if you would like to test on something other than you main TaskWarrior db You can experiment with this by running bin console Which returns an interactive Pry Ruby session with the variable tw already initialized to a Rtasklib TW instance with the test database Changes to the database aren t tracked so don t worry about merge conflicts if you plan on contributing Dependencies Ruby 2 0 Uses keyword args TaskWarrior 2 4 require custom UDAs recurrences and duration data types MIT license ISO8601 gem for dealing with duration and datetimes from TaskWarrior MIT license Virtus gem for simple Ruby object based domain modeling TaskModel and TaskrcModel MIT license multi_json gem for parsing JSON objects MIT license See rtasklib gemspec to verify the latest Ruby dependencies Usage ruby require rtasklib tw Rtasklib TW new path to task do some stuff with the task database available commands are documented in the Controller class tasks tw all returns an array of TaskModels tasks first description An example task tasks 1 due DateTime 2015 03 16T17 48 23 00 00 2457098j 64103s 0n 0s 2299161j tw some ids 1 5 10 size 6 tw done ids 5 tw some ids 1 5 10 size 5 tw get_uda_names author estimate task sync Controller docs has more examples for each method http will paul com rtasklib Rtasklib Controller html Documentation Generated using yardoc http will paul com rtasklib Rtasklib 100 00 documented Development After checking out the repo run bin setup to install dependencies Then run bin console for an interactive prompt that will allow you to experiment To install this gem onto your local machine run bundle exec rake install To release a new version update the version number in version rb and then run bundle exec rake release to create a git tag for the version push git commits and tags and push the gem file to rubygems org https rubygems org License Release under the MIT License MIT Copyright copy 2015 Will Paul Contributing 1 Fork it https github com my github username rtasklib fork 2 Create your feature branch git checkout b my new feature 3 Commit your changes git commit am Add some feature 4 Push to the branch git push origin my new feature 5 Create a new Pull Request",
    "compatibility": "2.4.0+",
    "description": "A Ruby wrapper around the TaskWarrior command line tool"
  },
  {
    "last_update": "2016-03-25",
    "author": [
      "Ralph Bean (ralphbean)",
      "Adam Coddington (coddingtonbear)",
      "kostajh",
      "Sky Christensen (countermeasure)",
      "Ross Delinger (rossdylan)",
      "Ryan Campbell (campbellr)",
      "Ryan Brown (ryansb)",
      "Richard Burnison (burnison)",
      "Dustin J. Mitchell (djmitche)",
      "Sam Kleinman (tychoish)",
      "Paul Natsuo Kishimoto (khaeru)",
      "Justin Forest (umonkey)",
      "Tiziano M\u00fcller (dev-zero)",
      "Fabien Devaux (fdev31)",
      "neingeist (neingeist)"
    ],
    "url_src": "https://github.com/ralphbean/taskw",
    "license": "GPLv3+",
    "url": "http://threebean.org",
    "obsolete": false,
    "name": "taskw",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "python taskwarrior api",
    "category": "Libraries",
    "readme": "taskw Python API for the taskwarrior DB split here This is a python API for the taskwarrior http taskwarrior org _ command line tool It contains two implementations taskw TaskWarriorShellout and taskw TaskWarriorDirect The first implementation is the supported one recommended by the upstream taskwarrior core project It uses the task export and task import commands to manipulate the task database The second implementation opens the task db file itself and directly manipulates it It exists for backwards compatibility but should only be used when necessary Build Status master image https secure travis ci org ralphbean taskw png branch master alt Build Status master branch target http travis ci org ralphbean taskw develop image https secure travis ci org ralphbean taskw png branch develop alt Build Status develop branch target http travis ci org ralphbean taskw Branch Status master master develop develop Getting taskw Installing Using taskw requires that you first install taskwarrior http taskwarrior org _ Installing it from http pypi python org pypi taskw is easy with pip pip install taskw The Source You can find the source on github at http github com ralphbean taskw Examples Looking at tasks from taskw import TaskWarrior w TaskWarrior tasks w load_tasks tasks keys completed pending type tasks pending type list type tasks pending 0 type dict Adding tasks from taskw import TaskWarrior w TaskWarrior w task_add Eat food w task_add Take a nap priority H project life due 1359090000 Retrieving tasks from taskw import TaskWarrior w TaskWarrior w get_task id 5 Updating tasks from taskw import TaskWarrior w TaskWarrior id task w get_task id 14 task project Updated project name w task_update task Deleting tasks from taskw import TaskWarrior w TaskWarrior w task_delete id 3 Completing tasks from taskw import TaskWarrior w TaskWarrior w task_done id 46 Being Flexible You can point taskw at different taskwarrior databases from taskw import TaskWarrior w TaskWarrior config_filename some_project taskrc w task_add Use taskw Looking at the config from taskw import TaskWarrior w TaskWarrior config w load_config config data location home threebean task config _forcecolor yes Using Python appropriate Types Dates UUIDs etc from taskw import TaskWarrior w TaskWarrior marshal True w get_task id 10 10 description Hello there entry datetime datetime 2014 3 14 14 18 40 tzinfo tzutc id 10 project Saying Hello status pending uuid UUID 4882751a 3966 4439 9675 948b1152895c",
    "compatibility": "2.2.x - 2.4.x",
    "description": "python taskwarrior api"
  },
  {
    "last_update": "2016-01-11",
    "author": [
      "Klaus Ethgen"
    ],
    "url_src": "/download/on-modify.timetrack.pl",
    "license": "GPL",
    "url": "/download/on-modify.timetrack.pl",
    "obsolete": false,
    "name": "Time Tracking Hook",
    "theme": [
      "Time"
    ],
    "verified": "2016-01-11",
    "language": [],
    "descriptionText": "Robust implementation of a time-tracking hook script, supporting non-UTF8 JSON.",
    "category": "Hook Scripts",
    "compatibility": "2.4.1+",
    "description": "Robust implementation of a time-tracking hook script, supporting non-UTF8 JSON."
  },
  {
    "last_update": "2015-07-01",
    "author": [
      "Wim Schuermann",
      "David J Patrick"
    ],
    "url_src": "https://gist.github.com/wbsch/d977b0ac29aa1dfa4437",
    "license": "Unknown",
    "url": "https://gist.github.com/wbsch/d977b0ac29aa1dfa4437",
    "obsolete": false,
    "name": "Ledger Time Tracking Hook",
    "theme": [
      "Ledger",
      "Time"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Writes time spent on tasks (\"task start\", \"task stop\") into a timelog formatted file. Example ledger CLI reports:\"ledger -f timetrack.ledger print\"\"ledger -f timetrack.ledger register\"",
    "category": "Hook Scripts",
    "compatibility": "2.4.1+",
    "description": "Writes time spent on tasks (\"task start\", \"task stop\") into a timelog formatted file. Example \n<a href=\"http://www.ledger-cli.org/\">ledger CLI</a> reports:\"ledger -f timetrack.ledger print\"\"ledger -f timetrack.ledger register\""
  },
  {
    "last_update": "2015-06-15",
    "author": [
      "Jens Erat"
    ],
    "url_src": "https://github.com/JensErat/task-relative-recur",
    "license": "MIT License",
    "url": "https://github.com/JensErat/task-relative-recur",
    "obsolete": false,
    "name": "Relative Recurring Tasks Hook",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "A hook providing relative recurring tasks with due date some period after completing the current task.",
    "category": "Hook Scripts",
    "compatibility": "2.4.2+",
    "description": "A hook providing relative recurring tasks with due date some period after completing the current task."
  },
  {
    "last_update": "2015-06-01",
    "author": [
      "Tomas Babej"
    ],
    "url_src": "https://github.com/tbabej/taskwarrior-default-date-time-hook",
    "license": "MIT License",
    "url": "https://github.com/tbabej/taskwarrior-default-date-time-hook",
    "obsolete": false,
    "name": "Default Date Time Hook",
    "theme": [
      "Time"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "A simple Taskwarrior hook that allows setting other default time for dates than 00:00:00.",
    "category": "Hook Scripts",
    "compatibility": "2.4.0+",
    "description": "A simple Taskwarrior hook that allows setting other default time for dates than 00:00:00."
  },
  {
    "last_update": "2015-06-01",
    "author": [
      "Wim Schuermann"
    ],
    "url_src": "https://gist.github.com/wbsch/fe5d0f392657fdfa6fe4",
    "license": "Unknown",
    "url": "https://gist.github.com/wbsch/fe5d0f392657fdfa6fe4",
    "obsolete": false,
    "name": "Use Git to track changes Hook",
    "theme": [
      "Git"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Proof of concept for a Taskwarrior on-exit hook that manages a git repository in ~/.task",
    "category": "Hook Scripts",
    "compatibility": "2.4.2+",
    "description": "Proof of concept for a Taskwarrior on-exit hook that manages a git repository in ~/.task"
  },
  {
    "last_update": "2015-05-27",
    "author": [
      "Tomas Babej"
    ],
    "url_src": "https://github.com/tbabej/taskwarrior-shift-all-recurrence-hook",
    "license": "MIT License",
    "url": "https://github.com/tbabej/taskwarrior-shift-all-recurrence-hook",
    "obsolete": false,
    "name": "Shift All Recurrence Hook",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Have your wait, scheduled and until attributes shifted by the recurrence span of recurrent tasks the same way that due attribute is shifted. Don't let your periodic tasks clutter up your task list any longer.",
    "category": "Hook Scripts",
    "compatibility": "2.4.0+",
    "description": "Have your wait, scheduled and until attributes shifted by the recurrence span of recurrent tasks the same way that due attribute is shifted. Don't let your periodic tasks clutter up your task list any longer."
  },
  {
    "last_update": "2015-04-20",
    "author": [
      "Kosta Harlan",
      "Adam Coddington"
    ],
    "url_src": "https://github.com/kostajh/taskwarrior-time-tracking-hook",
    "license": "MIT License",
    "url": "https://github.com/kostajh/taskwarrior-time-tracking-hook",
    "obsolete": false,
    "name": "Time Tracking Hook",
    "theme": [
      "Time"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "A simple Taskwarrior hook allowing one to track total time spent on a task.",
    "category": "Hook Scripts",
    "compatibility": "2.4.0+",
    "description": "A simple Taskwarrior hook allowing one to track total time spent on a task."
  },
  {
    "last_update": "2015-04-01",
    "author": [
      "Wim Schuermann"
    ],
    "url_src": "https://gist.github.com/wbsch/a2f7264c6302918dfb30",
    "license": "Unknown",
    "url": "https://gist.github.com/wbsch/a2f7264c6302918dfb30",
    "obsolete": false,
    "name": "\"blocks:\" Attribute Hook",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Adds a \"blocks:\" pseudo-attribute for adding/modifying tasks. \"blocks:\" is the opposite of \"depends:\".",
    "category": "Hook Scripts",
    "compatibility": "2.4.2+",
    "description": "Adds a \"blocks:\" pseudo-attribute for adding/modifying tasks. \"blocks:\" is the opposite of \"depends:\"."
  },
  {
    "last_update": "2016-03-19",
    "author": [
      "Bykov Vladislav (envolyse)"
    ],
    "url_src": "https://github.com/envolyse/estact",
    "license": "Unknown",
    "url": "https://github.com/envolyse/estact",
    "obsolete": false,
    "name": "estact",
    "theme": [
      "GUI",
      "Time",
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Taskwarrior velocity (Estimated vs actual time) graph",
    "category": "Extensions",
    "readme": "Velocity Estimated vs actual time graph Example Plots a velocity graphic for tasks not older than six months estact py end after today 6m https github com envolyse estact raw master screenshot png You can move graph using arrow keys Limitations Won t work on tasks without started stopped annotations Configuration Started stopped annotations journal time on Estimated time UDA uda est label Estimate uda est type duration Note that you don t have to use the same name for it see estact py h",
    "compatibility": "2.1.0+",
    "description": "Taskwarrior velocity (Estimated vs actual time) graph"
  },
  {
    "last_update": "2016-04-21",
    "author": [
      "Tomas Babej (tbabej)",
      "David J Patrick (linuxcaffe)",
      "phha",
      "Lubcik (lubcik)",
      "absala"
    ],
    "url_src": "https://github.com/tbabej/taskwiki",
    "license": "MIT",
    "url": "https://github.com/tbabej/taskwiki",
    "obsolete": false,
    "name": "taskwiki",
    "theme": [
      "Vim",
      "Vim"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Proper project management with Taskwarrior in vim.",
    "category": "Extensions",
    "readme": "Taskwiki _Proper project management in vim Standing on the shoulders of vimwiki and Taskwarrior_ Travis build status https travis ci org tbabej taskwiki svg branch master https travis ci org tbabej taskwiki Coverage Status https coveralls io repos tbabej taskwiki badge svg branch master https coveralls io r tbabej taskwiki branch master Code Health https landscape io github tbabej taskwiki master landscape svg style flat https landscape io github tbabej taskwiki master Chat with developers https badges gitter im Join 20Chat svg https gitter im tbabej taskwiki a _ _ _ _ ___ _ _ _ _ a command line _ __ personal wiki todo list _ __ V V for vim _ __ _ ___ _ _ _ _ _ _ _ _ Installation Make sure you satisfy the requirements Vim 7 4 or newer compiled with python Vimwiki https github com vimwiki vimwiki tree dev the dev branch git clone https github com vimwiki vimwiki vim bundle branch dev Taskwarrior http taskwarrior org version 2 4 0 or newer install either from sources http taskwarrior org download or using your package manager http taskwarrior org download dist sudo dnf install task tasklib https github com tbabej tasklib tree develop the develop branch Python library for Taskwarrior sudo pip install upgrade git git github com tbabej tasklib develop Install taskwiki Using pathogen or similiar vim plugin manager the taskwiki install is as simple as git clone https github com tbabej taskwiki vim bundle taskwiki However make sure your box satisfies the requirements stated above To access documentation run helptags and then help taskwiki Optional enhancements The following optional plugins enhance and integrate with TaskWiki At very least I d recommend the AnsiEsc plugin Taskwarrior charts are much more fun when they re colorful vim plugin AnsiEsc https github com powerman vim plugin AnsiEsc adds color support in charts git clone https github com powerman vim plugin AnsiEsc vim bundle tagbar https github com majutsushi tagbar provides taskwiki file navigation git clone https github com majutsushi tagbar vim bundle vim taskwarrior https github com farseer90718 vim taskwarrior enables grid view git clone https github com farseer90718 vim taskwarrior vim bundle How it works Taskwiki enhances simple vimwiki task lists by storing the task metadata in Taskwarrior Taskwarrior uses plaintext data files as a backend and taskwiki uses Taskwarrior as a backend This allows taskwiki to leverage its powerful features such as filtering recurrent tasks user defined attributes or hooks Features Individual tasks Install Taskwiki Such tasks get synced to TaskWarrior when the file is saved Additional metadata as project tags priority can be stored with this task Some of that metadata gets visually represented in vim and is updated if the representation changes in vim Install Taskwiki 2015 08 23 19 00 Task lists Tasks can be grouped simply written in one block This has the advantage of any child tasks being marked as dependencies of the parent tasks Get married X Find a girlfriend Buy a ring Propose Viewports Viewport is a header with a task query filter embedded generating the corresponding task list These tasks can be modified and changes will be synced back to task data A simple viewport can look as follows Home tasks project Home Filter query is concealed Upon saving this will generate the list of matching tasks in a tree like fashion respecting dependencies Home tasks project Home Feed the dog 2015 08 08 Tidy up the house Wash the dishes Declare war on the cobwebs Tasks added written to the task list under the viewport inherit the defaults from its filter Home tasks project Home Feed the dog Tidy up the house Wash the dishes Declare war on the cobwebs Call the landlord about rent payment 2015 08 23 the task above will have project Home set automatically For some more complex filters defaults cannot be automatically derived In such case you can specify the defaults explicitly Urgent tasks OVERDUE or urgent urgent defaults definition Viewports can be inspected by hitting CR with cursor above them Report splits Taskwiki can provide additional information reports on a task list selected or part of a viewport and on individial tasks as well These reports are shown in dynamic temporary splits Tidy up the house 2015 08 23 00 00 For example hitting CR on the above task runs TaskWikiInfo and displays Name Value ID 6 Description Tidy up the house 2015 08 22 21 29 35 Tip Use roomba for vacuum cleaning Status Pending Project Home Entered 2015 08 22 21 27 26 2 minutes Due 2015 08 23 00 00 00 Last modified 2015 08 22 21 30 21 1 second Virtual tags ANNOTATED MONTH PENDING READY UNBLOCKED YEAR UUID 448c2fa9 6a06 454e a2bc b0c8ae91994f Urgency 9 895 Priority H Date Modification 2015 08 14 21 29 35 Annotation of Tip Use roomba for vacuum cleaning added 2015 08 14 21 30 11 Due set to 2015 08 23 00 00 00 Running the TaskWikiSummary can produce side split like this Project Remaining Avg age Complete 0 100 Work 18 4 weeks 74 Designs Feature X 3 4 weeks 89 Feature Y 7 2 weeks 47 Tickets 5 3 weeks 79 Blog 1 4 months 50 There are many more reports burndown calendar history projects stats summary tags but for the sake of brevity they will not be described here They work in a similiar fashion Task modification commands Taskwiki provides commands for the all the traditional operation on tasks such as starting stopping completing deletion annotation generic modification etc Tidy up the house 2015 08 23 00 00 Say we want to postpone this task to tomorrow This can be achieved by hitting Leader tm TaskWikiMod a prompt will show up where we enter our desired modification Enter modifications due tomorrow Task is instantly updated Tidy up the house 2015 08 24 00 00 Task modification commands can be performed on a task currently below the cursor or on a visually selected group of tasks Advanced Viewport flags Custom data sources sort orders can be defined for individual viewports Grid view If vim taskwarrior is available it can be used to display a grid view of available tasks Tagbar Can be shown to display a overview of a Taskwiki file Interactive splits Assign project tags by picking a option from a split that lists all the already used projects tags Credits Created by Tomas Babej Design suggestions contributed by David J Patrick Inspired by vimwiki tasks plugin https github com teranex vimwiki tasks Taskwiki wouldn t be possible without all the work and support from the Taskwarrior community Come hang out at taskwarrior on Freenode Contributing Code and issue tracker is hosted at https github com tbabej taskwiki Feel free to submit pull requests and or file issues for bugs and suggestions",
    "compatibility": "2.1.x - 2.4.x",
    "description": "Proper project management with Taskwarrior in vim."
  },
  {
    "last_update": "2015-08-15",
    "author": [
      "Derek Schrock"
    ],
    "url_src": "https://github.com/derekschrock/header2task",
    "license": "Simplified BSD",
    "url": "https://github.com/derekschrock/header2task",
    "obsolete": false,
    "name": "header2task",
    "theme": [
      "Mail"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Script to manipulate taskwarrior tasks when passed a raw email via stdin. Annotating the task with the email's message-id, from, and subject headers.",
    "category": "Extensions",
    "compatibility": "2.3.0+",
    "description": "Script to manipulate taskwarrior tasks when passed a raw email via stdin. Annotating the task with the email's message-id, from, and subject headers."
  },
  {
    "last_update": "2015-08-12",
    "author": [
      "Renato Alves"
    ],
    "url_src": "https://gist.github.com/Unode/9366218",
    "license": "GPLv3",
    "url": "https://gist.github.com/Unode/9366218",
    "obsolete": false,
    "name": "taskgit",
    "theme": [
      "Git",
      "Time"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "taskgit is a simple wrapper script that automatically tracks your TASKDIR folder in git, making commits every time data changes.",
    "category": "Extensions",
    "compatibility": "All versions",
    "description": "taskgit is a simple wrapper script that automatically tracks your TASKDIR folder in git, making commits every time data changes."
  },
  {
    "last_update": "2016-03-27",
    "author": [
      "Check your git settings! (invalid-email-address)"
    ],
    "url_src": "https://github.com/venturecommunism/meteor-taskwarrior",
    "license": "Unknown",
    "url": "https://github.com/venturecommunism/meteor-taskwarrior",
    "obsolete": false,
    "name": "meteor-taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "taskwarrior client in meteor.js",
    "category": "Extensions",
    "readme": "A meteor http meteor com client for task warrior http taskwarrior com Still in early development but you can sync your tasks to this client and see them in the browser including mobile Warning This is beta software Assume that using this software will break your taskwarrior data Requirements To attempt to use the task warrior integration you ll have to use commit 4cdab380c63b801870885b69c398ebc339463c71 https github com venturecommunism meteor taskwarrior tree 4cdab380c63b801870885b69c398ebc339463c71 If you want to test out the program as a stand alone without task server integration you can check out this version To use Task Warrior integration you need to have your own taskd server http taskwarrior org projects taskwarrior wiki Server_setup or an account on one This has been tested on Ubuntu 12 04 Install script To install you could use the install script https raw github com venturecommunism meteor taskwarrior master install sh using Wget wget qO https raw github com venturecommunism meteor taskwarrior master install sh bin bash or cURL curl https raw github com venturecommunism meteor taskwarrior master install sh bin bash Open up the server config js https github com venturecommunism meteor taskwarrior blob master server config js file in an editor and edit the following values to match your task server configuration the last time this file existed was this commit https github com venturecommunism meteor taskwarrior tree 4cdab380c63b801870885b69c398ebc339463c71 taskserver the ip or domain of your task server port defaults to 6544 org org group your task user belongs to user user name of your task user key shared key looks something like ddea9923 fgg3 3922 c958 23cgdeaa0584 and then to run on port 80 meteor port 80 or port 3000 meteor When you click the Sync button you should see your tasks in the app The changeset is stored in another collection More coming",
    "compatibility": "Unknown",
    "description": "taskwarrior client in meteor.js"
  },
  {
    "last_update": "2014-11-25",
    "author": [
      "Jacek Konieczny (Jajcus)",
      "Elan Ruusam\u00e4e (glensc)"
    ],
    "url_src": "https://github.com/pld-linux/bugwarrior",
    "license": "GPLv3",
    "url": "https://github.com/pld-linux/bugwarrior",
    "obsolete": false,
    "name": "bugwarrior",
    "theme": [
      "Git",
      "Git",
      "Git"
    ],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Sync github, bitbucket, and trac issues with taskwarrior",
    "category": "Extensions",
    "readme": "bugwarrior Pull tickets from github bitbucket bugzilla jira trac and others into taskwarrior split here bugwarrior is a command line utility for updating your local taskwarrior http taskwarrior org _ database from your forge issue trackers It currently supports the following remote resources github https github com _ api v3 gitlab https gitlab com _ api v3 bitbucket https bitbucket org _ pagure https pagure io _ bugzilla https www bugzilla org _ trac https trac edgewall org _ megaplan https www megaplan ru _ teamlab https www teamlab com _ redmine https www redmine org _ jira https www atlassian com software jira overview _ taiga https taiga io _ activecollab https www activecollab com _ 2 x and 4 x phabricator http phabricator org _ versionone http www versionone com _ Documentation For information on how to install and use bugwarrior read the docs https bugwarrior readthedocs org _ on RTFD Build Status master image https secure travis ci org ralphbean bugwarrior png branch master alt Build Status master branch target https travis ci org ralphbean bugwarrior develop image https secure travis ci org ralphbean bugwarrior png branch develop alt Build Status develop branch target https travis ci org ralphbean bugwarrior Branch Status master master develop develop Contributors Ralph Bean primary author Ben Boeckel contributed support for Gitlab Justin Forest contributed support for RedMine TeamLab and MegaPlan as well as some unicode help Tycho Garen contributed support for Jira Kosta Harlan contributed support for activeCollab notifications and experimental taskw support Luke Macken contributed some code cleaning James Rowe contributed to the docs Adam Coddington anti entropy crusader",
    "compatibility": "Unknown",
    "description": "Sync github, bitbucket, and trac issues with taskwarrior"
  },
  {
    "last_update": "2015-07-29",
    "author": [
      "Taskwarrior Team"
    ],
    "url_src": null,
    "license": "MIT",
    "url": "",
    "obsolete": false,
    "name": "Import/Export Format Converters",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "These are the format conversion scripts formerly included with Taskwarrior releases, but now moved online. export-csv.pl export-html.pl export-ical.pl export-sql.py export-tsv.pl export-xml.pl export-xml.py export-xml.rb export-yad.pl export-yaml.pl import-todo.sh.pl import-yaml.pl",
    "category": "Extensions",
    "compatibility": "2.0.0+",
    "description": "These are the format conversion scripts formerly included with Taskwarrior releases, but now moved online. \n<small><a>export-csv.pl</a></small> \n<small><a>export-html.pl</a></small> \n<small><a>export-ical.pl</a></small> \n<small><a>export-sql.py</a></small> \n<small><a>export-tsv.pl</a></small> \n<small><a>export-xml.pl</a></small> \n<small><a>export-xml.py</a></small> \n<small><a>export-xml.rb</a></small> \n<small><a>export-yad.pl</a></small> \n<small><a>export-yaml.pl</a></small> \n<small><a>import-todo.sh.pl</a></small> \n<small><a>import-yaml.pl</a></small>"
  },
  {
    "last_update": "2016-04-20",
    "author": [
      "mjheagle8 (mjheagle8)",
      "Matthias Beyer (matthiasbeyer)",
      "Leander Harding (lharding)",
      "Kevin MacMartin (prurigro)",
      "Marcus M\u00fcller (marcusmueller)",
      "Iain Learmonth (irl)"
    ],
    "url_src": "https://github.com/lharding/tasknc",
    "license": "MIT",
    "url": "https://github.com/lharding/tasknc",
    "obsolete": false,
    "name": "tasknc",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "C"
    ],
    "descriptionText": "a ncurses wrapper around taskwarrior",
    "category": "Extensions",
    "readme": "task ncurses About Thank you for trying tasknc tasknc is a ncurses wrapper for task warrior http taskwarrior org projects show taskwarrior written in C It aims to provide an interface like the excellent ncurses programs mutt and ncmpcpp Installation Installation can be performed by pasting the commands below git clone https github com lharding tasknc git cd tasknc make sudo make install Requirements task warrior http taskwarrior org projects show taskwarrior is the backend on which tasknc relies In Arch Linux this is provided by the task package pod2man is required to generate the manual page In Arch Linux this is provided by the perl package ncursesw headers are required to compile with unicode support In Arch Linux this is provided by the ncurses package Bugs tasknc is still in active development and there are still some bugs Reporting bugs is very helpful to development Please report these bugs on github https github com lharding tasknc issues page 1 state open If you experience a segmentation fault it would be fantastic if you could go into the test directory and run the valgrind_test sh script and attach the resulting valgrind_errors file Contributing Contribution in the form of feedback patches bug reports etc is greatly appreciated Original code by mjheagle8 https github com mjheagle8 Special thanks to matthiasbeyer https github com matthiasbeyer for a massive code overhaul",
    "compatibility": "2.2.0",
    "description": "a ncurses wrapper around taskwarrior"
  },
  {
    "last_update": "2015-07-09",
    "author": [
      "Leander Harding (lharding)"
    ],
    "url_src": "https://github.com/lharding/dashborg",
    "license": "MIT",
    "url": "https://github.com/lharding/dashborg",
    "obsolete": false,
    "name": "dashborg",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Lua"
    ],
    "descriptionText": "Curses-based taskwarrior dashboard for your pocket computer.",
    "category": "Extensions",
    "readme": "END OF THE WORLD NOTICE As of this commit I ve replaced this project in my own use with tasknc https github com lharding tasknc It s not likely there will be any further development here but I m leaving the repository up for posterity HERE BE DRAGONS This is dashborg a PIM dashboard tool I m working on that uses taskwarrior as a task management backend It s a bit barely functional at all right now and this repo mainly exists to ease my process of syncing development between different machines Roadmap Explicit alerts for due or soon to be due tasks More succint time delta format right now just using taskwarrior s ABANDONED taskwarrior s has improved Pull upcoming events from google calendar and display in their own section notes section for non task things ABANDONDED now using rclip from lsh bin https github com lharding lsh bin for this quick alarm kitchen timer function WTF It s intended to be auto shown when your clamshell device s lid has been closed long enough so that it will be there waiting for you when you open it next This roughly simulates the agenda lockscreen mode on old versions of BlackBerry OS Yeah but Lua On my Pandora http openpandora org a fresh Python VM is about 3600K takes 500ms to start and maps 10MB of libraries while a fresh Lua VM maps 5MB of libraries mostly just glibc and friends takes 1100K of live memory and starts in under 50ms Other interpreted languages compare similarly and Lua is a relatively inoffensive language when compared with other things in its size class e g bash These numbers sound trivial as I type this on my reasonably powerful laptop but on a constrained device like the pandora they matter and it s important that this too automatically launching not be the source of a zram heart attack",
    "compatibility": "2.2.0",
    "description": "Curses-based taskwarrior dashboard for your pocket computer."
  },
  {
    "last_update": "2016-04-20",
    "author": [
      "Josiah Ritchie (flickerfly)",
      "Will Pearson (pearswj)",
      "Josemi Li\u00e9bana (titosemi)"
    ],
    "url_src": "https://github.com/flickerfly/taskwarrior-notifications",
    "license": "Unknown",
    "url": "https://github.com/flickerfly/taskwarrior-notifications",
    "obsolete": false,
    "name": "taskwarrior-notifications",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "A collection of ways to alert me/bring attention to my task list because I'm easily distracted and need help focusing... what was I doing again? Ohhh, a new podcast...",
    "category": "Extensions",
    "readme": "These are all scripts to provide various notifications from concerning tasks in taskwarrior a commandline task management system Configuration Configuration of the email address and file locations can be changed in the config file in the root of the repo A sample config is provided in example config Simply rename this to config and make the appropriate edits Available Scripts task email sh Uses ssmtp to send html formatted email to you on a regular basis giving you updates on your task list I m playing with two methods of accomplishing this This one requires python and numpy a python module See the task ansi2email sh for an option that does not require python Currently the fancy HTML on this is optimized for mobile screens so it s thin and all that I assume a little CSS would change this quickly Thanks to Mail Chimp for releasing some good HTML templates on github task popup sh Provides popups with sound to your linux desktop This uses tools that come as part of the default ubuntu system but are available on other Linux operating systems task ansi2email sh An alternate but not as pretty version of HTML email This puts the task output into an HTML pre tag so it appears as it would on the command line I kinda like that though task print sh Yeah this doesn t actually exist because it is easily done in a crontab line so a script is overkill in a basic situation See the appropriate line below task growl sh For the mac users this will send a message to Growl which is kinda like the task popup sh for linux users This requires the extra package in the Growl install called growlnotify Sample Crontab lines bash Popup a little notice monday through friday ever 30 minutes with task info 30 1 5 DISPLAY 0 0 home user bin taskwarrior notifications task popup sh Send me an email every morning at 5 30 on all days except Sunday 30 5 1 6 home user bin taskwarrior notifications task email sh Print out my task list every weekday morning at 5 30 30 5 1 5 usr bin task usr bin lp",
    "compatibility": "1.9.4",
    "description": "A collection of ways to alert me/bring attention to my task list because I'm easily distracted and need help focusing... what was I doing again? Ohhh, a new podcast..."
  },
  {
    "last_update": "2015-11-26",
    "author": [
      "Justin Forest (umonkey)"
    ],
    "url_src": "https://github.com/umonkey/task-indicator",
    "license": "MIT",
    "url": "http://umonkey.net/task-indicator/",
    "obsolete": false,
    "name": "task-indicator",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "TaskWarrior indicator applet",
    "category": "Extensions",
    "readme": "TaskWarrior indicator applet This is an applet that displays 10 most important tasks in the indicator popup menu has a dialog to search across all tasks pending or closed displays current activity time for running tasks can add or modify tasks etc Supports task notes Send bugs and comments to hex umonkey net Home page http umonkey net task indicator",
    "compatibility": "Unknown",
    "description": "TaskWarrior indicator applet"
  },
  {
    "last_update": "2016-01-21",
    "author": [
      "Fidel Mato (nocejo)",
      "Paul Beckingham (pbeckingham)"
    ],
    "url_src": "https://github.com/nocejo/trev",
    "license": "MIT",
    "url": "https://github.com/nocejo/trev",
    "obsolete": false,
    "name": "trev",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Perl"
    ],
    "descriptionText": "Taskwarrior tasks reviewing script",
    "category": "Extensions",
    "readme": "NAME trev pl Taskwarrior review SYNOPSIS perl trev pl t T mark start filter DESCRIPTION This perl script reads a list of taskwarrior http taskwarrior org tasks and presents them to the user one at a time prompting for an action among a restricted set of taskwarrior commands issued action or none is performed on the task whereupon the script proceeds to the next task up to the end of the list Take into account that actions issued by the user as well as other events can alter the list along the review process so after every potentially changing action the list is re read At the script prompt the user can also include the current into a set of marked tasks which is continuously shown Tasks into this set are marked unmarked by default as active stopped but the marking tag can be modified by the user as an option at the command line or pre configured in the configuration file Apart from specifying options marks filters in the command line call to the script a named review can be issued as in trev calls referring to one of the named reviews defined in the configuration file provoking a pre configured review single or cascaded see CONFIGURATION and FILES Tasks lists come from system calls to taskwarrior obeying then the user preferred settings for visibility order decoration OPTIONS ARGUMENTS Command line structure after the script name a number of option argument e g T Make these calls can follow then two optional arguments see below can follow mark and start in this order and finally an optional filter argument closes the invocation Order is mandatory No options arguments are required Options to set additional text in upper and or lower labels con be issued Optional arguments can be issued to set a marking tag a task number for the review to start and or a taskwarrior filter Order is mandatory see below COMMAND LINE OPTIONS T Additional text t Additional text Add Additional text to the upper T or lower t label as a reminder or explanation Quotation marks are required if text contains blank spaces ARGUMENTS mark If first argument after options starts with as in trev pl mark the marking tag will be set to mark marking action to modify mark and unmarking action to modify mark Double is required in order to distinguish from a regular tag intended to be used as a filter If not set default marking attribute is active marking action is start and unmarking action is stop active is not a taskwarrior tag but a report this is not the more general case which is intended to use a tag modify start A numeric argument ending in as in trev pl 113 following an optional mark and preceding any filter requests the script to start reviewing at task number 113 and proceed to the end of the list This can be useful when resuming an interrupted long review Final is required in order to distinguish from a just one task filter like in trev pl 113 filter The rest of the line is taken as a taskwarrior filter task number s report name tag dates bare term see EXAMPLES below May be not all filters can be correctly interpreted Argument option order is mandatory option s must come first if at all issued If a marking tag is specified it must be issued as the first argument following options starting task number can be first if no marking tag or second first is marking tag after options Filter must go at the end of the line EXAMPLES See EXAMPLES below OPTIONS AT THE SCRIPT PROMPT After clearing the console displaying a progress bar an upper separating label the set of currently marked tasks a lower separating label and the current task the script prompts for an action At this prompt the following actions can issued entering them with RET RET void line No action proceeds to the next task b Goes back to the previous task Marks task as active start ing it default or with the pre configured or requested marking tag Unmarks current task and take it out of the marked set n If is followed by a number as in 156 unmarks the referred task number not the current taskwarrior command args Executes an allowed taskwarrior action being allowed actions annotate append delete denotate done duplicate edit information modify prepend start stop add calendar log undo version Those taskwarrior commands that need a task number first group operate on the current task Commands can be shortened when not ambiguous Any command to perform on other not the current task like in 175 delete when e g 37 is the current one is not allowed q quit exit bye Terminate script execution at this point On exit the last reviewed task number is shown DEPENDENCIES Taskwarrior 2 2 0 must be installed Some needed modules ship with perl as of 5 06 Term ANSIColor Term ReadLine But some do not Term ReadLine Gnu Perl extension for the GNU Readline History Library You will need to install it from your distribution this is libterm readline gnu perl deb package in debian like or get it from CPAN CONFIGURATION No configuration is necessary if you can go with the hard wired defaults see FILES for parameter details Otherwise the script source code can be edited or a configuration file can be created Source code Hard wired defaults mark tag and marking actions filter upper and lower labels localization info view time counter prompt text label and separator styles can be modified directly in the Configuration section of the script source code As perl is an interpreted scripting language no compilation or build is needed Currently you can choose between two localizations eng USA and esp ESP Configuration file Default trev behavior can be configured as well as pre configured named reviews can be defined in an optional configuration file named trevrc or trevrc See FILES for trevrc syntax and semantics INSTALL In order to simplify shell calls to perl trev pl and to avoid shell interpolation of arguments two ways can be followed 1 Add an alias in your bashrc bash_aliases or similar alias trev perl path to the script trev pl 2 Create an executable shell script somewhere in your path bin trev containing bin sh perl path to the script trev pl Use it in both cases as trev arguments Allowing or not shell interpolation of arguments may cause different behavior EXAMPLES trev trev can be replaced by perl path to the script trev pl trev Reviews tasks user s task default filter starts reviewing at first of them default mark unmark current task with start stop default trev week Sets marking tag to week and mark unmark current task with modify week modify week trev calendula ate _loops Mark unmark using modify calendula reviews only ate _loops tagged tasks trev deleg 113 pro wp5 Sets marking tag to deleg start reviewing at task 113 and process only tasks appertaining to a certain wp5 project trev 113 due Processes only tasks without a due date Start at task 113 Mark unmark with start stop and starts at the top of the list defaults trev NOW overdue Processes overdue tasks Mark unmark with modify NOW trev 113 Reviews just task 113 Start stop for mark unmark default trev amsterdam Reviews every task containing amsterdam in its description starting at the top of the list and marking unmarking with start stop trev T Make these phone calls t These are high urgency actionable tasks call urgency over 12 READY Reviews every task with an urgency over 12 and marked READY starting at the top of the list and marking unmarking with mod call call Make these phone calls and These are high urgency actionable tasks appear respectively at the end of upper and lower labels Remark the necessary escaping quotation marks trev wp5 Reviews tasks following settings in a single or cascaded named review defined in the configuration file FILES trevrc trevrc or trevrc depending on the location is an optional plain text file that can contain configuration instructions for trev and is looked for and read at the beginning of every execution Instructions in this file are in the form review name parameter value where review must be always present as is name names a named review parameter refers to an specific behavioral aspect and value concretes this behavior So review default L10N esp ESP specifies that the Spanish localization must be used instead of the hard wired default eng USA Any number of blanks or tabs can be used before after or between the three tokens review name parameter and value but if in value blanks are desired to appear at the beginning or at the end of the string like in review wp5 upper THIS IS IMPORTANT it must be enclosed between quotations No shell escaping is needed The following paths are searched in this order for the configuration file task trevrc trevrc note the dot hidden file trev pl script dir trevrc mainly for development repository purposes First file found is used Default behavior in trevrc Default behavior different from hard wired defaults for trev can be configured by defining the special named review default in the configuration file An example default set of parameters follows default behavior parameters review default seltag hard donow review default on modify donow review default off modify donow review default filter hard review default L10N esp ESP review default viewinfo off review default showtime on review default prompt trev quotes to include blank review default upper review default lower modo por defecto hard donow review default lblstyle reverse bold review default sepstyle underline bold Blank void lines as well as anything following a character is ignored Parameter and hard wired defaults Explanations concerning parameters follow indicating the hard wired defaults seltag active Tag or report used as mark for selected tasks on start Taskwarrior command that makes the current task part of the selected set More usually this would be something as modify markingtag off stop Taskwarrior command that takes out the current task part from the selected set filter Expression that Taskwarrior will use as filter to get the task s to review L10N eng USA Localization used for program messages Values can be eng USA esp ESP viewinfo on This switch on off causes the program to show or not detailed information on the task being reviewed showtime on This switch on off makes the program show time spent in the review at exit prompt trev upper Additional text to appear at the upper label lower Additional text to appear at the lower label lblstyle reverse bold Decoration style for labels It depends on the capabilities of the console sepstyle underline bold Decoration style for the separation between panel counter selected task labels and prompt line It depends on the capabilities of the console Named reviews Parameter values for specific frequent reviews can be defined in the configuration file and invoked in an easier way from the command line using its name as an argument trev calls Definition of a named review is performed by issuing configuration instructions referring to the name in trevrc e g for the review named calls Calls review calls filter phone urgency over 12 READY review calls seltag call review calls on mod call review calls off mod call review calls prompt trev calls quotes to include blank review calls upper Make these phone calls review calls lower These are high urgency actionable tasks Those parameter undefined for the review lblstyle and sepstyle in the example are taken from defaults so a named review can be defined with a single line in trevrc review tod filter due after yesterday and due before tomorrow status pending and rev that takes every other parameter from defaults Cascaded named reviews Complex review patterns can benefit from a sequential structure as multi step multi level or cascaded sets of reviews that can be oriented to grouping together progressively refining etc Named reviews can be used in trev in a standalone way or cascaded i e starting at an specific named review and when this one is finished the user is asked whether to stop the sequence or to continue with next named review in the sequence until it finishes Sequence can be entered at any single named review not necessarily at the beginning and proceeding from there on so the user can stop and resume later a formerly interrupted between two steps review Definition of a cascaded review is performed in the configuration file as an ordered group of named reviews sharing a common prefix in its name being this prefix separated from the specific name of the step by a character and preceding it An example follows for a cascaded review that performs the reviewing of a certain wp5 project in two steps first tasks with a deadline and then those without one wp5 multi review wp5 filter pro wp5 review wp5 upper IMPORTANT review wp5 due filter pro wp5 and due any deadline review wp5 due lower This is wp5 due review wp5 notdue filter pro wp5 and due none no deadline review wp5 notdue lower This is wp5 notdue The first group wp5 without any specific step name is used as a container for parameters common to all steps but those parameter can be overwritten by definitions in single steps So review wp5 filter is here of any use because every step defines its own overwriting filter but review wp5 upper is used by wp5 due and wp5 notdue because upper is not defined for them Every other parameter is taken from defaults Order of the groups establishes the step review order first single named review is addressed first then second and so on Cascaded reviews are invoked with its prefix followed or not by trev wp5 or trev wp5 and starts with wp5 due proceeding till the natural end of it of when the user interrupts the review by means of the usual terminating commands q quit exit or bye At this point the user is informed and prompted Multi step review wp5 Finished step wp5 due Next step wp5 notdue Proceed RET or quit If q uit plus RET is issued the whole review is terminated If RET is issued instead the program proceeds with the wp5 notdue step till this end or termination when the user is informed Multi step review wp5 Finished step wp5 notdue last and the cascaded review is finished As previously said the sequence can be entered at an intermediate review trev wp5 notdue following afterwards the usual course Taskwarrior executable The script issues system calls to task and this is the expected name of the task executable This can be modified inside the source code CAVEATS This is a slow script specially when after an action the order or number of tasks changes and next task must be located through its uuid In principle the script is intended to be used off line but if orders can come in any form from the web beware system calls are issued through perl backticks and any security check is performed BUGS https github com nocejo trev issues AUTHOR Fidel Mato fidel mato at gmail com CONTRIBUTORS David J Patrick linuxcaffe Paul Beckingham pbeckingham Lars Wallenborn larsborn COPYRIGHT AND LICENSE Copyright 2013 2015 Fidel Mato trev pl is released under the MIT license Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files the Software to deal in the Software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense and or sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software THE SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE http www opensource org licenses mit license php DATE 22 May 2015",
    "compatibility": "Unknown",
    "description": "Taskwarrior tasks reviewing script"
  },
  {
    "last_update": "2015-05-05",
    "author": [
      "Satheesh Vattekkat"
    ],
    "url_src": "https://github.com/vsbabu/pinboard/tree/master/utils",
    "license": "Free",
    "url": "https://github.com/vsbabu/pinboard/tree/master/utils",
    "obsolete": false,
    "name": "Pinboard HTML",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Inspired by export-html.py, this is a modified version that prints the task list by project into an HTML. Screen Shot",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "Inspired by export-html.py, this is a modified version that prints the task list by project into an HTML. \n<small><a href=\"http://www.taskextras.org/boards/1/topics/2286\">Screen Shot</a></small>"
  },
  {
    "last_update": "2016-03-21",
    "author": [
      "Sven Hertle (svenhertle)",
      "Joseph Richardson (EHLOVader)",
      "fmeynadier"
    ],
    "url_src": "https://github.com/svenhertle/tasktime",
    "license": "own",
    "url": "https://github.com/svenhertle/tasktime",
    "obsolete": false,
    "name": "tasktime",
    "theme": [
      "Time",
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Calculate and print spent time for a project from taskwarrior",
    "category": "Extensions",
    "readme": "tasktime tasktime reads information of a project from taskwarrior http www taskwarrior org and calculates how much time was spent with this project tasktime can print CSV or readable output Usage tasktime py parameters project Parameters h help Show help message c csv Print output in CSV format n null Print also tasks without time information default no t task cmd Change task command Prepare taskwarrior You have to add journal time on to your taskwarrior configuration taskrc Taskwarrior will save start and stop annotations from now on This annotations are evaluated by tasktime Note time with taskwarrior taskwarrior has the operations start and stop This information is used to calculate the spent time You have to start and stop the tasks you work on Example task 2 start Work on task 2 task 2 stop Examples Default output tasktime py cool project Output Project cool project Do something cool Duration 00 13 05 Do something really cool Duration 02 18 35 Sum 02 31 40 Print also tasks without time tasktime py n cool project Output Project cool project Do something cool Duration 00 13 05 Do something boring Do something really cool Duration 02 18 35 Sum 02 31 40 CSV output tasktime py c cool project Output Project cool project Description Duration hours Do something cool 00 13 05 Do something really cool 02 18 35 Sum 02 31 40 Contact and copyright Sven Hertle sven hertle googlemail com tasktime is distributed under the MIT license See http www opensource org licenses MIT http www opensource org licenses MIT for more information",
    "compatibility": "2.1.2",
    "description": "Calculate and print spent time for a project from taskwarrior"
  },
  {
    "last_update": "2014-12-15",
    "author": [
      "Heikki Hokkanen (hoxu)"
    ],
    "url_src": "https://github.com/hoxu/gtw",
    "license": "GPLv3",
    "url": "https://github.com/hoxu/gtw",
    "obsolete": false,
    "name": "gtw",
    "theme": [
      "Git",
      "Git"
    ],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "git-taskwarrior wrapper that keeps taskwarrior tasks in a branch",
    "category": "Extensions",
    "readme": "gtw git taskwarrior wrapper Keeps taskwarrior tasks in a separate branch of a git repository All commands are passed as is to taskwarrior Any modifications by taskwarrior are then automatically committed and pushed to the main repository s branch Configuration gtw uses two optional config variables from the main git repository git config gtw repository path to taskwarrior repository git config gtw branch tasks If gtw repository is unset the taskwarrior repository will be created in git task If gtw branch is unset tasks branch will be used by default Usage cd your project repository gtw taskwarrior command gtw add demonstrate usage calls task add demonstrate usage git log tasks taskwarrior changes are pushed into this branch License Licensed under GPLv3 see http www gnu org licenses gpl 3 0 html",
    "compatibility": "All",
    "description": "git-taskwarrior wrapper that keeps taskwarrior tasks in a branch"
  },
  {
    "last_update": "2014-11-16",
    "author": [
      "Nicholas E. Rabenau"
    ],
    "url_src": "https://github.com/nerab/TaskWarriorMail",
    "license": "MIT License",
    "url": "https://github.com/nerab/TaskWarriorMail",
    "obsolete": false,
    "name": "twmail",
    "theme": [
      "Mail"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "twmail allows you to mail new tasks to your Taskwarrior inbox",
    "category": "Extensions",
    "compatibility": "2.1.0",
    "description": "<code>twmail</code> allows you to mail new tasks to your Taskwarrior inbox"
  },
  {
    "last_update": "2016-03-17",
    "author": [
      "J. O. B. (shushcat)"
    ],
    "url_src": "https://github.com/shushcat/taskgv",
    "license": "MIT",
    "url": "https://github.com/shushcat/taskgv",
    "obsolete": false,
    "name": "taskgv",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Directed graphs of Taskwarrior projects, tags, and tasks.",
    "category": "Extensions",
    "readme": "taskgv Generates a pretty directed graph of Taskwarrior http taskwarrior org projects tags and tasks After the graph has been generated it s opened using either xdg open under GNU Linux or open under OS X Things end up looking kinda like this exgraph png Arrows show implication so they point from projects to tasks and from tasks to projects That is projects _include_ tasks and tasks _include_ tags Projects are represented by large circles tasks by colored rectangles and tags by uncolored squares Requirements Either of the xdg open or open commands present by default on most GNU Linux or OS X installs respectively Python Taskwarrior Graphviz http www graphviz org s digraph command Usage When placed in your PATH taskgv py filter opens a graph of your business filtered by Taskwarrior filter Integration This command can be integrated with Taskwarrior by either running task config alias gv execute taskgv py or adding the line alias gv execute taskgv py to your taskrc In either case the result will be the ability to call taskgv with the command task gv Credit This script is derived from graphdeps py http taskwarrior org projects taskwarrior wiki ExternalScripts graphdepspy",
    "compatibility": "2.0.0",
    "description": "Directed graphs of Taskwarrior projects, tags, and tasks."
  },
  {
    "last_update": "2014-07-10",
    "author": [
      "Cory Donnelly",
      "Johannes Schlatow"
    ],
    "url_src": "https://git.tasktools.org/projects/ST/repos/tw.org/commits/eb41773ce401bb6f3f4e145b237450074f5be8c5",
    "license": "GPLv2",
    "url": "https://git.tasktools.org/projects/ST/repos/tw.org/commits/eb41773ce401bb6f3f4e145b237450074f5be8c5",
    "obsolete": false,
    "name": "task-anon",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Anonymizes project names, task descriptions and annotations with md5 hashes that include a salt to provide a modicum of security. Tags are not anonymized (how would users indicate the problem tasks otherwise?). Anonymizing data is for helping developers diagnose data-specific problems with Taskwarrior.",
    "category": "Extensions",
    "compatibility": "All",
    "description": "Anonymizes project names, task descriptions and annotations with md5 hashes that include a salt to provide a modicum of security. Tags are not anonymized (how would users indicate the problem tasks otherwise?). Anonymizing data is for helping developers diagnose data-specific problems with Taskwarrior."
  },
  {
    "last_update": "2014-02-19",
    "author": [
      "kostajh"
    ],
    "url_src": "https://github.com/kostajh/ac-task-php",
    "license": "GPLv2",
    "url": "https://github.com/kostajh/ac-task-php",
    "obsolete": false,
    "name": "ac-task-php",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "PHP"
    ],
    "descriptionText": "ActiveCollab and Taskwarrior integration.",
    "category": "Extensions",
    "readme": "ActiveCollab and Taskwarrior integration TODO Add commands ac task comment",
    "compatibility": "2.2.0",
    "description": "ActiveCollab and Taskwarrior integration."
  },
  {
    "last_update": "2016-03-14",
    "author": [
      "Johannes S. (ValiValpas)",
      "David J Patrick (linuxcaffe)",
      "Jostein Berntsen (jostber)",
      "Paul Beckingham (pbeckingham)",
      "Adam Schmalhofer (adamschmalhofer)",
      "John Hammond (jmhammond)"
    ],
    "url_src": "https://github.com/ValiValpas/taskopen",
    "license": "GPLv2",
    "url": "https://github.com/ValiValpas/taskopen",
    "obsolete": false,
    "name": "taskopen",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Perl"
    ],
    "descriptionText": "Script for taking notes and open urls with taskwarrior",
    "category": "Extensions",
    "readme": "Dependencies This perl script is an enhancement to taskwarrior i e it depends on the task binary See http www taskwarrior org It also depends on the JSON module i e _libjson perl_ on debian _perl json_ on archlinux to be continued The helper scripts are usually run by bash Some of the scripts also depend on g awk What does it do It allows you to link almost any file webpage or command to a taskwarrior task by adding a filepath web link or uri as an annotation Text notes images PDF files web addresses spreadsheets and many other types of links can then be filtered listed and opened by using taskopen Some actions are sane defaults others can be custom configured and everything else will use your systems mime types to open the link Arbitrary commands can be used with taskopen at the CLI acting on the link targets enhancing listings and even executing annotations as commands Run taskopen h or man taskopen for further details The following sections show some very basic usage examples Basic usage Add a task task add Example Add an annotation which links to a file task 1 annotate checklist txt Note that the instructs taskwarrior to take the following arguments as the description part without doing any parser magic This is particularly useful to circumvent bug 819 Open the linked file by using the task s ID taskopen 1 Or by a filter expression requires taskwarrior 2 0 taskopen Example Add default notes Inspired by Alan Bowens tasknote you can add a default notes file to a task These files will be automatically created by the task s UUID and don t require to annotate the task with a specific file path The folder in which these files will be stored can be configured in taskopenrc As soon as you annotate a task with Notes task 1 annotate Notes you can open and edit this file by taskopen 1 which by default opens a file like tasknotes 5727f1c7 2efe fb6b 2bac 6ce073ba95ee txt More complex example You can also add weblinks to a task and even mix all kinds of annotations task 1 annotate www taskwarrior org task 1 annotate I want to consider this task 1 annotate Documents manual pdf taskopen 1 Please select an annotation 1 www taskwarrior org 2 Documents manual pdf Type number Installation Installation is as easy as make PREFIX usr make PREFIX usr install Taskopen also creates a configuration file at taskopenrc if it does not already exist You can also add DESTDIR path to dir to the install command Perl version migration guide Replace your taskopen binary in usr bin or bin with taskopen pl Be sure to install all dependencies The perl version is basically backwards compatible with the bash style taskopenrc files However bash magic must not be used within those files i e only simple NAME VALUE notations can be parsed Configuration Taskopen can be customised by editing your taskopenrc file where you can set your favourite text editor and web browser for instance Every file that is not considered a text file or URI is going to be opened with xdg open which picks the corresponding application depending on the mime time see xdg mime Please take a look at the manpage taskopenrc 5 for further details Features Arbitrary filters Optional labelling for easier access Execution of arbitrary commands overriding the default command Filtering by file type Batch processing and selecting multiple files from a list Deleting and editing of annotations Various customisation options e g sorting Extensibility Arbitrary filters Instead of providing taskopen with an ID you can also pass arbitrary filters in taskwarrior notation like taskopen next or taskopen bug pro taskwarrior Labels You can label your annotations by using the following syntax task 1 annotate tw www taskwarrior org task 1 annotate notes Notes In this way the annotations will be accessible by providing the label name as the last argument escaped with double backslashes taskopen 1 notes or even taskopen pro taskwarrior bug notes Contributions Thanks to the following Jostein Bernsten for adding mutt support John Hammond for OSX 10 5 support Alan Bowen for writing tasknote David J Patrick for great ideas Feel free to contribute to this project",
    "compatibility": "2.4.0",
    "description": "Script for taking notes and open urls with taskwarrior"
  },
  {
    "last_update": "2016-03-10",
    "author": [
      "Jeroen (teranex)"
    ],
    "url_src": "https://github.com/teranex/vimwiki-tasks",
    "license": "MIT",
    "url": "https://github.com/teranex/vimwiki-tasks",
    "obsolete": false,
    "name": "vimwiki-tasks",
    "theme": [
      "Vim",
      "Vim"
    ],
    "verified": "2016-04-24",
    "language": [
      "VimL"
    ],
    "descriptionText": "A Vim plugin to integrate Vimwiki tasks with taskwarrior. Sync tasks between vimwiki and taskwarrior in both directions",
    "category": "Extensions",
    "readme": "vimwiki tasks Vim plugin NOTE This is a very early and very alpha version of the plugin Use with caution and make a backup of your task and vimwiki folder You have been warned Features This plugin adds some additional syntax rules to vimwiki to define a task format with due dates It also adds highlighting for tags tag and UUID s The format for a task which has a due date on 2013 11 21 This is a task with a due date 2013 11 21 It s also possible to specify a time for the due This is a task due at 10am 2013 11 21 10 00 Please note that it is officially not possible to set a due time in taskwarrior however by specifying the correct dateformat it however is possible since internally dates are stored as unix timestamps So far I have not really found any side effects of doing this When the vimwiki file is saved all the new tasks with a due date will be added to taskwarrior To keep the link between the task in taskwarrior and vimwiki the UUID of the task is appended to the task in vimwiki If you have enabled Vim s conceal feature the UUID s will be hidden It is also possible to add tasks without a due date into taskwarrior by ending the task in Vimwiki in TW When the vimwiki file is saved any task which ends in TW will also be added to taskwarrior and the TW will be replaced by the UUID When the file is reopened in Vimwiki all the tasks which have a UUID will be synced and updated from taskwarrior info the vimwiki file and it will be marked as modified if any updates took place Installation 1 Install the vimwiki plugin for Vim 1 Install taskwarrior 1 Install this plugin Default values The first 10 lines of a vimwiki file will be checked for some default values which will be used for all the tasks in that vimwiki file Project projectname set the project for the tasks to projectname Tags tag1 tag2 add these tags to every task Config The following configuration options are currently available let g vimwiki_tasks_annotate_origin 0 When 1 a reference to the vimwiki page where the task was found will be added as an annotation let g vimwiki_tasks_tags_nodue These tags e g vimwiki nodue will be added to a task without a due date time let g vimwiki_tasks_tags_duetime These tags will be added to a task which has both a due date and time let g vimwiki_tasks_tags_duedate These tags will be added to a task which has a due date but no due time Known issues Future plans See the issue list on Github for currently known issues and future plans Feel free to report issues and add ideas there as well",
    "compatibility": "Unknown",
    "description": "A Vim plugin to integrate Vimwiki tasks with taskwarrior. Sync tasks between vimwiki and taskwarrior in both directions"
  },
  {
    "last_update": "2015-09-22",
    "author": [
      "Georg Hopp (georghopp)"
    ],
    "url_src": "https://github.com/georghopp/taskrambler",
    "license": "Unknown",
    "url": "http://taskrambler.weird-web-workers.org/",
    "obsolete": false,
    "name": "taskrambler",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "C"
    ],
    "descriptionText": "This will become a multi-user task management system inspired by taskwarrior. Right now its another HTTP server implementation.",
    "category": "Extensions",
    "readme": "Taskrambler When this is finished it will become a distributed task and time management system with a web frontend It will come with its own HTTP server implementation and thus wont need any third party webserver to work The backend is written completely in C while the frontend will be JavaScript CSS and HTML Users will be able to connect to the server via their browsers manage their tasks there and specify policies who else might see their tasks track the time spend on a specific task attach tasks to projects getting reports about their work done etc For the taskmanagement stuff I think of a similar approach as taskwarrior http taskwarrior org projects show taskwarrior is going This is an amazing tool and I really enjoy using it I started this as an experiment to implement an HTTP server then I learned about taskwarrior and thought wouldn t it be great to have this functionality in a multiuser environment Right now this is a single process HTTP server implementation that performs not to bad And some application logic for user management Every connection is associated with a session and user can register login and modify their user data In the nearer future an role based access control system will be added Users will be able to add tasts for now just a text and maybe a date or something and they should be able to control who else might see a task If this works reliable I will announce version 0 2 The main development page can be found here http redmine weird web workers org projects taskrambler INSTALLATION This can be installed via the usual configure make make install cycle For gentoo users am ebuild is added under docs API DOC To generate the api doc a patched version of doxygen is neccessary A patch is included under docs make docs creates the api doc TEST COVERAGE REPORT gcov and lcov are needed to build these The source has to be configured with configure enable gcov make coverage html creates the converage reports then USAGE RUNNING Simply start the installed executable This will usually be found under usr local bin taskrambler after successfull build and installation When installed with the ebuild the executable will be usr bin taskrambler After the executable is stared you should be able to see the staskrambler user interface with your browser by openening http localhost 11212 In the upper right corner you can see session and user related information CONFIGURATION A first configuration file is installed in your etc folder under taskrambler taskrambler conf The syntax of that file is described in it Currently there are only 5 settings that can be configured ldap_base The base for the ldap Distinguished Name DN for user lookups ldap_host The ldap server to connect to assets_dir Defines where taskrambler will find its assets runtime_dir The place where the user and credential database files are stored port The port taskrambler should run on PORT Taskrambler will always connect to the port specified in the config for HTTP connections A second socket will be opened on port 1 for SSL connections LOGIN Every user that can be authenticated either via LDAP or via taskramblers own database can login via the login link in the menu SIGNUP It is possible to create a user account by clicking the signup link After a successfull signup you will be automatically logged in CHANGE USER DATA After a successfull login you have the ability to see your current account informations and modify them via my account TESTING This comes with the start of a unit test suite You can use make test to build and run the existent tests REQUIREMENTS Currently you need valgrind to build the tests because some memory checking is done by the way CONTRIBUTION I would really like to see some people possibly interested in this stuff I think it contains some really interesting ideas If you like to contribute anyway make a fork do your changes and generate a pull request Or simply contact me on georg steffers org",
    "compatibility": "Unknown",
    "description": "This will become a multi-user task management system inspired by taskwarrior. Right now its another HTTP server implementation."
  },
  {
    "last_update": "2014-07-08",
    "author": [
      "Jeroen (teranex)"
    ],
    "url_src": "https://github.com/teranex/taskquery",
    "license": "MIT",
    "url": "https://github.com/teranex/taskquery",
    "obsolete": false,
    "name": "taskquery",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "A simply query interface for Taskwarrior",
    "category": "Extensions",
    "readme": "taskquery A simply query interface for Taskwarrior What it does This script let s you on the fly specify which columns you want to see in a report and how the result should be sorted When you just want to create a simple custom report which you are going to use once this is much simpler then having to create a custom report or specify all the rc override on the commandline This script simply rewrites the extra parameters to the correct rc overrides Interface The following parameters can be used All parameters are optional columns used to specify which columns to display labels used to specify the labels for the columns If this parameter is absent the column names will be used as the labels sort specify how to sort the result e g id description report which report to use By default the all report will be used Installation and usage Simply checkout the repository Make sure that you have ruby intalled Then you can run the script path to taskquery columns id description labels ID Desc proj FooProject sort id You can also add an alias in your taskrc alias query execute path to taskquery Then you can run it as follows task query columns id project description report next sort project",
    "compatibility": "Unknown",
    "description": "A simply query interface for Taskwarrior"
  },
  {
    "last_update": "2016-04-18",
    "author": [
      "Joshua Barratt (jbarratt)",
      "Tim Kleinschmidt (Azd325)"
    ],
    "url_src": "https://github.com/jbarratt/trello_to_task",
    "license": "Unknown",
    "url": "https://github.com/jbarratt/trello_to_task",
    "obsolete": false,
    "name": "trello_to_task",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Tool to migrate from Trello to Taskwarrior",
    "category": "Extensions",
    "readme": "Background I like and still use Trello http trello com but it wasn t working as a full GTD system for me As I m spending more time in the terminal now and kept hearing good things I figured I d give Taskwarrior http taskwarrior org a shot One of the nice things about Trello is that you can take your data with you so I attempted to convert from that format to Taskwarrior s It took probably longer than it would have if I d migrated by hand data entry style but it was fun This will probably not work exactly the way you want it to Because there s no clean mapping from Trello ideas to Taskwarrior you d have to tune to fit Running it Safety first You might want to open up taskrc and set data location some temp place so you can test importing without messing with any of your real tasks Let s do this Once you have a Trello export file run trello_to_task py home_board json out json task import out json Customization help Generally you might want to do different things with board names going to tags projects etc Right now Everything comes in with project home If a card had a checklist on it The name of the card is mashed up strip spaces and lowercase it That makes a new project under home So Buy Car home buycar All the checklist items become tasks in that project as does the originally named main task itself The main task depends on all the checklist items Trello schema notes The basic structure of the file looks like checklists id name checkItems id name type check lists id name closed cards closed idList idChecklists desc name actions data text card id type commentCard Taskwarrior format It s a little easier since it s mostly well documented http taskwarrior org projects taskwarrior wiki Json_format The strangest thing is the file format doesn t actualy want a list of JSON objects it wants one JSON object per line This makes the whole file not actually valid JSON but each line is by itself",
    "compatibility": "2.0.0",
    "description": "Tool to migrate from Trello to Taskwarrior"
  },
  {
    "last_update": "2013-09-02",
    "author": [
      "Kosta Harlan"
    ],
    "url_src": "https://github.com/kostajh/task-git",
    "license": "GPLv3",
    "url": "https://github.com/kostajh/task-git",
    "obsolete": false,
    "name": "task-git.sh",
    "theme": [
      "Time"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "A wrapper around Taskwarrior that places the task database in version control, and generates commits each time the database is altered.",
    "category": "Extensions",
    "compatibility": "2.2.0",
    "description": "A wrapper around Taskwarrior that places the task database in version control, and generates commits each time the database is altered."
  },
  {
    "last_update": "2015-11-25",
    "author": [
      "Nicholas E. Rabenau (nerab)"
    ],
    "url_src": "https://github.com/nerab/twdeps",
    "license": "MIT",
    "url": "https://github.com/nerab/twdeps",
    "obsolete": false,
    "name": "twdeps",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "Visualizes dependencies between TaskWarrior tasks",
    "category": "Extensions",
    "readme": "TaskWarrior Dependency Visualization Visualizes dependencies between TaskWarrior tasks Build Status https secure travis ci org nerab twdeps png branch master http travis ci org nerab twdeps Gem Version https badge fury io rb twdeps png http badge fury io rb twdeps Example Given a set of interdependent tasks described in the TaskWarrior tutorial http taskwarrior org projects taskwarrior wiki Tutorial2 DEPENDENCIES the tasks are 1 Exported from TaskWarrior as JSON then 1 Piped into twdeps and finally 1 The output is directed to a PNG file Result party https raw github com nerab twdeps master examples party png For the impatient The JSON export is also available as party json https raw github com nerab twdeps master test fixtures party json If you download it the command twdeps f png party json party png will generate party png in the current directory Installation gem install twdeps Usage Create a dependency graph as PNG and pipe it to a file See Limitations Limitations below for why we need the extra task parms task export rc json array on rc verbose nothing twdeps deps png Same but specify output format task export rc json array on rc verbose nothing twdeps format svg deps svg Create a graph from a previously exported file task export rc json array on rc verbose nothing tasks json cat tasks json twdeps deps png Display graph in browser without creating an intermediate file Requires bcat to be installed task export rc json array on rc verbose nothing twdeps format svg bcat Dependencies The graph is generated with ruby graphviz https github com glejeune Ruby Graphviz which in turn requires a local Graphviz http graphviz org installation e g brew install graphviz on a Mac or sudo apt get install graphviz on Ubuntu Linux bcat http rtomayko github com bcat is required for piping into a browser Limitations Due to two http taskwarrior org issues 1017 bugs http taskwarrior org issues 1013 in its JSON export TaskWarrior versions before 2 1 need the additional command line options rc json array on and rc verbose nothing Contributing 1 Fork it 2 Create your feature branch git checkout b my new feature 3 Commit your changes git commit am Added some feature 4 Push to the branch git push origin my new feature 5 Create new Pull Request",
    "compatibility": "2.1.2",
    "description": "Visualizes dependencies between TaskWarrior tasks"
  },
  {
    "last_update": "2015-11-27",
    "author": [
      "Robert D. French (robertdfrench)"
    ],
    "url_src": "https://github.com/frenchrd/taskwarrior-progress",
    "license": "Unknown",
    "url": "https://github.com/frenchrd/taskwarrior-progress",
    "obsolete": false,
    "name": "taskwarrior-progress",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "Progress Reports for TaskWarrior Projects",
    "category": "Extensions",
    "readme": "taskwarrior progress Progress Reports for TaskWarrior Projects tps Taskwarrior Project Status Shows the number of completed items per project over the past three weeks This can serve as an estimate to compare the relative amount of effort invested in each project",
    "compatibility": "Unknown",
    "description": "Progress Reports for TaskWarrior Projects"
  },
  {
    "last_update": "2014-05-10",
    "author": [
      "Pi3cH (pi3ch)"
    ],
    "url_src": "https://github.com/pi3ch/taskboy",
    "license": "Unknown",
    "url": "http://pedramhayati.com",
    "obsolete": false,
    "name": "taskboy",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "create new note in Tomboy with individual tasks in Taskwarrior.",
    "category": "Extensions",
    "readme": "h1 Taskboy Screenshot http i imgur com Xa2DL png http i imgur com Xa2DL png Taskboy is a python script that creates new notes in Tomboy with associated task in Taskwarrior By simply running taskboy Task ID you can create a new or modify already created note An annotation would be added to associated task upon note creation The title description of the task would be the title of the new created note h2 Dependencies Taskwarrior http www taskwarrior org note taskwarrior should be in the PATH Python Tomboy Taskboy has been tested within Ubuntu 10 04 and 11 04 h2 Installation Download and copy taskboy to home directory e g home USERNAME bin Make taskboy executable i e chmod a x taskboy Put taskboy in the system path h2 Usage taskboy Task ID e g taskboy 7 Note Taskboy would automatically run Tomboy if it is not running h2 Customize You can set the title of the new created note to the task s project title To do so open taskboy find the line notefield Description and set it to notefield Project h2 Todo Test under Windows environment h2 Contribution Feel free to contribute to this project",
    "compatibility": "1.9.4",
    "description": "create new note in Tomboy with individual tasks in Taskwarrior."
  },
  {
    "last_update": "2016-04-10",
    "author": [
      "AikidoGuy (AikidoGuy)"
    ],
    "url_src": "https://github.com/AikidoGuy/twoutline",
    "license": "Unknown",
    "url": "https://github.com/AikidoGuy/twoutline",
    "obsolete": false,
    "name": "twoutline",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Taskwarrior to Outline",
    "category": "Extensions",
    "readme": "twoutline Taskwarrior to Outline python utility This is being made available sooner that I was planning because I received an email request for another one of my utilities tw2latex Please be aware that both utilities are a work in progress Usage Further information and discussion is available at http taskwarrior org boards 6 topics 2042 vi twoutline py and modify settings near top of file to suit your needs chmod 700 twoutline py twoutline py to get a list of all options Dependencies python python package pytz available from http pytz sourceforge net List of Things to Improve x 2013 03 24 placed first version on github test with newest Taskwarrior release Suggestions for improvement are welcome Aikido Guy",
    "compatibility": "Unknown",
    "description": "Taskwarrior to Outline"
  },
  {
    "last_update": "2015-10-29",
    "author": [
      "AikidoGuy (AikidoGuy)"
    ],
    "url_src": "https://github.com/AikidoGuy/tw2latex",
    "license": "Unknown",
    "url": "https://github.com/AikidoGuy/tw2latex",
    "obsolete": false,
    "name": "tw2latex",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Taskwarrior to LaTeX",
    "category": "Extensions",
    "readme": "tw2latex Taskwarrior to LaTeX python utility A little rough around the edges but smoothing things out slowly Usage Further information and discussion is available at http taskwarrior org boards 6 topics 2084 vi tw2latex py and modify settings near top of file to suit your needs chmod 700 tw2latex py tw2latex py to get a list of all options cd examples vi createReport sh and modify to suit your needs e g change filter etc createReport sh to create tex and pdf based on your settings uses chronology sty if a timeline is selected Dependencies python python package pytz See http pytz sourceforge net python package dateutil On Ubuntu sudo apt get install python dateutil LaTeX See http www latex project org guides chronology sty See http www ctan org pkg chronology Chronology sty is a LaTeX sty le file and should be placed in the same directory as the generated LaTeX file tex if it is not already installed as a package in your LaTeX system so that LaTeX will be able to find it On Ubuntu if you follow the directions below for installing LaTeX then the chronology sty package will already be installed and available for use so you do not need to download or directly do anything yourself List of Things to Improve X 2013 05 03 make simple filter usage work use filter overrides for more complex cases X 2013 03 24 placed first version on github X 2013 03 24 added createReport sh to show example usage for inclusion of filters This occured because during development of this code I needed to have one filter for the set of tasks and one filter for the timeline Anyway this is how the current code works slightly unexpectedly I presume X 2013 03 24 learn how to use LaTeX on Ubuntu https help ubuntu com community LaTeX I originally developed this code using MikTex on Windows X 2013 03 24 test with newest Taskwarrior works with 2 1 2 on Ubuntu LaTeX on Ubuntu latex version pdfTeX 3 1415926 1 40 10 2 2 TeX Live 2009 Debian kpathsea version 5 0 0 Copyright 2009 Peter Breitenlohner eTeX Han The Thanh pdfTeX There is NO warranty Redistribution of this software is covered by the terms of both the pdfTeX copyright and the Lesser GNU General Public License For more information about these matters see the file named COPYING and the pdfTeX source Primary author of pdfTeX Peter Breitenlohner eTeX Han The Thanh pdfTeX Compiled with libpng 1 2 46 using libpng 1 2 46 Compiled with zlib 1 2 3 4 using zlib 1 2 3 4 Compiled with poppler version 0 18 2 I have a latex installed but what is it apt cache search latex apt cache search texlive grep latex apt cache show texlive latex3 It is Tex Live See usr share texmf See usr share texmf texlive tex latex base article cls See http www tug org texlive There are Ubuntu packages and there is a native TeX Live that can be installed directly from TUG It was suggested that this way you can get nearly all of the packages that are currently available on CTAN and you do not need to install anything by hand Also this lets you always get current package versions by running http tex stackexchange com questions 28627 how to install the algorithms package sudo tlmgr update all And according to TUG the timing and content of updates is entirely up to your operating system provider So I start to install a native TeX Live side by side with the Ubuntu version http www tug org texlive acquire netinstall html It will take up quite a bit of hard disk space I am installing 2 436 packages sudo install tl It failed five times but it was very easy to restart the installation sudo install tl profile installation profile TEXDIR the main TeX directory usr local texlive 2012 TEXMFLOCAL directory for site wide local files usr local texlive texmf local TEXMFSYSVAR dir for variable and auto generated data usr local texlive 2012 texmf var TEXMFSYSCONFIG directory for local config usr local texlive 2012 texmf config TEXMFVAR personal dir for variable and auto gen data texlive2012 texmf var TEXMFCONFIG personal directory for local config texlive2012 texmf config TEXMFHOME directory for user specific files texmf Success vi bashrc PATH PATH usr local texlive 2012 bin x86_64 linux Remove the old texlive that was installed in Ubuntu sudo apt get remove texlive Swap the order of the path in bashrc to make sure I get my new latex PATH usr local texlive 2012 bin x86_64 linux PATH source bashrc latex version pdfTeX 3 1415926 2 4 1 40 13 TeX Live 2012 kpathsea version 6 1 0 Copyright 2012 Peter Breitenlohner eTeX Han The Thanh pdfTeX There is NO warranty Redistribution of this software is covered by the terms of both the pdfTeX copyright and the Lesser GNU General Public License For more information about these matters see the file named COPYING and the pdfTeX source Primary author of pdfTeX Peter Breitenlohner eTeX Han The Thanh pdfTeX Compiled with libpng 1 5 10 using libpng 1 5 10 Compiled with zlib 1 2 7 using zlib 1 2 7 Compiled with xpdf version 3 03 One LaTeX editor is Kile installable by sudo apt get install kile I have now run the createReport sh using my new latex environment on Ubuntu and everything works To Update LaTeX Packages on Ubuntu Here is an example that I used to update all of my packages to the latest versions today 8th May 2013 sudo which tlmgr update all TeX Live 2012 is frozen forever and will no longer be updated This happens in preparation for a new release If you re interested in helping to pretest the new release when pretests are available please read http tug org texlive pretest html Otherwise just wait and the new release will be ready in due time tlmgr package repository http ctan mirror rafal ca systems texlive tlnet tlmgr saving backups to usr local texlive 2012 tlpkg backups 1 80 auto remove macqassign done 2 80 update abntex2 3523k 29221 29502 done 3 80 00 14 10 26 update acro 509k 29073 29681 done 4 80 00 16 10 26 update amsaddr 196k 15878 29630 done 5 80 00 18 11 11 update biblatex caspervector 268k 28808 29577 done 6 80 00 20 11 41 update biblatex fiwi 522k 28491 29578 done 7 80 00 23 12 03 update biblatex philosophy 503k 29411 29571 done 8 80 00 26 12 23 update bidi 1130k 28144 29650 done 9 80 00 29 11 27 update chronology 15k 18994 29682 done 10 80 00 31 12 13 update cleveref 470k 27807 29503 done 11 80 00 34 12 31 update cm 238k 24956 29581 done 12 80 00 36 12 50 update crbox 31k 24414 29701 done 13 80 00 37 13 08 update dashrule 233k 15878 29579 done 14 80 00 39 13 25 update dowith 1192k 28401 29501 done 15 80 00 43 12 48 update dvips 581k 28616 29585 done 16 80 00 45 12 34 update embrac 445k 29483 29683 done 17 80 00 47 12 32 update endiagram 669k 27489 29684 done 18 80 00 50 12 29 update enotez 443k 29422 29696 done 19 80 00 52 12 28 update environ 150k 15878 29600 done 20 80 00 53 12 32 update etoc 301k 29289 29697 done 21 80 00 56 12 54 update exsheets 733k 29334 29685 done 22 80 00 58 12 33 update filedate 559k 28242 29529 done 23 80 01 00 12 25 update fontawesome 171k 29485 29498 done 24 80 01 02 12 39 update fouriernc 49k 15878 29646 done 25 80 01 03 12 49 update ftnxtra 28k 17317 29652 done 26 80 01 04 12 59 update ghab 29k 24578 29701 done 27 80 01 09 13 58 update hyph utf8 1948k 29193 29641 done 28 80 01 13 12 51 update iftex 32k 18833 29654 done 29 80 01 15 13 10 update imakeidx 512k 28240 29542 done 30 80 01 16 12 54 update imsproc 71k 26198 29701 done 31 80 01 19 13 21 update media9 4634k 29445 29530 done 32 80 01 23 10 48 update mpgraphics 165k 27230 29655 done 33 80 01 25 10 59 update nameauth 682k 29359 29632 done 34 80 01 27 10 52 update needspace 158k 19684 29601 done 35 80 01 30 11 10 update newtx 3869k 29152 29551 done 36 80 01 47 11 13 update paratype 4788k 26866 29629 done 37 80 01 58 10 23 update pdftex 2805k 29349 29585 done 38 80 05 25 26 10 update persian hm ftx 32015k 29146 29700 done 39 80 09 06 22 11 update persian hm xbs 31801k 29147 29616 done 40 80 09 45 15 56 update persian modern 1950k 23959 29701 done 41 80 09 56 15 55 update pgfplots 10547k 29349 29531 done 42 80 10 03 14 32 update pkuthss 385k 28865 29580 done 43 80 10 11 14 41 update pstricks 7204k 29482 29678 done 44 80 10 21 14 00 update regexpatch 532k 27155 29543 done 45 80 10 23 13 59 update roundbox 3k 17896 29675 done 46 80 10 24 14 00 update sansmathaccent 164k 26200 29541 done 47 80 10 26 14 02 update smartdiagram 276k 29329 29680 done 48 80 10 28 14 02 update splitindex x86_64 linux 1k 12613 29688 done 49 80 10 29 14 04 update splitindex 456k 29349 29688 done 50 80 10 31 14 03 update tetex 379k 29349 29585 done 51 80 10 35 14 06 update texlive docindex 196k 29478 29691 done 52 80 10 37 14 07 update texlive scripts 69k 29405 29676 done 53 80 10 38 14 08 update tikzscale 541k 29342 29569 done 54 80 10 41 14 08 update tikzsymbols 550k 29308 29570 done 55 80 10 44 14 08 update toptesi 2439k 29321 29550 done 56 80 10 50 13 59 update tram 31k 24395 29701 done 57 80 10 51 14 00 update unamthesis 546k 22500 29519 done 58 80 10 54 14 00 update upmethodology 447k 27896 29615 done 59 80 10 55 13 58 auto install biblatex gost 29663 871k done 60 80 10 57 13 55 auto install cjk ko 29516 2666k done 61 80 11 00 13 41 auto install download 29588 175k done 62 80 11 00 13 40 auto install iitem 29613 377k done 63 80 11 01 13 39 auto install matc3 29698 436k done 64 80 11 02 13 37 auto install matc3mem 29699 392k done 65 80 11 03 13 36 auto install nanumtype1 29558 27664k done 66 80 11 21 11 29 auto install newpx 29576 893k done 67 80 11 23 11 27 auto install readarray 29614 185k done 68 80 11 23 11 26 auto install skdoc 29544 207k done 69 80 11 24 11 27 auto install skmath 29607 220k done 70 80 11 25 11 27 auto install skrapport 29608 184k done 71 80 11 26 11 27 auto install xint 29649 279k done 72 80 11 28 11 28 update collection bibtexextra 1k 28717 29517 done 73 80 11 29 11 29 update collection fontsextra 2k 29485 29576 done 74 80 11 30 11 30 update collection langarabic 1k 29147 29659 done 75 80 11 31 11 31 update collection langcjk 1k 29335 29552 done 76 80 11 31 11 31 update collection latexextra 5k 29447 29651 done 77 80 11 32 11 32 update collection mathextra 1k 28513 29607 done 78 80 11 33 11 33 update collection metapost 1k 29358 29655 done 79 80 11 34 11 34 update collection pictures 1k 29264 29595 done 80 80 11 34 11 34 update collection publishers 1k 29466 29687 done tlmgr package log updated at usr local texlive 2012 texmf var web2c tlmgr log running mktexlsr done running mktexlsr running updmap sys done running updmap sys regenerating fmtutil cnf in usr local texlive 2012 texmf var running fmtutil sys no error if no format byengine pdftex done running fmtutil sys no error if no format byengine pdftex Suggestions for improvement are welcome Aikido Guy",
    "compatibility": "Unknown",
    "description": "Taskwarrior to LaTeX"
  },
  {
    "last_update": "2016-04-21",
    "author": [
      "Richard Burnison (burnison)"
    ],
    "url_src": "https://github.com/burnison/tasksync",
    "license": "GPLv3",
    "url": "https://github.com/burnison/tasksync",
    "obsolete": false,
    "name": "tasksync",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "A tool for bidirectional syncronization of task repositories, like TaskWarrior and Google Tasks.",
    "category": "Extensions",
    "readme": "tasksync tasksync is a CLI tool to sync tasks between task trackers tasksync was originally developed for and has been tested with task syncing between TaskWarrior and Google tasks Other implementations may be supported at a future date tasksync is developed by Richard Burnison and is offered under the GNU GPL 3 license Installation tasksync has several dependencies on Python 2 and thus is only functional under Python 2 7 As upstream dependencies change so will tasksync Usage Configure executions within config py and run run tasksync from console As always be sure you have up to date backups in the event anything goes wrong When syncing against Google Tasks an OAuth token will be required Upon first execution you will be prompted by Google to authenticate and grant tasksync permission to access your Google Tasks data Be sure to check the URL as tasksync relies on third party libraries to perform OAuth authentication",
    "compatibility": "2.1.1",
    "description": "A tool for bidirectional syncronization of task repositories, like TaskWarrior and Google Tasks."
  },
  {
    "last_update": "2013-04-10",
    "author": [
      "Alicia BEL & Thibaut HOREL"
    ],
    "url_src": "https://pypi.python.org/pypi/taskreport",
    "license": "GPLv3",
    "url": "http://pypi.python.org/pypi/taskreport",
    "obsolete": false,
    "name": "taskreport",
    "theme": [
      "Mail"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "taskreport allows you to export a list of \"reports\" (these are just list of tasks defined by a filter rule) to HTML format, and then, print the HTML format to a file or send it by email. The html layout is customizable by the use of Jinja templates.",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "taskreport allows you to export a list of \"reports\" (these are just list of tasks defined by a filter rule) to HTML format, and then, print the HTML format to a file or send it by email. The html layout is customizable by the use of Jinja templates."
  },
  {
    "last_update": "2015-06-24",
    "author": [],
    "url_src": "https://github.com/anazimok/taskwarrior-workflow",
    "license": "Unknown",
    "url": "https://github.com/anazimok/taskwarrior-workflow",
    "obsolete": false,
    "name": "taskwarrior-workflow",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "PHP"
    ],
    "descriptionText": "Taskwarrior Workflow for Alfred v2",
    "category": "Extensions",
    "readme": "Taskwarrior workflow for Alfred v2",
    "compatibility": "Unknown",
    "description": "Taskwarrior Workflow for Alfred v2"
  },
  {
    "last_update": "2016-03-02",
    "author": [
      "Pi3cH (pi3ch)",
      "Michael Ahern (mahern)",
      "Simon Holywell (treffynnon)",
      "Lars Wallenborn (larsborn)"
    ],
    "url_src": "https://github.com/pi3ch/tb2taskwarrior",
    "license": "GPLv2",
    "url": "https://github.com/pi3ch/tb2taskwarrior",
    "obsolete": false,
    "name": "tb2taskwarrior",
    "theme": [
      "Mail"
    ],
    "verified": "2016-04-24",
    "language": [
      "Perl"
    ],
    "descriptionText": "Scripts to handle taskwarrior from Thunderbird",
    "category": "Extensions",
    "readme": "h1 Add task from Thunderbird to taskwarrior Screenshot http i imgur com tHhk1 png http i imgur com tHhk1 png A custom button script in Thunderbird to add emails as task in Taskwarrior h2 Dependencies Taskwarrior http www taskwarrior org Thunderbird http www mozillamessaging com thunderbird Custom button add on for Thunderbird https addons mozilla org thunderbird addon custom buttons For recent versions of Thunderbird if above link will not install http custombuttons mozdev org devbuilds html Install perl MIME tools sudo apt get install libmime tools perl or Archlinux extra perl mime tools h2 Installation Usage Add new button to Thunderbird right click on toolbar and select Add new button Name Add to task Code Copy the content Download custom button tb2taskwarrior optional customise topicName e g change inbox email tags Add created button to Thunderbird toolbar Select an email and click on created button Download tb2taskwarrior png for button icon h2 Change log 15 Sep 2012 cygwin support added h2 Todo Test under Mac Add multiple tasks h2 Contribution Feel free to contribute to this project",
    "compatibility": "Unknown",
    "description": "Scripts to handle taskwarrior from Thunderbird"
  },
  {
    "last_update": "2013-03-26",
    "author": [
      "Andy Spiegl"
    ],
    "url_src": "http://spiegl.de/andy/software/task-autodelay.pl",
    "license": "MIT",
    "url": "http://spiegl.de/andy/software/task-autodelay.pl",
    "obsolete": false,
    "name": "task-autodelay.pl",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Automated task delay - a sophisticated script that can be used to add 10 days to the due date of any tasks.",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "Automated task delay - a sophisticated script that can be used to add 10 days to the due date of any tasks."
  },
  {
    "last_update": "2014-10-16",
    "author": [
      "neingeist (neingeist)"
    ],
    "url_src": "https://github.com/neingeist/mail2taskwarrior",
    "license": "Unknown",
    "url": "https://github.com/neingeist/mail2taskwarrior",
    "obsolete": false,
    "name": "mail2taskwarrior",
    "theme": [
      "Mail",
      "Mail"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Add a task to taskwarrior via email",
    "category": "Extensions",
    "readme": "Add a task to taskwarrior via email Makes use of the taskw Python bindings http taskwarrior org https github com ralphbean taskw For use with procmail or maildrop Example using maildrop s mailfilter if SIZE 8192 From myaddress example com To taskwarrior log add task via mail2taskwarrior xfilter devel mail2taskwarrior mail2taskwarrior exit",
    "compatibility": "Unknown",
    "description": "Add a task to taskwarrior via email"
  },
  {
    "last_update": "2013-03-14",
    "author": [
      "M. Joosten"
    ],
    "url_src": "https://github.com/keigezellig/kanbanwarrior",
    "license": "THE APPRECIATION LICENSE\" (Revision 0xFF)",
    "url": "https://github.com/keigezellig/kanbanwarrior",
    "obsolete": false,
    "name": "kanban-warrior",
    "theme": [],
    "verified": "2015-08-15",
    "language": [
      "Python"
    ],
    "descriptionText": "A python script supporting my kanban workflow for Task Warrior. Blog",
    "category": "Extensions",
    "compatibility": "2.1.2",
    "description": "A python script supporting my kanban workflow for Task Warrior. \n<small><a href=\"http://joosten-industries.nl/blog/2013/03/07/kanban-warrior/\">Blog</a></small>"
  },
  {
    "last_update": "2015-10-16",
    "author": [
      "Jonathan Sterling (jonsterling)"
    ],
    "url_src": "https://github.com/jonsterling/Tasky",
    "license": "Unknown",
    "url": "https://github.com/jonsterling/Tasky",
    "obsolete": false,
    "name": "Tasky",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "A Taskwarrior client that doesn't suck very much. This was created to fill my own need: feel free to modify it! If it looks really ugly, you probably have your terminal configured wrong. Open an issue and I'll try to help you out.",
    "category": "Extensions",
    "readme": "Taskwarrior Utilities Just put these files in your path To make a tasky command do the following sh ln s tasky py tasky chmod x tasknote chmod x tasky Tasky a modal interactive Taskwarrior client Tasky is pretty well undocumented but it is basically a curses based shell to make interacting with Taskwarrior easier The main keys are the following 1 j k scrolling 2 i insert new task 3 e or RETURN edit the selected task see below 4 c complete the selected task No confirmation 5 d delete the selected task No confirmation 6 SPACE toggle start stop the selected task No confirmation 7 u undo whatever you did last No confirmation 8 enter command mode Basically enter any arbitrary Taskwarrior commands without task Example proj tasky del 9 enter shell mode Run any arbitrary shell command 10 l change the current filter see below 11 n runs tasknote for a given task in a new tmux pane Since I built Tasky for myself this command requires you to be in a tmux session I plan to make this configurable later Tasky supports mouse input You can click a task to select it and scrolling also works Filters Filters in Tasky are quite simple In order to get your tasks Tasky runs task export a filter is simply a string that is appended to the task export command So a valid filter would be something like proj tasky or due today or due tomorrow important The current filter is displayed in the header If you run Tasky with arguments those will be used as the initial filter Editing and Inserting The text you enter is appended to a task add or task mod command That means you can change a task s project or tags or due date using this mode When adding new tasks the current filter is appended That means that if you are currently viewing tasks in a certain project that are due today new tasks will also have those attributes Still to do Tasky does not yet support sorting or arbitrary searching Tasknote Tasknote is another small utility that allows you to associate a text file with a task It is included in this repository",
    "compatibility": "2.1.2",
    "description": "A Taskwarrior client that doesn't suck very much. This was created to fill my own need: feel free to modify it! If it looks really ugly, you probably have your terminal configured wrong. Open an issue and I'll try to help you out."
  },
  {
    "last_update": "2014-01-09",
    "author": [
      "Aaron Bieber (qbit)"
    ],
    "url_src": "https://github.com/qbit/taskjabb",
    "license": "Unknown",
    "url": "https://github.com/qbit/taskjabb",
    "obsolete": false,
    "name": "taskjabb",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "taskwarrior to jabber interface (NodeJS,JavaScript)",
    "category": "Extensions",
    "readme": "taskjabb taskwarrior to jabber interface requirements Node js http nodejs org must be installed as well as task http taskwarrior org projects show taskwarrior installing 1 git clone https github com qbit taskjabb git 2 cd jaskjabb 3 npm install 4 node taskjabb h I recommend using a non public jabber server as it would be a bummer to expose your task lists to the world using All task commands are supported as this is just a bridge between you and the task command",
    "compatibility": "2.1.1",
    "description": "taskwarrior to jabber interface (NodeJS,JavaScript)"
  },
  {
    "last_update": "2015-06-25",
    "author": [
      "Fabien Devaux (fdev31)"
    ],
    "url_src": "https://github.com/fdev31/taskiwi",
    "license": "Unknown",
    "url": "https://github.com/fdev31/taskiwi",
    "obsolete": false,
    "name": "taskiwi",
    "theme": [
      "Web",
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Taskwarrior exposed on web",
    "category": "Extensions",
    "readme": "A web interface for taskwarrior img src site shot png title screenshot alt some screenshot Known bugs when swithing a task from right done to left todo newlines are lost TODO stop using the link editor makes more bugs than it fixes re use the data format good idea OR contribute for markdown widgets fixes",
    "compatibility": "Unknown",
    "description": "Taskwarrior exposed on web"
  },
  {
    "last_update": "2015-10-17",
    "author": [
      "slowpo\u0138e (slowpoketail)"
    ],
    "url_src": "https://github.com/proxypoke/git-task",
    "license": "Free",
    "url": "https://github.com/proxypoke/git-task",
    "obsolete": false,
    "name": "git-task",
    "theme": [
      "Git",
      "Git"
    ],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "mini-issue-tracker for git repositories, using Taskwarrior",
    "category": "Extensions",
    "readme": "GIT TASK 1 slowpoke mail git slowpoke io v1 0beta doctype manpage man source Tinfoil Wizards Inc NAME git task an issue tracker for git repositories SYNOPSIS git task task warrior command DESCRIPTION This little script adds an issue tracker to any git repository backed by Taskwarrior the command line todo manager For this it creates a new branch called git task on which it automatically commits all tasks you create change or delete Take note that this is not a good replacement for a full featured bug issue tracker like trac or bugzilla It s meant for small mostly one person projects for which such a full featured tracker would be overkill It s also a neat way to share a simple todo list with multiple people To use this as a pseudo git command you can add an alias in your gitconfig task path to git task sh SEE ALSO task 1 git 1",
    "compatibility": "2.1.2",
    "description": "mini-issue-tracker for git repositories, using Taskwarrior"
  },
  {
    "last_update": "2013-02-05",
    "author": [
      "Jostein Berntsen"
    ],
    "url_src": "https://github.com/ValiValpas/taskopen/blob/master/scripts/mess2task",
    "license": "GPLv2",
    "url": "https://github.com/ValiValpas/taskopen/blob/master/scripts/mess2task",
    "obsolete": false,
    "name": "mess2task",
    "theme": [
      "Mail"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "For adding a message ID from a mutt mail directly to the most recently added task. This is useful in combination with taskopen and the muttjump scripts on this page.",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "For adding a message ID from a mutt mail directly to the most recently added task. This is useful in combination with taskopen and the muttjump scripts on this page."
  },
  {
    "last_update": "2013-02-05",
    "author": [
      "Jostein Berntsen"
    ],
    "url_src": "https://github.com/ValiValpas/taskopen/blob/master/scripts/mess2task2",
    "license": "GPLv2",
    "url": "https://github.com/ValiValpas/taskopen/blob/master/scripts/mess2task2",
    "obsolete": false,
    "name": "mess2task2",
    "theme": [
      "Mail"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "For adding a message ID from a mutt mail to the clipboard in KDE, making it possible to add this as an annotation to any task.",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "For adding a message ID from a mutt mail to the clipboard in KDE, making it possible to add this as an annotation to any task."
  },
  {
    "last_update": "2015-04-03",
    "author": [
      "Artur Shaik (artur-shaik)"
    ],
    "url_src": "https://github.com/artur-shaik/mutt2task",
    "license": "GPLv2",
    "url": "https://github.com/artur-shaik/mutt2task",
    "obsolete": false,
    "name": "mutt2task",
    "theme": [
      "Mail",
      "Mail"
    ],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Creates task in taskwarrior from email within mutt",
    "category": "Extensions",
    "readme": "Slight modification of already existed mutt2task https gist github com noqqe 6562350 script as well as tasknote https github com mikebobroski tasknote script Based on this blogpost http www nixternal com mark e mails in mutt as tasks in taskwarrior This script creates task in taskwarrior from email within mutt The subject of email becomes task name and the body exports to tasknote You need elinks http elinks or cz installed to make dump of html emails Install Copy files to bin directory and chmod x them Then add this to your muttrc macro index pager t pipe message mutt2task py enter Usage Just press t on email or inside email",
    "compatibility": "Unknown",
    "description": "Creates task in taskwarrior from email within mutt"
  },
  {
    "last_update": "2016-04-18",
    "author": [
      "kostajh"
    ],
    "url_src": "https://github.com/kostajh/sublime-taskwarrior",
    "license": "MIT License",
    "url": "https://github.com/kostajh/sublime-taskwarrior",
    "obsolete": false,
    "name": "sublime-taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Taskwarrior integration for Sublime Text 2",
    "category": "Extensions",
    "readme": "Sublime Taskwarrior A plugin for Sublime Text 2 to view modify and add tasks with Taskwarrior http www taskwarrior org When viewing tasks tasks are organized by project as well as a View all tasks item Select a task to complete modify or delete it When modifying or adding a task use the same Taskwarrior syntax as you would on the command line Commands Mac OS X super alt t View modify mark as completed delete and annotate tasks super shift a Add task super shift a super shift t Annotate last task from clipboard Linux Windows ctrl alt t View modify mark as completed delete and annotate tasks ctrl shift a Add task ctrl shift a ctrl shift t Annotate last task from clipboard Requirements Sublime Text 2 This plugin is not yet compatible with Sublime Text 3 Taskwarrior 2 This plugin will not work with Taskwarrior 1 x System This plugin has been tested on OSX 10 8 It should work on Linux and Windows but if you find any problems please file an issue Credits Authored by Kosta Harlan http kostaharlan net Code borrows heavily from Sublime Google Tasks https github com jpswelch sublime google tasks License Sublime Taskwarrior is licensed under the MIT license Copyright c 2013 Kosta Harlan kostajh gmail com Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files the Software to deal in the Software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense and or sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software THE SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE",
    "compatibility": "Unknown",
    "description": "Taskwarrior integration for Sublime Text 2"
  },
  {
    "last_update": "2015-11-15",
    "author": [
      "Tim Brown (mitnworb)"
    ],
    "url_src": "https://github.com/mitnworb/taskwarrior-dropbox",
    "license": "Unknown",
    "url": "https://github.com/mitnworb/taskwarrior-dropbox",
    "obsolete": false,
    "name": "taskwarrior-dropbox",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Small script to add tasks to Taskwarrior from a text file in Dropbox.",
    "category": "Extensions",
    "readme": "Taskwarrior dropbox Just a quick script to take text file from Dropbox and add it to Taskwarrior I am also using it with IFTTT com Send a txt to ifttt com and it appends a line a file in Dropbox The python script runs every few minutes looking for new tasks",
    "compatibility": "Unknown",
    "description": "Small script to add tasks to Taskwarrior from a text file in Dropbox."
  },
  {
    "last_update": "2013-01-12",
    "author": [
      "mono_1"
    ],
    "url_src": "http://pastebin.com/9EyvEL0M",
    "license": "Unknown",
    "url": "http://pastebin.com/9EyvEL0M",
    "obsolete": false,
    "name": "graphdeps.py",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "A Taskwarrior \u2192 GraphViz script that shows dependencies as a colorful graph. Sample",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "A Taskwarrior \u2192 GraphViz script that shows dependencies as a colorful graph. \n<small><a href=\"http://imgur.com/zipAg\">Sample</a></small>"
  },
  {
    "last_update": null,
    "author": [
      "Benjamin Weber"
    ],
    "url_src": "https://raw.github.com/benjaminweb/scripts/master/rea",
    "license": "MIT",
    "url": "https://raw.github.com/benjaminweb/scripts/master/rea",
    "obsolete": false,
    "name": "rea",
    "theme": [
      "Time"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Rea shows you the arithmetic mean time you have been active on a recurring task.",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "Rea shows you the arithmetic mean time you have been active on a \n<em>recurring</em> task."
  },
  {
    "last_update": "2016-01-25",
    "author": [
      "Tom MacWright (tmcw)"
    ],
    "url_src": "https://github.com/tmcw-up-for-adoption/xtw",
    "license": "own",
    "url": "http://macwright.org/xtw/",
    "obsolete": false,
    "name": "xtw",
    "theme": [
      "OSX",
      "OSX"
    ],
    "verified": "2016-04-24",
    "language": [
      "Objective-C"
    ],
    "descriptionText": "a status item for taskwarrior on OSX",
    "category": "Extensions",
    "readme": "xtw xtw is a micro interface for taskwarrior http taskwarrior org projects show taskwarrior for OSX users Currently it just shows the number of tasks you have remaining to do pending It updates every 10 seconds and lives in your status bar You ll need to install and use taskwarrior for this to be useful If you have homebrew http github com mxcl homebrew this is easy brew install task Screenshot https github com tmcw xtw raw master screenshot png Licensed BSD written by Tom MacWright http macwright org",
    "compatibility": "Unknown",
    "description": "a status item for taskwarrior on OSX"
  },
  {
    "last_update": "2015-05-25",
    "author": [
      "Oivvio Polite (oivvio)"
    ],
    "url_src": "https://github.com/Liberationtech/taskpacifist",
    "license": "Unknown",
    "url": "https://github.com/Liberationtech/taskpacifist",
    "obsolete": false,
    "name": "taskpacifist",
    "theme": [
      "Vim",
      "Vim"
    ],
    "verified": "2016-04-24",
    "language": [
      "VimL"
    ],
    "descriptionText": "A vim plugin for doing GTD with Taskwarrior",
    "category": "Extensions",
    "readme": "Taskpacifist A vim script for running taskwarrior My tag prefixes project area of focus area of responsability client context Feature wishlist really easy Moved to a little harder Make task dependent on other task Add tag todotoday_ todaysdate to a task eg todotoday_20120829 List all tasks tagged todotoday_ todaysdate Remove all task tagged todotoday_ unless tag is todotoday_ todaysdate Add tag to filter allow autocomplete Add priority 1 to current filterset Add pri 1 or pri 2 to current filterset Add pri 1 or pri 2 or pri 3 to current filterset Add pri 1 or pri 2 or pri 3 or pri none to current filterset Toggle columns for display on off Expand contract width off columns suitable tag prefix keys _ \u00f8 context requisite project client area of responsability time estimate subproject priority Not suitable used by taskwarrior to separate out tags from nontags might confuse the shell also part of taskwarrior syntax",
    "compatibility": "2.0.0",
    "description": "A vim plugin for doing GTD with Taskwarrior"
  },
  {
    "last_update": "2015-04-12",
    "author": [
      "Joshua Barratt (jbarratt)"
    ],
    "url_src": "https://github.com/jbarratt/AlfredTaskwarrior",
    "license": "Unknown",
    "url": "https://github.com/jbarratt/AlfredTaskwarrior",
    "obsolete": false,
    "name": "AlfredTaskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Alfred extension for integration with Taskwarrior",
    "category": "Extensions",
    "readme": "Alfred Taskwarrior Integration This is stupid simple It just maps task to calling the taskwarrior command passing all the arguments through See more about how it all works in the blog post I wrote about this http serialized net 2012 09 a simple taskwarrior alfred plugin Installation Download https github com jbarratt AlfredTaskwarrior blob master Taskwarrior alfredextension raw true then double click the Taskwarrior alfredextension file It s compatible with the Extensions Updater http jdfwarrior tumblr com updater extension so no need to check back for updates Usage While you can technically call any task command growl doesn t really do the formatting justice task summary isn t very beautiful Adding tasks get them out of your head and back to focus is the biggest reason for writing this Thankfully though Taskwarrior lets you key of task id s or unique substrings so you can actually work reasonably well blind to do other things task add remember the milk due tomorrow pri H grocery task milk start task milk stop One nice thing is that Alfred also has a command which opens a terminal by default mapped to so entering bigger commands can be done just by prefixing it with that task summary will open a terminal with that command for example run and from there you can do other interactive task things",
    "compatibility": "Unknown",
    "description": "Alfred extension for integration with Taskwarrior"
  },
  {
    "last_update": "2016-02-01",
    "author": [
      "Michael Bobroski (mikebobroski)"
    ],
    "url_src": "https://github.com/mikebobroski/tasknote",
    "license": "GPLv2",
    "url": "https://github.com/mikebobroski/tasknote",
    "obsolete": false,
    "name": "tasknote",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Associate a single text file with any task, updated for Taskwarrior 2. Original by Alan Bowen.",
    "category": "Extensions",
    "readme": "tasknote The script automatically opens your text editor defaults to vim and allows you to edit notes Upon saving notes an annotation is added to the task to alert you to the fact that notes exist for that task The annotation captures the first line of the note file and is updated with every modification to the file History Original implementation Alan Bowen Update to taskwarrior 2 0 Michael Bobroski Context aware annotations Bjoern Doebel Usage Create Edit Note tasknote task_id View Note tasknote task_id v Actually you can type anything after task_id that comes to mind v view show list cat etc I left it open since no other features are planned Configuration Save in a place like usr bin and flag as executable with sudo chmod a x usr bin tasknote Be sure to edit the FOLDER var in the script If it does not exist you will be asked if you want to create it during the first run You can also configure the EDITOR default vim VIEWER default cat as well as NOTEMSG the annotation message appended to the task in taskwarrior",
    "compatibility": "2.2.0",
    "description": "Associate a single text file with any task, updated for Taskwarrior 2. Original by Alan Bowen."
  },
  {
    "last_update": "2012-08-28",
    "author": [
      "Matt Daemon"
    ],
    "url_src": "https://github.com/ralphbean/mattd.plugins.taskwarrior",
    "license": "GPLv3",
    "url": "https://github.com/ralphbean/mattd.plugins.taskwarrior",
    "obsolete": false,
    "name": "mamattd.plugins.taskwarrior",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "A taskwarrior plugin for mattd.code",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "A taskwarrior plugin for \n<a href=\"https://github.com/ralphbean/mattd.core\">mattd.code</a>"
  },
  {
    "last_update": "2012-08-05",
    "author": [
      "Scott Kostyshak (please contact with any problems or feature requests)"
    ],
    "url_src": "https://bug.tasktools.org/browse/EX-44",
    "license": "Unknown",
    "url": "https://bug.tasktools.org/browse/EX-44",
    "obsolete": false,
    "name": "taskchain",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "taskchain is a script to create a single dependency chain from the input of task IDs.",
    "category": "Extensions",
    "compatibility": "1.9.3+",
    "description": "taskchain is a script to create a single dependency chain from the input of task IDs."
  },
  {
    "last_update": "2014-12-15",
    "author": [
      "Jonathan Sterling (jonsterling)"
    ],
    "url_src": "https://github.com/jonsterling/TaskWarriorWeb",
    "license": "Unknown",
    "url": "https://github.com/jonsterling/TaskWarriorWeb",
    "obsolete": false,
    "name": "TaskWarriorWeb",
    "theme": [
      "Web",
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [
      "Haskell"
    ],
    "descriptionText": "A quick & dirty Yesod-based local web interface to TaskWarrior",
    "category": "Extensions",
    "readme": "A Yesod based local web interface to TaskWarrior shell runhaskell Main hs Application launched listening on port 3000",
    "compatibility": "Unknown",
    "description": "A quick & dirty Yesod-based local web interface to TaskWarrior"
  },
  {
    "last_update": "2012-04-20",
    "author": [
      "by Andy Spiegl"
    ],
    "url_src": "http://spiegl.de/andy/software/t.tar.gz",
    "license": "MIT",
    "url": "http://spiegl.de/andy/software/t.tar.gz",
    "obsolete": false,
    "name": "t",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "'t' is a taskwarrior wrapper. It provides implicit project values on the command line, for adding and filtering, based on the current directory. BiutBucket",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "'t' is a taskwarrior wrapper. It provides implicit project values on the command line, for adding and filtering, based on the current directory. \n<small><a href=\"https://bitbucket.org/ciberandy/t\">BiutBucket</a></small>"
  },
  {
    "last_update": "2015-08-09",
    "author": [
      "Tomasz \u017bok (tzok)"
    ],
    "url_src": "https://github.com/tzok/taskattach",
    "license": "Unknown",
    "url": "https://github.com/tzok/taskattach",
    "obsolete": false,
    "name": "taskattach",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Provides support for attachment management for Taskwarrior",
    "category": "Extensions",
    "readme": "taskattach Provides support for attachment management for Taskwarrior You can easily add as many attachments as you want to any task The application allows also to select an attachment for opening If it detects plaintext file it invokes an editor Otherwise a default handler is called Examples Please find a demonstration session below task add Test Created task 10 taskattach 10 tmp document pdf Annotating task 10 Test Annotated 1 task taskattach 10 notes txt Annotating task 10 Test Annotated 1 task taskattach 10 new notes txt cp overwrite home tzok local share taskattach c7aaf28a a212 4590 9236 952044ebd178 test taskattach 10 1 document pdf 2 notes txt Some additional notes Files are kept in a location with conformance to XDG Base Directory Specification in a unique directory name taken from Taskwarrior itself Each basename of attachment can occur only once per task If you really need to add notes txt and new notes txt please rename the second one At least temporarily Attachments are copies of the original files This has a disadvantage of wasting some disk space On the other hand if you work on document you have always the latest version already attached to the task TODO A cleaning mechanism is missing i e one cannot remove attachments even those of deleted finished tasks",
    "compatibility": "1.9.4",
    "description": "Provides support for attachment management for Taskwarrior"
  },
  {
    "last_update": "2014-03-04",
    "author": [
      "erichschroeter"
    ],
    "url_src": "https://github.com/erichschroeter/taskweb",
    "license": "Unknown",
    "url": "https://github.com/erichschroeter/taskweb",
    "obsolete": false,
    "name": "taskweb",
    "theme": [
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [
      "PHP"
    ],
    "descriptionText": "Simple PHP implementation to display tasks exported from Taskwarrior.",
    "category": "Extensions",
    "readme": "Task Web abandoned Notice Due to lack of time and bad design choices this project is abandoned although I do plan on reviving it in some form once taskd http tasktools org projects taskd html _ is released image https secure travis ci org campbellr taskweb png branch master alt Build Status target http travis ci org campbellr taskweb task web is a Django based web front end for taskwarrior http taskwarrior org _ Although it currently very much in it s infancy the project is intended to allow users to host a taskwarrior database for syncing with task merge as well as adding editing and closing tasks through the web NOTE task web is not yet in a usable state and WILL CORRUPT YOUR TASK DATA Make sure you have backups before testing the the task sync feature Screenshot image http github com campbellr taskweb raw master taskweb png alt taskweb screenshot Installation task web isn t yet available on pypi and setup py doesn t work quite yet but if you are willing to put up with a lot of bugs just git pull and configure it like any other django project customize settings py set up http server etc Requirements task web requires the following software Django http djangoproject com _ djblets datagrid https github com djblets djblets _ taskw https github com ralphbean taskw _ TODO Add calendar view and other useful taskwarrior charts stats Better multi user support Better tablet mobile support Lots of usability enhancements Reporting Bugs Any bugs can be reported on the github issue tracker https github com campbellr taskweb issues new _",
    "compatibility": "1.9.4",
    "description": "Simple PHP implementation to display tasks exported from Taskwarrior."
  },
  {
    "last_update": "2016-04-10",
    "author": [
      "Andrew J. Pierce (tst-apierce)"
    ],
    "url_src": "https://github.com/ajpierce/taskmailer",
    "license": "Unknown",
    "url": "https://github.com/ajpierce/taskmailer",
    "obsolete": false,
    "name": "taskmailer",
    "theme": [
      "Mail",
      "Mail"
    ],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "Email yourself status updates from TaskWarrior",
    "category": "Extensions",
    "readme": "ABOUT TaskMailer is a small ruby application designed to email you status updates based on your TaskWarrior to do lists TaskWarrior is a command line todo list manager It s a great application for organizing and prioritizing tasks Learn more about it by visiting http taskwarrior org PREREQUISITES TaskMailer requires obviously TaskWarrior to be installed and running on your system Please visit http taskwarrior org for information on how to set up and configure an instance of TaskWarrior In order to send out emails TaskMailer requires Pony gem install pony or visit https github com benprew pony for more information Finally TaskMailer uses Psych to read YAML configuration files gem install psych will install Psych though it may require the libyaml dev library to be installed on your system SETUP Edit config smtp yaml to contain the SMTP information of your the mail server you will be using to send out email Edit config jobs yaml with the email address subject line and TaskWarrior projets you wish to send out You can add multiple jobs to the list Invoke taskwarrior rb to send out your emails Make it a cron job for extra points",
    "compatibility": "1.9.4",
    "description": "Email yourself status updates from TaskWarrior"
  },
  {
    "last_update": null,
    "author": [
      "Wim Sch\u00fcrmann"
    ],
    "url_src": "https://gist.github.com/wbsch/4109562",
    "license": "Unknown",
    "url": "https://gist.github.com/wbsch/4109562",
    "obsolete": false,
    "name": "Taskwarrior XMPP Bot",
    "theme": [
      "XMPP"
    ],
    "verified": "2015-08-15",
    "language": [
      "Python"
    ],
    "descriptionText": "Taskwarrior XMPP (Jabber) Bot proof of concept written in Python",
    "category": "Extensions",
    "compatibility": "*",
    "description": "Taskwarrior XMPP (Jabber) Bot proof of concept written in Python"
  },
  {
    "last_update": "2011-12-11",
    "author": [
      "Wim Schuermann"
    ],
    "url_src": "https://bug.tasktools.org/browse/TW-514",
    "license": "Unknown",
    "url": "https://bug.tasktools.org/browse/TW-514",
    "obsolete": false,
    "name": "local-task.sh",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "local-task.sh is a script that provides directory-specific task databases. Read the script for detailed instructions on installation and usage.",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "local-task.sh is a script that provides directory-specific task databases. Read the script for detailed instructions on installation and usage."
  },
  {
    "last_update": "2011-11-17",
    "author": [
      "Stefan Mai"
    ],
    "url_src": "https://github.com/iamnafets/taskwarrior_depends",
    "license": "Unknown",
    "url": "https://github.com/iamnafets/taskwarrior_depends",
    "obsolete": false,
    "name": "Dependency Trees",
    "theme": [],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Dependency trees for Taskwarrior",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "Dependency trees for Taskwarrior"
  },
  {
    "last_update": "2015-02-04",
    "author": [
      "Stan Schwertly (Stantheman)"
    ],
    "url_src": "https://github.com/Stantheman/TextPuller",
    "license": "Unknown",
    "url": "http://taskwarrior.org/news/79",
    "obsolete": false,
    "name": "TextPuller",
    "theme": [
      "OSX"
    ],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "OSX widget that pulls in text from a text file online. Used primarily for TaskWarrior output",
    "category": "Extensions",
    "readme": "TextPuller TextPuller is an OSX Dashboard Widget that takes URLs with text and displays them It s like websnip that stretches to the length of text TextPuller was developed to pull in the information from a cronned output of my TaskWarrior list task list is sent to a txt file every five minutes and is available online for me to see I feed this URL to TextPuller and can see it on my desktop I don t like scrollbars and WebSnip didn t work for me since it would cut off my text after the static length You can clone the repo and double click the widget to install Feel free to read more at my blog http www schwertly com 2011 05 dashboard widget for taskwarrior text files",
    "compatibility": "1.9.4",
    "description": "OSX widget that pulls in text from a text file online. Used primarily for TaskWarrior output"
  },
  {
    "last_update": "2011-03-19",
    "author": [
      "Johannes Weissl"
    ],
    "url_src": "https://github.com/weisslj/muttjump",
    "license": "Unknown",
    "url": "https://github.com/weisslj/muttjump",
    "obsolete": false,
    "name": "muttjump",
    "theme": [
      "Mail"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "For jumping to a specific mail in mutt via macro. This can be used together with taskopen to open a mutt message from a task.",
    "category": "Extensions",
    "compatibility": "Unknown",
    "description": "For jumping to a specific mail in mutt via macro. This can be used together with taskopen to open a mutt message from a task."
  },
  {
    "last_update": "2012-03-15",
    "author": [
      "by Bryce W. Harrington."
    ],
    "url_src": null,
    "license": "Unknown",
    "url": "http://pypi.python.org/pypi/taskhelm/0.3.2",
    "obsolete": true,
    "name": "Taskhelm",
    "theme": [
      "GUI"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Taskhelm is a graphical interface for task warrior. It also includes Tasknote functionality, project activity management, and more.",
    "category": "Front Ends",
    "compatibility": "2.1.2 or earlier",
    "description": "Taskhelm is a graphical interface for task warrior. It also includes \n<a href=\"http://github.com/mikebobroski/tasknote\">Tasknote</a> functionality, project activity management, and more."
  },
  {
    "last_update": "2015-07-28",
    "author": [
      "Anatolij Zelenin",
      "Georg Semmler"
    ],
    "url_src": "https://github.com/MirakelX/mirakel-android",
    "license": "GPLv3",
    "url": "http://mirakel.azapps.de/index.html",
    "obsolete": true,
    "name": "mirakel-android",
    "theme": [
      "Android"
    ],
    "verified": "2015-08-15",
    "language": [],
    "descriptionText": "Todo list app for Android which also syncs with taskwarrior.",
    "category": "Front Ends",
    "compatibility": "Taskserver 1.0.0 and 1.1.0",
    "description": "Todo list app for Android which also syncs with taskwarrior."
  },
  {
    "last_update": "2016-04-20",
    "author": [
      "mjheagle8 (mjheagle8)",
      "Matthias Beyer (matthiasbeyer)",
      "Leander Harding (lharding)",
      "Kevin MacMartin (prurigro)",
      "Marcus M\u00fcller (marcusmueller)",
      "Iain Learmonth (irl)"
    ],
    "url_src": "https://github.com/lharding/tasknc",
    "license": "Unknown",
    "url": "https://github.com/lharding/tasknc",
    "obsolete": false,
    "name": "tasknc",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "C"
    ],
    "descriptionText": "a ncurses wrapper around taskwarrior",
    "category": "Extensions",
    "readme": "task ncurses About Thank you for trying tasknc tasknc is a ncurses wrapper for task warrior http taskwarrior org projects show taskwarrior written in C It aims to provide an interface like the excellent ncurses programs mutt and ncmpcpp Installation Installation can be performed by pasting the commands below git clone https github com lharding tasknc git cd tasknc make sudo make install Requirements task warrior http taskwarrior org projects show taskwarrior is the backend on which tasknc relies In Arch Linux this is provided by the task package pod2man is required to generate the manual page In Arch Linux this is provided by the perl package ncursesw headers are required to compile with unicode support In Arch Linux this is provided by the ncurses package Bugs tasknc is still in active development and there are still some bugs Reporting bugs is very helpful to development Please report these bugs on github https github com lharding tasknc issues page 1 state open If you experience a segmentation fault it would be fantastic if you could go into the test directory and run the valgrind_test sh script and attach the resulting valgrind_errors file Contributing Contribution in the form of feedback patches bug reports etc is greatly appreciated Original code by mjheagle8 https github com mjheagle8 Special thanks to matthiasbeyer https github com matthiasbeyer for a massive code overhaul",
    "compatibility": "Unknown",
    "description": "a ncurses wrapper around taskwarrior"
  },
  {
    "last_update": "2015-11-05",
    "author": [
      "Ryan Brown (ryansb)"
    ],
    "url_src": "https://github.com/ryansb/gitwarrior",
    "license": "AGPL",
    "url": "https://github.com/ryansb/gitwarrior",
    "obsolete": false,
    "name": "gitwarrior",
    "theme": [
      "Git",
      "Git"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Interface between Git Issues and TaskWarrior",
    "category": "Extensions",
    "readme": "USAGE gw list li ls all List all shortcut la List all open issues for a project or for all projects gw show sho sh ID Show everything about a given issue gw new n This is a title This is the body Project Create an issue gw comment co ID show Comment body Add a comment to the specified issue or show all comments organized oldest newest gw status stat st ID close open Change status of an issue without args it just shows the current status gw edit ed e ID Edit an issue s title body gw sync sy TaskWarrior database path Sync local TaskWarrior tasks with Github issues gw set Section Var Val Set a Var to Val in Section of your config Will overwrite the current value NOTES Anything in brackets is optional and when appropriate will be filled in with defaults from the config file If there are no defaults then the command will probably fail",
    "compatibility": "1.9.4",
    "description": "Interface between Git Issues and TaskWarrior"
  },
  {
    "last_update": "2014-04-29",
    "author": [
      "Thomas Shadwell (TShadwell)"
    ],
    "url_src": "https://github.com/TShadwell/Pester",
    "license": "Unknown",
    "url": "https://github.com/TShadwell/Pester",
    "obsolete": false,
    "name": "Pester",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "PHP"
    ],
    "descriptionText": "PHP script that lets people pester you about not doing taskwarrior tasks.",
    "category": "Extensions",
    "readme": "Lets people pester you that you haven t done x task Uses taskwarrior To setup on a GNU Linux system sudo mkdir opt task sudo chown USERNAME users opt task task push opt task then just task push opt task anytime to update the tasklist",
    "compatibility": "1.9.4",
    "description": "PHP script that lets people pester you about not doing taskwarrior tasks."
  },
  {
    "last_update": "2016-02-09",
    "author": [
      "Johannes S. (ValiValpas)"
    ],
    "url_src": "https://github.com/ValiValpas/awesome-taskwarrior",
    "license": "Unknown",
    "url": "https://github.com/ValiValpas/awesome-taskwarrior",
    "obsolete": false,
    "name": "awesome-taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Integrate taskwarrior into awesome wm",
    "category": "Extensions",
    "readme": "These lua scripts can be used to integrate taskwarrior into the awesome window manager Features There are two types of widget you can use namely a naughty based list of all your tasks tagged with todo tasklist widget and a textbox based widget that displays overdue tasks duetasks widget The screenshot png shows both widgets in use Installation First of all you need to compile taskwarrior with lua support by running the configure script with with lua Configure taskwarrior Copy the file awesome lua into task and add the lines from append_to_taskrc to your taskrc Configure awesome Copy the remaining lua files into config awesome and modify your rc lua as the file rc_example lua proposes You might also want to customize the taskwarrior report that will be used for the tasklist widget by editing task lua Contribution Feel free to contribute to this project Links http www taskwarrior org http www taskwarrior org http awesome naquadah org http awesome naquadah org",
    "compatibility": "Obsolete",
    "description": "Integrate taskwarrior into awesome wm"
  },
  {
    "last_update": "2016-02-05",
    "author": [
      "David Badura (DavidBadura)",
      "Tobias Olry (tolry)",
      "Lars Wallenborn (larsborn)"
    ],
    "url_src": "https://github.com/DavidBadura/Taskwarrior",
    "url": "https://github.com/DavidBadura/Taskwarrior",
    "obsolete": false,
    "name": "Taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "PHP"
    ],
    "descriptionText": "a php lib for taskwarrior",
    "category": "Unknown",
    "readme": "Taskwarrior PHP lib used by doThings https github com DavidBadura doThings a Taskwarrior web ui Build Status https travis ci org DavidBadura Taskwarrior svg branch master https travis ci org DavidBadura Taskwarrior WOW http i imgur com mvSQh0M gif Install bash composer require davidbadura taskwarrior Unfortunately the annotation reader is not automatically registered on composer So you should add following line if you have Semantical Error The annotation JMS Serializer Annotation Type in property does not exist or could not be auto loaded exception php Doctrine Common Annotations AnnotationRegistry registerLoader class_exists Requirements Taskwarrior changes its behavior by patch level updates and it is very difficult to support all versions The current supported versions are PHP Lib Taskwarrior PHP Version 2 x 2 4 3 5 4 3 x 2 5 0 5 5 Usage php use DavidBadura Taskwarrior TaskManager use DavidBadura Taskwarrior Task use DavidBadura Taskwarrior Recurring use DavidBadura Taskwarrior Annotation tm TaskManager create task new Task task setDescription program this lib task setProject hobby task setDue tomorrow task setPriority Task PRIORITY_HIGH task addTag next task setRecurring Recurring DAILY task addAnnotation new Annotation and add many features tm save task tasks tm filterPending project hobby one task tm done task tasks tm filterPending project hobby empty tasks tm filter project hobby one task tasks tm filterByReport waiting and sorting API Task attr writeable type uuid false string description true string priority true string project true string due true DateTime wait true DateTime tags true string annotations true Annotation urgency false float entry false DateTime start false DateTime recur true Recurring unti true DateTime modified false DateTime end false DateTime status false string Example php task new Task task setDescription program this lib task setProject hobby task setDue tomorrow task setPriority Task PRIORITY_HIGH task addTag next task setRecurring Recurring DAILY Taskwarrior create TaskManager php tm TaskManager create save a task php task new Task task setDescription foo tm save task find a task php task tm find b1d46c75 63cc 4753 a20f a0b376f1ead0 filter tasks php tasks tm filter status pending tasks tm filter status pending home tasks tm filter status pending and home tasks tm filter status pending home filter pending tasks php tasks tm filterPending home tasks tm filterPending project hobby home tasks tm filterPending project hobby and home tasks tm filterPending project hobby home count tasks php tasks tm count status pending tasks tm count status pending home tasks tm count status pending and home tasks tm count status pending home delete task php tm delete task done task php tm done task start task php tm start task stop task php tm stop task reopen task php tm reopen task dependencies php task1 new Task task1 setDescription a task2 new Task task2 setDescription b task1 addDependency task2 the order is important tm save task2 tm save task1 tm clear clear object cache task1 tm find uuid from task1 task2 task1 getDependencies 0 echo task2 getDesciption b lazy loading annotations php task new Task task setDescription a task addAnnotation new Annotation foobar tm save task tm clear clear object cache task tm find uuid from task1 annotation task getAnnotations 0 echo annotation getDesciption foobar QueryBuilder example php tasks taskManager createQueryBuilder whereProject hobby orderBy entry DESC getResult",
    "compatibility": "2.4.1+",
    "description": "a php lib for taskwarrior"
  },
  {
    "last_update": "2016-04-21",
    "author": [
      "Jake Bell (theunraveler)",
      "genewoo (genewoo)",
      "C\u00e9dric F\u00e9lizard (infertux)",
      "Zak Tsai (yozo1984)"
    ],
    "url_src": "https://github.com/theunraveler/taskwarrior-web",
    "url": "http://theunraveler.github.com/taskwarrior-web",
    "obsolete": false,
    "name": "taskwarrior-web",
    "theme": [
      "Time",
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "A web interface for the Taskwarrior todo application. Because being a neckbeard is only fun sometimes.",
    "category": "Unknown",
    "readme": "A Web Interface for Taskwarrior A lightweight Sinatra based web interface for the wonderful Taskwarrior http taskwarrior org todo application TaskwarriorWeb screenshot https raw github com theunraveler taskwarrior web gh pages images screenshot png Gem Version https badge fury io rb taskwarrior web png http badge fury io rb taskwarrior web Build Status https secure travis ci org theunraveler taskwarrior web png http travis ci org theunraveler taskwarrior web Requirements ruby 1 9 support for ruby 1 9 is very unlikely but pull requests are gladly accepted Installation gem install taskwarrior web This will install an executable called task web Usage task web at your terminal to start it up This will start the process background it and open the URL in your browser It uses Vegas https github com quirkey vegas to make the Sinatra app into an executable so all options for Vegas are valid for task web Type task web h for more options Features The current featureset includes Viewing tasks sorted and grouped in various ways Creating a new task with a due date project and tags Editing and deleting tasks only task 2 0 task web will pull your task config from taskrc and use it to determine date formatting and when an upcoming task should be marked as due If you are on a Mac and use Fluid app you get a dock badge showing the number of pending tasks Optional HTTP Basic authentication 1 1 https github com theunraveler taskwarrior web wiki Additional taskrc options Reporting Bugs To report a bug use the Github issue tracker 2 Since taskwarrior web works with several different versions of task using many different configurations please include the output from task _version and either the output of task show or a copy of your taskrc file when filing a bug This helps me reproduce bugs easier Here is an example of a good bug report 3 2 http github com theunraveler taskwarrior web issues 3 http github com theunraveler taskwarrior web issues 26 Marginalia This project is not developed by the Taskwarrior team Obviously taskwarrior web extends Taskwarrior but the projects are separate task web is mostly designed to run locally As such security is not of the highest priority You may find that things such as CSRF protection are lacking If things like this are important to you please file an issue or a pull request",
    "compatibility": "2.4.1+",
    "description": "A web interface for the Taskwarrior todo application. Because being a neckbeard is only fun sometimes."
  },
  {
    "last_update": "2016-04-11",
    "author": [
      "Sujeevan Vijayakumaran (svijee)",
      "Dennis Neisberger (D-E-N)",
      "Erik Westrup (erikw)",
      "Romain Chossart (sitaktif)",
      "Hypfer"
    ],
    "url_src": "https://github.com/svijee/taskwarrior-androidapp",
    "url": "https://github.com/svijee/taskwarrior-androidapp",
    "obsolete": false,
    "name": "taskwarrior-androidapp",
    "theme": [
      "Android"
    ],
    "verified": "2016-04-24",
    "language": [
      "Java"
    ],
    "descriptionText": "Taskwarrior for Android",
    "category": "Unknown",
    "readme": "This project is abandoned See the Taskwarrior Android App https bitbucket org kvorobyev taskwarriorandroid by Konstantin Vorobyev Taskwarrior for Android Taskwarrior for Android will be a compatible App for the commandline tool Taskwarrior See http taskwarrior org for more information about the CLI Tool taskwarrior Developed By Sujeevan Vijayakumaran mail svij org Development Mailinglist You can find development information on our Mailinglist on Google Groups https groups google com forum forum taskwarrior android A big thanks goes to pbeckingham and the Taskwarrior Developer Team for creating Taskwarrior http taskwarrior org",
    "compatibility": "2.4.1+",
    "description": "Taskwarrior for Android"
  },
  {
    "last_update": "2016-03-20",
    "author": [
      "Jan Palus (jpalus)",
      "Elan Ruusam\u00e4e (glensc)",
      "Arkadiusz Mi\u015bkiewicz (arekm)",
      "Jan R\u0119korajski (janekr)",
      "Przemys\u0142aw Iskra (sparky)"
    ],
    "url_src": "https://github.com/pld-linux/taskwarrior",
    "url": "https://github.com/pld-linux/taskwarrior",
    "obsolete": false,
    "name": "taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": null,
    "category": "Unknown",
    "readme": "Disclaimer during ongoing development We want to discourage you from using the development version of Taskwarrior The development branch is a work in progress and may not pass all quality tests therefore it may harm your data We do not guarantee proper or even adequate functionality performance or timely fixes We welcome bug reports from beta and release level software but generally not development versions If you are undaunted by this please Make proper backups Expect broken and missing functionality Be aware that using the development branch involves risks Thank you for taking a look at Taskwarrior Taskwarrior is a GTD todo list task management command line utility with a multitude of features It is a portable well supported and very active Open Source project Taskwarrior has binary distributions online documentation demonstration movies and you ll find all the details at http taskwarrior org At the site you ll find online documentation downloads news and more Your contributions are especially welcome Whether it comes in the form of code patches ideas discussion bug reports encouragement or criticism your input is needed For support options take a look at http taskwarrior org support Please send your code patches to support taskwarrior org Consider joining bug tasktools org answers tasktools org and participating in the future of Taskwarrior Taskwarrior is released under the MIT license For details check the LICENSE file",
    "compatibility": "2.4.1+",
    "description": null
  },
  {
    "last_update": "2016-03-14",
    "author": [
      "humblehacker"
    ],
    "url_src": "https://github.com/humblehacker/taskwarrior-ios",
    "url": "https://github.com/humblehacker/taskwarrior-ios",
    "obsolete": false,
    "name": "taskwarrior-ios",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Objective-C"
    ],
    "descriptionText": "IOS port of the command-line tool TaskWarrior",
    "category": "Unknown",
    "readme": "taskwarrior ios An iOS port of the command line tool TaskWarrior http taskwarrior org Screenshots iPhone example Site iPhone_example png iPad example Site iPad_example png",
    "compatibility": "2.4.1+",
    "description": "IOS port of the command-line tool TaskWarrior"
  },
  {
    "last_update": "2016-04-19",
    "author": [
      "Stefan Mai (iamnafets)",
      "E. Dunham (edunham)"
    ],
    "url_src": "https://github.com/iamnafets/taskwarrior_depends",
    "url": "http://iamnafets.com/tech/?p=55",
    "obsolete": false,
    "name": "taskwarrior_depends",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Dependency trees for Taskwarrior",
    "category": "Unknown",
    "readme": "This repository holds some very sloppy scripts for generating trees from taskwarrior dependencies It s useful for situations where you have a long network of tasks to get to your goal More details can be found here http iamnafets com tech p 55 SETUP Clone the Repository git clone https iamnafets github com iamnafets taskwarrior_depends git Add to your path export PATH PATH pwd taskwarrior_depends",
    "compatibility": "2.4.1+",
    "description": "Dependency trees for Taskwarrior"
  },
  {
    "last_update": "2016-03-13",
    "author": [
      "David Badura (DavidBadura)"
    ],
    "url_src": "https://github.com/DavidBadura/taskwarrior-docker",
    "url": "https://github.com/DavidBadura/taskwarrior-docker",
    "obsolete": false,
    "name": "taskwarrior-docker",
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "",
    "category": "Unknown",
    "readme": "bash docker run it v HOME taskrc root taskrc v HOME task root task v etc localtime etc localtime ro davidbadura taskwarrior",
    "compatibility": "2.4.1+",
    "description": ""
  },
  {
    "last_update": "2016-04-01",
    "author": [
      "kostajh",
      "Adam Coddington (coddingtonbear)",
      "mmynsted",
      "Bruno Vernay (BrunoVernay)",
      "Fran\u00e7ois Charlier (fcharlier)"
    ],
    "url_src": "https://github.com/kostajh/taskwarrior-time-tracking-hook",
    "url": "https://github.com/kostajh/taskwarrior-time-tracking-hook",
    "obsolete": false,
    "name": "taskwarrior-time-tracking-hook",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "A simple Taskwarrior hook allowing one to track total time spent on a task.",
    "category": "Unknown",
    "readme": "Taskwarrior Time Tracking Hook Ensure you have taskwarrior 2 4 x or higher Install Install using pip pip install taskwarrior time tracking hook And add it to your Taskwarrior hooks mkdir p task hooks ln s which taskwarrior_time_tracking_hook task hooks on modify timetracking Add the totalactivetime user defined attribute configuration task config uda totalactivetime type duration task config uda totalactivetime label Total active time task config uda totalactivetime values Usage Use task TASK ID start and task TASK ID stop to record when you have started and stopped working on tasks Tracked time is stored in a task duration attribute named totalactivetime holding the total number of seconds that the task was active By default this plugin allows you to have one task active at a time You can change this by setting max_active_tasks in taskrc to a value greater than 1 Un install Delete the hook rm task hooks on modify timetracking Remove the User Defined Attribute UDA configuration task config uda totalactivetime values task config uda totalactivetime label task config uda totalactivetime type Remove the Python program pip uninstall taskwarrior time tracking hook",
    "compatibility": "2.4.1+",
    "description": "A simple Taskwarrior hook allowing one to track total time spent on a task."
  },
  {
    "last_update": "2016-03-17",
    "author": [
      "Justin Barnes (jbarnes321)",
      "SeanMichaelL",
      "Steven Garcia (puchodr)",
      "stefanrivas"
    ],
    "url_src": "https://github.com/jbarnes321/TaskWarrior",
    "url": "https://github.com/jbarnes321/TaskWarrior",
    "obsolete": false,
    "name": "TaskWarrior",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "C#"
    ],
    "descriptionText": "",
    "category": "Unknown",
    "readme": "TESTING 123",
    "compatibility": "2.4.1+",
    "description": ""
  },
  {
    "last_update": "2016-04-18",
    "author": [
      "Adam Coddington (coddingtonbear)",
      "ebayer",
      "MaxSt",
      "slabans",
      "Matthew Avant (mavant)",
      "Kaitlyn Rich (richkait)"
    ],
    "url_src": "https://github.com/coddingtonbear/inthe.am",
    "url": "https://inthe.am/",
    "obsolete": false,
    "name": "inthe.am",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Access your Taskwarrior tasks from any browser anywhere",
    "category": "Unknown",
    "readme": "Inthe AM image https api travis ci org coddingtonbear inthe am png branch development target https travis ci org coddingtonbear inthe am Documentation for Inthe AM is available on ReadTheDocs http intheam readthedocs org _ Please post issues on Github http github com coddingtonbear inthe am issues _ Test status available on Travis CI https travis ci org coddingtonbear inthe am _ Questions Ask them on Gitter https gitter im coddingtonbear inthe am _",
    "compatibility": "2.4.1+",
    "description": "Access your Taskwarrior tasks from any browser anywhere"
  },
  {
    "last_update": "2016-04-11",
    "author": [
      "Roy Zuo (roylez)",
      "Daniel Hertz (Dhertz)"
    ],
    "url_src": "https://github.com/roylez/alfred_taskwarrior",
    "url": "https://github.com/roylez/alfred_taskwarrior",
    "obsolete": false,
    "name": "alfred_taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": ":hocho: Alfred 2 workflow to interact with TaskWarrior tasks",
    "category": "Unknown",
    "readme": "Taskwarrior workflow for Alfred v2 Modified from anazimok taskwarrior workflow 1 so that there would not be an extra terminal window opened each time a job is completed NOTE to make incremental pattern searching work with t list command at least Alfred 2 6 is required Download this workflow 2 \u67e5\u8be2\u754c\u9762 https github com roylez alfred_taskwarrior blob master screenshot png 1 https github com anazimok taskwarrior workflow 2 https github com roylez alfred_taskwarrior raw master taskwarrior alfredworkflow",
    "compatibility": "2.4.1+",
    "description": ":hocho: Alfred 2 workflow to interact with TaskWarrior tasks"
  },
  {
    "last_update": "2014-01-18",
    "author": [
      "Arnaud Kervern (akervern)"
    ],
    "url_src": "https://github.com/akervern/taskWarrior-Mobile-Front-end",
    "url": "https://github.com/akervern/taskWarrior-Mobile-Front-end",
    "obsolete": false,
    "name": "taskWarrior-Mobile-Front-end",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "A Sinatra / JQuery Mobile based apps to manage taskWarrior data",
    "category": "Unknown",
    "readme": "TaskWarrior Mobile front end A Sinatra JQuery Mobile based apps to manage taskWarrior data Building First you need to make sure you have Ruby Rake RSpec Sinatra Thin TaskWarrior If something is missing you can install it with Gem gem install rake rspec sinatra thin Launch Sinatra in dev mode rake Execute test rake test Execute test in doc mode rake doc Launch daemon using Thin you need to have a config ru file and a config yml refer to example rake start Stop daemon if stated rake stop TaskWarrior Taskwarrior is an ambitious project to supercharge task with an interactive interface GTD features color themes data synch dependencies custom reports charts and Lua plugins all while our international team provides excellent support More information on http taskwarrior org",
    "compatibility": "2.4.1+",
    "description": "A Sinatra / JQuery Mobile based apps to manage taskWarrior data"
  },
  {
    "last_update": "2015-11-05",
    "author": [
      "Alfredo Palhares (masterkorp)"
    ],
    "url_src": "https://github.com/masterkorp/cookbook-taskwarrior",
    "url": "https://github.com/masterkorp/cookbook-taskwarrior",
    "obsolete": false,
    "name": "cookbook-taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "A Chef cookbook to manage taskwarrior and friends.",
    "category": "Unknown",
    "readme": "taskwarrior Cookbook Installs and configures taskwarrior client and server software Requirements All the requirements are installed for you if you use Berkshelf http berkshelf com Altough it is good practice to add the following to the role run list cookbooks apt To install the lastest packages git To clone the code both for client and server source installs cmake Build dependency for task and taskserver build essential Build dependency for task and taskserver perl Build dependency for taskserver python Build dependency for taskserver runit To manage the taskserver daemon Plaforms Ubuntu Debian Attributes taskwarrior default table tr th Key th th Type th th Description th th Default th tr tr td tt taskwarrior method tt td td String td td Choose to install from the repository of from the lastest on the git repository td td tt package tt td tr tr td tt taskwarrior source git_repository tt td td String td td The git repository to clone taskwarrior from td td tt git tasktools org task git tt td tr tr td tt taskwarrior source git_revision tt td td String td td The git revision to build from HEAD is lastest td td tt HEAD tt td tr table taskwarrior server table tr th Key th th Type th th Description th th Default th tr tr td tt taskwarrior server git_repository tt td td String td td The git repository to clone taskserver from td td tt git tasktools org taskd git tt td tr tr td tt taskwarrior server git_revision tt td td String td td The git revision to build from HEAD is lastest td td tt HEAD tt td tr tr td tt taskwarrior server home tt td td String td td The main directory for taskd td td tt var lib taskd tt td tr tr td tt taskwarrior server data_dir tt td td String td td Taskd data directory td td tt default taskwarrior server home data tt td tr tr td tt taskwarrior server keys_dir tt td td String td td Fully qualified path for the keys td td tt default taskwarrior server home keys tt td tr tr td tt taskwarrior server confirmation tt td td String td td Determines whether certain commands are confirmed td td tt on tt td tr tr td tt taskwarrior server extensions tt td td String td td Fully qualified path of the taskd extension scripts Currently there are none td td tt tt td tr tr td tt taskwarrior server ip_log tt td td String td td Logs the IP addresses of incoming requests td td tt on tt td tr tr td tt taskwarrior server log_dir tt td td String td td Log directory for taskd td td tt var log taskd tt td tr tr td tt taskwarrior server log_file tt td td String td td Main log file td td tt default taskwarrior server log_dir keys tt td tr tr td tt taskwarrior server queue_size tt td td Integer td td Size of the connection backlog td td tt 10 tt td tr tr td tt taskwarrior server request_limit tt td td Integer td td Size limit of incoming requests in bytes td td tt 1048576 tt td tr tr td tt taskwarrior server link tt td td String td td The address of the taskd server followed by a colon and the por number td td tt localhost 6544 tt td tr tr td tt taskwarrior server organization tt td td String td td The name of your organization to generate the certificates td td tt Empty tt td tr tr td tt taskwarrior server clients tt td td String td td Regex string to allow client to connect to the server Check the taskd log for more examples td td tt task 2 9 tt td tr table Usage taskwarrior default Installs the taskwarrior client that can work standalone just add it to your run_list You can choose to install from the repositories or to build from source Just set the taskwarrior install_method to source like so json name my_node run_list recipe taskwarrior override_attrubutes taskwarrior install_method source taskwarrior server Builds and installs the taskwarrior service daemon taskd and sets up supervising with runit Check the taskwarrior wiki pages for operation http taskwarrior org projects taskwarrior wiki Taskserver_Operation setup http taskwarrior org projects taskwarrior wiki Server_setup amd ciphers http taskwarrior org projects taskwarrior wiki Ciphers Add the following to you users data bag json id bob taskwarrior organization Public groups groupA groupB This will generate client keys and the taskd user and its Uuid for bob The key distrubution at the moment is done by hand so you need to get them from the key directory Contributing The testing is done mostly with test kitchen http kitchen ci before everything set it up Also foodcritic http www foodcritic io is used for linting Fork the repository on Github Create a named feature branch like add_component_x Write your change Make it pass foodcritic Write tests for your change if applicable Run the tests ensuring they all pass Submit a Pull Request using Github License and Authors Authors Alfredo Palhares masterkorp masterkorp net and masterkorp on irc freenode org",
    "compatibility": "2.4.1+",
    "description": "A Chef cookbook to manage taskwarrior and friends."
  },
  {
    "last_update": "2016-04-20",
    "author": [
      "Casey Robinson (rampantmonkey)"
    ],
    "url_src": "https://github.com/rampantmonkey/twui",
    "url": "https://github.com/rampantmonkey/twui",
    "obsolete": false,
    "name": "twui",
    "theme": [
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "Web UI for Taskwarrior",
    "category": "Unknown",
    "readme": "twui Taskwarrior UI a responsive web interface to taskwarrior http taskwarrior org written with Node js http nodejs org Build Status badge http img shields io travis rampantmonkey twui svg style flat https travis ci org rampantmonkey twui npm package version badge http img shields io npm v twui svg style flat https www npmjs org package twui license badge http img shields io badge license MIT blue svg style flat http opensource org licenses MIT Installing npm install g twui Usage To start simply type twui and navigate to localhost 2718 If you want twui to run as a background process use the following twui dev null UI Task Summary task summary ui doc images task summary overview png The task summary contains six indicators for the following attributes of a task Description the majority of text displayed explain the task warrior list status indicators Project the text displayed in thin caps below the description TWUI Tags text prefixed with a tag image documentation Due Date if the task has a due date hands will appear in the circle to the left of the description like a clock Recurring if the task has a second ring it is a recurring task Annotations if the task has annotations a count will occur to the right of the description 2 Priority indicated by color grey no priority blue low priority green medium priority red high priority Contributing Setting up the development environment 0 Install node http nodejs org http nodejs org 1 Clone the repo git clone https github com rampantmonkey twui git 2 Move to directory cd twui 3 Download dependencies angular js make deploy 4 Download and install node module dependencies locally npm install 5 Start server bin twui Updating to most recent version 1 Download latest changes git pull origin master 2 Start server bin twui Common Issues No such file or directory usr bin env node No such file or directory This error occurs when the node executable is not in your PATH Some linux distributions decided to install the node executable as nodejs instead of node The simple solution is to create a symlink ln s usr bin nodejs usr bin node But for those afraid of the file system a package is available to perform the same action apt get install nodejs legacy License _This software copy Casey Robinson 2014 is released under the MIT license _ You can find a copy in LICENSE txt LICENSE txt or at opensource org http opensource org licenses MIT",
    "compatibility": "2.4.1+",
    "description": "Web UI for Taskwarrior"
  },
  {
    "last_update": "2016-04-17",
    "author": [
      "Alejandro Garrido Mota (mogaal)"
    ],
    "url_src": "https://github.com/mogaal/vit",
    "url": "https://github.com/mogaal/vit",
    "obsolete": false,
    "name": "vit",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Perl"
    ],
    "descriptionText": "full-screen terminal interface for Taskwarrior",
    "category": "Unknown",
    "readme": "VIT a minimalistic Taskwarrior full screen terminal interface with Vim key bindings Features Vim key bindings uncluttered display no mouse speed Requirements task version 2 1 2 or newer modern ncurses built with wide character support via enable widec the perl Curses module Recommendations follow the directions in the INSTALL file do vit help know the vit command line arguments do help in vit look over the commands file use an xterm terminal for full color support for GTK Gnome colors add the taskrc gtk configuration strings to your taskrc xterm geom 100x40 sb e usr local bin vit titlebar Downloads http taskwarrior org projects taskwarrior wiki Vit If you actually use this program feel free to send me a msg and let me know steve Our friend and collaborator Steve Rader passed away in May 2013 We owe a lot to Steve for his excellent work and so vit is preserved maintained and continued Taskwarrior Team support taskwarrior org",
    "compatibility": "2.4.1+",
    "description": "full-screen terminal interface for Taskwarrior"
  },
  {
    "last_update": "2015-11-04",
    "author": [
      "Federico Ramallo (framallo)"
    ],
    "url_src": "https://github.com/framallo/taskwarrior.vim",
    "url": "https://github.com/framallo/taskwarrior.vim",
    "obsolete": false,
    "name": "taskwarrior.vim",
    "theme": [
      "Vim"
    ],
    "verified": "2016-04-24",
    "language": [
      "VimL"
    ],
    "descriptionText": "task warrior vim syntax files",
    "category": "Unknown",
    "readme": "Configure VIM for Syntax Highlighting of Taskwarrior Data The task data files pending data completed data and undo data configuration file taskrc as well as edits made via commands like task 1 edit can be color highlighted if you happen to use VIM as your preferred text editor Eventually this will happen automatically in newer versions of VIM but for now you have to do a little bit of file shuffling Prerequisites For this to work you need to first have syntax highlighting enabled when you use VIM This happens to be the default for most VIM installations but it is usually quite simple if that doesn t happen to be so in your case Rather than repeat the excellent VIM documentation here please see the appropriate VIM documentation itself Generally this can be made seen by starting vim gvim and issuing the following command help syntax You may prefer instead to read the help online at http vimdoc sourceforge net htmldoc syntax html syntax Configuring VIM to Understand Taskwarrior Data Once you have VIM s syntax highlighting enabled and working with other file types properly configuring it for use with taskwarrior is simple You simply need to copy some files that came with taskwarrior into your home directory so that you have vim ftdetect task vim vim syntax taskdata vim vim syntax taskedit vim vim syntax taskrc vim The source of these files varies depending on how you installed task If you installed task via a regular package rpm or deb you can find these files in usr share doc task VERSION scripts vim If you built task yourself from the tarball using the default configure options these will be in usr local share doc task VERSION scripts vim instead So you should be able to do one of the following cp av usr share doc task VERSION scripts vim vim or cp av usr local share doc task VERSION scripts vim vim You should then be ready to go All four above mentioned files are Copyright 2009 2010 John Florian and are available under the GNU Public License version 2 or later For the full text of this license see COPYING",
    "compatibility": "2.4.1+",
    "description": "task warrior vim syntax files"
  },
  {
    "last_update": "2016-03-14",
    "author": [
      "Yanick Champoux (yanick)"
    ],
    "url_src": "https://github.com/yanick/Taskwarrior-Hooks",
    "url": "https://github.com/yanick/Taskwarrior-Hooks",
    "obsolete": false,
    "name": "Taskwarrior-Hooks",
    "verified": "2016-04-24",
    "language": [
      "Perl"
    ],
    "descriptionText": "",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": ""
  },
  {
    "last_update": "2016-03-03",
    "author": [
      "Adam Coddington (coddingtonbear)"
    ],
    "url_src": "https://github.com/coddingtonbear/taskwarrior-inthe.am",
    "url": "https://github.com/coddingtonbear/taskwarrior-inthe.am",
    "obsolete": false,
    "name": "taskwarrior-inthe.am",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Utilities to make using Inthe.AM with Taskwarrior just a little easier.",
    "category": "Unknown",
    "readme": "Taskwarrior Inthe AM Utility Utilities to make using Inthe AM with Taskwarrior just a little easier Installation Using pip pip install taskwarrior inthe am If you do not have pip installed follow these instructions https pip pypa io en latest installing html install pip _ Commands To run any of the below commands from the command line run intheam COMMAND setup Run this command if you d like to configure your local installation of Taskwarrior to synchronize with Inthe AM clear_passwords Clear your saved API key from your keychain Getting your API Key To perform any interactions with Inthe AM you will need to provide an API key To find your API key 1 Log in to Inthe AM using a web browser 2 Go to the Configuration page 3 Open the API Access section",
    "compatibility": "2.4.1+",
    "description": "Utilities to make using Inthe.AM with Taskwarrior just a little easier."
  },
  {
    "last_update": "2013-10-11",
    "author": [
      "Baptiste Wicht (wichtounet)"
    ],
    "url_src": "https://github.com/wichtounet/taskwarrior-php",
    "url": "https://github.com/wichtounet/taskwarrior-php",
    "obsolete": false,
    "name": "taskwarrior-php",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "PHP"
    ],
    "descriptionText": "A very simple PHP Front End Viewer for Task Warrior",
    "category": "Unknown",
    "readme": "taskwarrior php 0 1 A very simple PHP Front End Viewer for Task Warrior For now this viewer display each task sorted by projects their descriptions ages and tags From the viewer it is also possible to mark a task as done and delete it It is also possible to insert a new task Keep in mind that this application is still in version 0 1 and it is quite possible that there are still bugs Installation To install this application and use it as a viewer you just have to copy the entire folder into a PHP server Then the config php must be edited to reflect the place where the taskwarrior files are located You have to put your taskwarrior files pending data and completed data on the server For that you can use the integrated FTP push and pull requests to synchronize your tasks Contribute The project is open for any kind of contribution ideas new features hotfixes tests If you want to contribute to this project you can contact me by email baptiste wicht gmail com or via my website http baptiste wicht com Troubleshooting Please consider using Github issues tracker http github com wichtounet taskwarrior php issues to submit bug reports or feature requests You can also contact me via my website http baptiste wicht com",
    "compatibility": "2.4.1+",
    "description": "A very simple PHP Front End Viewer for Task Warrior"
  },
  {
    "last_update": "2016-03-16",
    "author": [
      "Kevin Bockelandt (KevinBockelandt)"
    ],
    "url_src": "https://github.com/KevinBockelandt/TaskwarriorWidget",
    "url": "https://github.com/KevinBockelandt/TaskwarriorWidget",
    "obsolete": false,
    "name": "TaskwarriorWidget",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "CoffeeScript"
    ],
    "descriptionText": "An \u00dcbersicht widget to display your Taskwarrior pending tasks on the desktop",
    "category": "Unknown",
    "readme": "Taskwarrior widget for \u00dcbersicht Screenshot Screenshot of the widget screenshot png raw true Description Taskwarrior https taskwarrior org is Free and Open Source Software that manages your TODO list from the command line \u00dcbersicht http tracesof net uebersicht lets you run system commands and display their output on your desktop in little containers called widgets This particular widget displays your 20 first pending Taskwarrior tasks on your desktop The due date is displayed as an offset between the due date and today",
    "compatibility": "2.4.1+",
    "description": "An \u00dcbersicht widget to display your Taskwarrior pending tasks on the desktop"
  },
  {
    "last_update": "2016-02-16",
    "author": [
      "Blake Sweeney (blakesweeney)",
      "Joel Moberg (joelmo)"
    ],
    "url_src": "https://github.com/blakesweeney/unite-taskwarrior",
    "url": "https://github.com/blakesweeney/unite-taskwarrior",
    "obsolete": false,
    "name": "unite-taskwarrior",
    "theme": [
      "Vim"
    ],
    "verified": "2016-04-24",
    "language": [
      "VimL"
    ],
    "descriptionText": "A unite.vim interface to taskwarrior",
    "category": "Unknown",
    "readme": "Unite taskwarrior A unite vim interface to task warrior This is meant to be a simple interface to taskwarrior that works faster than vim taskwarrior https github com farseer90718 vim taskwarrior Plus I like Unite s interface also I may suffer from a severe case of NIH syndrome This code was based off of unite todo https github com kannokanno unite todo That tool provides a pretty good simple task system for inside vim I used it for a bit but also needed something for use outside vim taskwarrior does that but I prefer a simpler interface much of the time Requirements unite https github com Shougo unite vim vimproc https github com Shougo vimproc vim taskwarrior Taskwarrior should be configured to not prompt for stuff I use echo command yes verbose no confirmation no I ve only tested this with version 2 4 0 Installing Use a plugin manager I like NeoBundle https github com Shougo neobundle vim Other options are Vim Plug https github com junegunn vim plug Vim Pathogen https github com tpope vim pathogen Vundle https github com gmarik Vundle vim For NeoBundle add vim NeoBundle blakesweeney unite taskwarrior to your vimrc Screenshots Add some Usage This is a general overview of the functionality here for details about this see the docs in doc unite taskwarrior txt This doesn t come with any key bindings added by default you should add your own as needed Some useful configuration is vim vimrc NeoBundle blakesweeney unite taskwarrior call unite custom source taskwarrior matchers matcher_fuzzy call unite custom source taskwarrior sorters sorter_rank nnoremap silent Leader T Unite taskwarrior winheight 50 CR nnoremap Leader Ta UniteTaskWarriorAdd CR vnoremap silent Leader Ta B UniteTaskWarriorAdd CR nnoremap silent Leader Tp Unite taskwarrior tags vertical winwidth 40 ftplugin unite vim inoremap silent buffer expr C t unite do_action edit_tag nnoremap silent buffer expr C t unite do_action edit_tag inoremap silent buffer expr C v unite do_action vsplit nnoremap silent buffer expr C v unite do_action vsplit The B is from vis vim http vim sourceforge net scripts script php script_id 1195 which makes visual commands apply only the selected text not the whole line I highly recommend it as well In ftplugin unite vim I use vim nnoremap C t call unite do_action edit_tag Commands vim Unite taskwarrior Show all tasks not marked as deleted Unite taskwarrior proj Show all tasks for the given project Unite taskwarrior tag Show all tasks with the given tag Unite taskwarrior tag other tag Show all tasks with tag and other tag Unite taskwarrior tags Show a tag listing Unite taskwarrior projects Show a project listing UniteTaskwarriorAdd Add a task The taskwarrior tags and taskwarrior projects sources generally produce long and narrow output For these it s useful to open them with vertical and winwidth to create nice vertical mapping In the mappings above there is an example of doing this for projects Project list actions open Show all tasks for the given project This can be run on several projects rename Rename the project Tag list actions open Show all tasks with the given tag This can be run on several tags rename Rename the tag Task list actions do Complete this task Can be used on several selected tasks delete Delete the the task Can be used on several selected tasks By default is called by d edit Will edit the description of task By default is called by e edit_tags Will edit the tags Can be used on several tasks edit_proj Edit the project of the current task Can be used on several tasks open Will open a notes file for the task By default is called by o preview Will preview the notes file By default is called by p similar Show all similar tasks TODO Implement me toggle Will toggle the task status This is the default action By default is called by CR This will toggle between pending and completed Can be used on several selected tasks view Provide a detailed view of the task Keybindings There are some very experimental keybindings which are only available when using the taskwarrior source These can be activated by adding vim let g unite_taskwarrior_define_mappings 1 to your vimrc This provides the following normal mode mappings vim nnoremap silent buffer expr TAB unite do_action toggle nnoremap silent buffer expr CR unite do_action view nnoremap silent buffer expr d unite do_action do nnoremap silent buffer expr D unite do_action delete nnoremap silent buffer expr P unite do_action edit_proj nnoremap silent buffer expr A unite do_action annotate nnoremap silent buffer expr m unite do_action modify nnoremap silent buffer expr e unite do_action edit nnoremap silent buffer expr unite do_action start nnoremap silent buffer expr unite do_action stop There are examples in unite vim s help of how to add other keybindings If you want to add other bindings specific to a source you ll need to modify it with the example at https github com Shougo unite vim issues 924 Notes files This provides some simple tasknote functionality In the list of tasks you can open a file for a task using o by default This will be created with the description of the task You can modify and save this file and re open it later In some cases it s better to open the notes in a vsplit Above in the mappings section there is a nnoremap silent buffer expr C v unite do_action vsplit which opens a note in a vertical split Running tests First install the required packages with vim flavor kana vim flavor You should only need to do run install to install everything needed Then compile vimproc with sh cd vim flavor deps Shougo_vimproc vim make f make_mac mak If you have a mac If you don t have mac you ll have to choose the correct make file If run install doesn t install everything then install vim flavor with bundler and use vim flavor to install vim vspec You can then run tests by doing run test The script makes sure we use the correct task configuration and data directory taskwarrior http taskwarrior org",
    "compatibility": "2.4.1+",
    "description": "A unite.vim interface to taskwarrior"
  },
  {
    "last_update": "2015-12-01",
    "author": [
      "Robin Green (greenrd)"
    ],
    "url_src": "https://github.com/greenrd/taskwarrior-mode",
    "url": "https://github.com/greenrd/taskwarrior-mode",
    "obsolete": false,
    "name": "taskwarrior-mode",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Emacs Lisp"
    ],
    "descriptionText": "Emacs support for Taskwarrior",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "Emacs support for Taskwarrior"
  },
  {
    "last_update": "2015-04-23",
    "author": [
      "Alex Scammon (stackedsax)"
    ],
    "url_src": "https://github.com/stackedsax/taskwarrior_scripts",
    "url": "https://github.com/stackedsax/taskwarrior_scripts",
    "obsolete": false,
    "name": "taskwarrior_scripts",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "A repo for all of my TaskWarrior scripts",
    "category": "Unknown",
    "readme": "TaskWarrior Integrations This is my collection of scripts and workflows and shortcuts which I set up to help me manage my task lists with TaskWarrior Installation TaskWarrior To install task warrior itself I had to run with with gnutls to get task sync to work brew install task with gnutls TaskWarrior Config Contexts I have a couple contexts one for my personal stuff and one for work task show context Config Variable Value context me project me or me context work project Work or work To create run task context define me project me or me TaskWarrior Aliases You ll find mine in task_aliases Add them to yours and adjust as you see fit Outlook Copy files into place cp avp Create New TaskWarrior Task scptd Users whoami Library Application Support Microsoft Office Outlook Script Menu Items Create key binding 1 Open Leyboard System Preferences 2 Go to Shortcuts 3 Go to App Shortcuts 4 Add a new shortcut with the sign 5 Choose Outlook as the application 6 Enter Create New TaskWarrior Task as the Menu Title but without the single quotes 7 Add the key binding which is ctrl Alfred As best as I can figure you d do this 1 Install Alfred 2 Buy the Powerpack can t remember if this is necesarry to run custom workflows or not 3 Double click the TaskWarrior alfredworkflow file inthe am 1 Sign up 2 Follow the sync instructions 3 Add the sync settings to your taskrc file Twilio 1 Sign up 2 Get a number 3 Folw the inthe am instuctions",
    "compatibility": "2.4.1+",
    "description": "A repo for all of my TaskWarrior scripts"
  },
  {
    "last_update": "2016-03-08",
    "author": [
      "David Badura (DavidBadura)",
      "Tobias Olry (tolry)"
    ],
    "url_src": "https://github.com/DavidBadura/doThings",
    "url": "https://github.com/DavidBadura/doThings",
    "obsolete": false,
    "name": "doThings",
    "theme": [
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [
      "PHP"
    ],
    "descriptionText": "[ALPHA] with the power of taskwarrior! (web ui for taskwarrior)",
    "category": "Unknown",
    "readme": "doThings with the power of taskwarrior Demo Key Value Url http demo dothings david badura de Username dothings Password dothings List list docs list png Info info docs info png Mobile mobil docs mobile png Installation composer install npm install",
    "compatibility": "2.4.1+",
    "description": "[ALPHA] with the power of taskwarrior! (web ui for taskwarrior)"
  },
  {
    "last_update": "2015-11-08",
    "author": [
      "kostajh"
    ],
    "url_src": "https://github.com/kostajh/task-git",
    "url": "https://github.com/kostajh/task-git",
    "obsolete": false,
    "name": "task-git",
    "theme": [
      "Git"
    ],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Backup Taskwarrior database to a git repository",
    "category": "Unknown",
    "readme": "task git sh task git sh is a wrapper around Taskwarrior s task that places the task database in version control and generates commits each time the task database is altered Usage 1 Navigate to your Taskwarrior data directory usually in task and type git init If you plan to push to a remote go ahead and add your remote now 2 Add alias task path to task git task git sh to your bashrc or profile If you want to push to a remote then the alias should be alias task path to task git task git sh task git push Make sure you source the bashrc or profile 3 Run chmod x path to task git task git sh 4 Use task as normal when run the Taskwarrior database files will be committed to version control It is recommended to use the Taskwarrior database only on one machine as you will be resolving conflicts if using the same task database on multiple machines License task git sh Copyright C 2013 Kosta Harlan This program is free software you can redistribute it and or modify it under the terms of the GNU General Public License as published by the Free Software Foundation either version 3 of the License or at your option any later version This program is distributed in the hope that it will be useful but WITHOUT ANY WARRANTY without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU General Public License for more details You should have received a copy of the GNU General Public License along with this program If not see http www gnu org licenses",
    "compatibility": "2.4.1+",
    "description": "Backup Taskwarrior database to a git repository"
  },
  {
    "last_update": "2015-12-01",
    "author": [
      "Nicholas E. Rabenau (nerab)"
    ],
    "url_src": "https://github.com/nerab/TaskWarriorMail",
    "url": "https://github.com/nerab/TaskWarriorMail",
    "obsolete": false,
    "name": "TaskWarriorMail",
    "theme": [
      "Mail"
    ],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "twmail allows you to mail new tasks to your TaskWarrior inbox",
    "category": "Unknown",
    "readme": "twmail twmail allows you to mail new tasks to your TaskWarrior inbox Installation gem install twmail Usage 1 Install ruby and this gem 1 If you don t have a fetchmailrc yet copy doc fetchmailrc sample to fetchmailrc 1 Edit fetchmailrc and adjust mail account settings the example was made for Google Mail account If in doubt consult the fetchmail documentation e g by executing man fetchmailconf in a terminal Motivation I would like to add new tasks to my TaskWarrior inbox from remote places where I don t have immediate access to my personal TaskWarrior database e g from my iPhone from work where I don t have access to my personal TaskWarrior installation or from another computer Using eMail for this looks like a great candidate 1 I don t want to or cannot install TaskWarrior on all the places and machines where I would like to add tasks from Sending a note as eMail is pretty much universally available 1 Many applications were not made for integration with TaskWarrior But even the dumbest iPhone app can forward text or a URL via eMail 1 eMail is asynchronous by design fire and forget Even if disconnected from the net I can send eMail and the system will deliver it on the very next occassion What is missing from a TaskWarrior perspective right now is a way to add these mails to a TaskWarrior installation automatically Architecture The simplest solution I could come up with is this 1 A dedicated email account is used to collect the tasks 1 A script that imports all eMails as new tasks As a prerequisite TaskWarrior is assumed to be installed and configured With this architecture in place the functionality is rather simple to implement For each mail Transaction Fetch mail from mailbox Store mail as new task in Taskwarrior Delete mail from mailbox As the word Transaction implies the whole operation needs to be atomic per mail No task must be added if fetching a mail went wrong and no mail must be deleted if storing the task in TaskWarrior failed The solution presented here maintains a one to one relation between the INBOX of an mail account and the TaskWarrior database Components Mail fetching is done with fetchmail a proven solution available on all major Unices incl MacOS It will be configured to use the twmail script as a mail delivery agent mda which means nothing more than that fetchmail fetches the mail from the configured account and hands it over to our script There is no further storage of the received mails except in TaskWarrior Error Handling If our MDA returns non zero fetchmail will not assume the message to be processed and it will try again Alternatives One might think of more elaborate applications that do more clever things but I wanted to create this solution with as few external dependencies as possible fetchmail is available on all Unices and who can afford to live without TaskWarrior anyway I also played with the thought of a central tasks server that receives mail from services like CloudMailIn and auto adds them to the server but the result would not be much different besides being more complex to the solution presented here No task will be fetched into TaskWarrior until the machine with the TaskWarrior database is online Another alternative would be to convert the email to JSON and use TaskWarrior s import command This would allow to create and annotate a new task in one step without the bin task uuid workaround Advanced Usage Filtering and Routing Many more advanced use cases like filtering and routing can be implemented on the mail server side There are plenty of user interfaces for routing eMails based on their subject sender body text etc The simplest way to integrate these features with twmail is to use IMAP folders After all filtering and routing each eMail must end up in a dedicated IMAP folder by default all tasks are fetched from the INBOX folder twmail can then be configured to do different things depending on which IMAP folder a mail came from As an example here is a simple way to route eMails to different projects in TaskWarrior based on their subject line 1 Set up a dedicated IMAP folder for every project you work on e g Build Bikeshed Reading List Get Rich Fast 1 Configure the mail server to move every mail from INBOX to the 1 Build Bikeshed folder if the mail subject contains project Bikeshed 1 Reading List folder if the mail subject contains project Reading 1 Get Rich Fast folder if the mail subject contains project GetRichFast 1 Tell twmail to fetch mails from the Build Bikeshed Reading List and Get Rich Fast IMAP folders in addition to the INBOX The approach chosen for twmail also addresses SPAM filtering Handling that remains the responsibility of the mail server Anything that makes it to the INBOX is treated as task Hooks twmail comes with an advanced implementation that supports hooks This makes handling incoming mail very simple for someone familiar with shell scripting and there is no need to edit the twmail scripts in order to customize its behavior When fetchmail is configured to use twmail hook instead of twmail the script will call the twmail hook command must be in the user s PATH Within the hook script the fields of the parsed email are available as environment variables TWMAIL_DATE TWMAIL_MESSAGE_ID TWMAIL_FROM TWMAIL_TO TWMAIL_SUBJECT TWMAIL_BODY Have a look at test helpers test_hook for a very simple implementation If you prefer a hook with a different name specify it in the TWMAIL_HOOK environment variable in your fetchmailrc For example if your home directory contains a script called taskwarrior import sh edit the mda line to look like this mda TWMAIL_HOOK taskwarrior import sh twmail hook Housekeeping By default fetchmail will mark retrieved messages as read but leave them on the server For housekeeping purposes it may be desirable to delete messages from the server once they were successfully imported into TaskWarrior There are two ways to achieve this 1 Create a filter on the server side that deletes all read mail to a dedicated folder perhaps Archive or Trash or simply deletes it 1 Run fetchmail with the nokeep option which will delete retrieved messages from the server Which option to choose depends on the capabilities of your mail server Google Mail cannot handle mails based on their read status and on your level of trust in twmail I recommend leaving mails on the server until you are confident that everything works as expected Testing twmail comes with a basic set of tests Execute them by running rake in the cloned source repo",
    "compatibility": "2.4.1+",
    "description": "twmail allows you to mail new tasks to your TaskWarrior inbox"
  },
  {
    "last_update": "2015-07-30",
    "author": [
      "Jeremiah Marks (jeremiahmarks)",
      "j0n3"
    ],
    "url_src": "https://github.com/jeremiahmarks/taskdsetup",
    "url": "https://github.com/jeremiahmarks/taskdsetup",
    "obsolete": false,
    "name": "taskdsetup",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "A collection of scripts to ease setting up taskwarrior, taskserver, and mirakel",
    "category": "Unknown",
    "readme": "This project is intended to provide a script and various files that are useful when installing taskwarrior http taskwarrior org and taskserver and using mirakel http mirakel azapps de to keep your tasks in sync on your android device",
    "compatibility": "2.4.1+",
    "description": "A collection of scripts to ease setting up taskwarrior, taskserver, and mirakel"
  },
  {
    "last_update": "2015-10-06",
    "author": [
      "Adam Coddington (coddingtonbear)"
    ],
    "url_src": "https://github.com/coddingtonbear/taskwarrior-timebook-hook",
    "url": "https://github.com/coddingtonbear/taskwarrior-timebook-hook",
    "obsolete": false,
    "name": "taskwarrior-timebook-hook",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Log your Taskwarrior tasks to Timebook",
    "category": "Unknown",
    "readme": "Taskwarrior Timebook Hook Install using pip pip install taskwarrior timebook hook And add it to your Taskwarrior hooks mkdir p task hooks ln s which taskwarrior_timebook_hook task hooks on modify timebook Use task TASK ID start and task TASK ID stop to record when you have started and stopped working on tasks Tasks will appear in your Timebook https github com coddingtonbear timebook _ automatically",
    "compatibility": "2.4.1+",
    "description": "Log your Taskwarrior tasks to Timebook"
  },
  {
    "last_update": "2016-02-22",
    "author": [
      "keigezellig"
    ],
    "url_src": "https://github.com/keigezellig/kanbanwarrior",
    "url": "https://github.com/keigezellig/kanbanwarrior",
    "obsolete": false,
    "name": "kanbanwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "A python script supporting my kanban workflow for taskwarrior",
    "category": "Unknown",
    "readme": "kanbanwarrior A python script supporting my kanban workflow for Task Warrior For more info about the workflow itself see http keigezellig blog com 2013 03 07 kanban warrior Installation Make sure Python 2 7 3 or higher is installed see http wiki python org moin BeginnersGuide Download Make sure Taskwarrior 2 1 2 or higher is installed see http taskwarrior org projects taskwarrior wiki Download Download the scripts by cloning this repository if you have a git client or click the link above to download it as an archive Unzip or copy the downloaded files to a directory of your choice preferably on your path optional Set execute bit of the main kanban warrior py script by executing chmod kanban warrior py u x if you don t want to type python everytime when you execute a command Setting up TaskWarrior task config journal time on task config dateformat annotation d m Y H N task config dateformat d m Y H N task config dateformat report d m Y H N task config dateformat edit d m Y H N task config dateformat info d m Y H N task config xterm title on Of course you can use another date format if you want by replacing the d m Y See the Task Warrior website for more information about this Short usage summary Commands Add task to backlog b kanban warrior addtobacklog projectname storyname taskdescription priority b Add task to In Progress b kanban warrior addtowip taskid b Start task kanban warrior b start taskid b Stop task kanban warrior b stop taskid b Set task on hold b kanban warrior hold taskid reason b Finish a task b kanban warrior finish taskid b Reports List backlog b b kanban warrior list backlog projectname b List work in progress b b kanban warriot list wip projectname b List finished work b b kanban warrior list done projectname b List work in progress b b kanban warrior list onhold projectname b",
    "compatibility": "2.4.1+",
    "description": "A python script supporting my kanban workflow for taskwarrior"
  },
  {
    "last_update": "2015-03-12",
    "author": [
      "kostajh"
    ],
    "url_src": "https://github.com/kostajh/taskwarrior-time-report",
    "url": "https://github.com/kostajh/taskwarrior-time-report",
    "obsolete": false,
    "name": "taskwarrior-time-report",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Time reports on tasks in Taskwarrior",
    "category": "Unknown",
    "readme": "Taskwarrior Time Report This utility allows you to generate time reports of your tasks in Taskwarrior This assuming that you store the total active time in a UDA called actual of the duration type Usage taskwarrior_time_report start 2014 09 01 end 2014 09 30 taskwarrior_time_report today Clone this repo then install using pip pip install e path to taskwarrior time report",
    "compatibility": "2.4.1+",
    "description": "Time reports on tasks in Taskwarrior"
  },
  {
    "last_update": "2016-04-03",
    "author": [
      "sylvain garaud (sgaraud)"
    ],
    "url_src": "https://github.com/sgaraud/gnome-extension-taskwarrior",
    "url": "https://github.com/sgaraud/gnome-extension-taskwarrior",
    "obsolete": false,
    "name": "gnome-extension-taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "gnome shell extension for integration of taskwarrior",
    "category": "Unknown",
    "readme": "Taskwarrior access from GNOME Shell This GNOME shell extension is enabling access to Taskwarrior https taskwarrior org from the gnome shell taskbar Supported Taskwarrior Features Display pending tasks list default by urgency Display extended tasks data due date project priority and tags Add new tasks Mark tasks as done Delete tasks Start Stop tasks Modify task attributes Filter pending task list on projects tags etc Upcoming Features Customization through preferences menu More keybindings Constant menu width Screenshots taskwarrior gnome shell extension taskwarrior gnome shell extension 01 taskwarriorgnomeshell1 png raw true taskwarrior gnome shell extension taskwarrior gnome shell extension 02 taskwarriorgnomeshell2 png raw true taskwarrior gnome shell extension taskwarrior gnome shell extension 03 taskwarriorgnomeshell3 png raw true taskwarrior gnome shell extension Usage The usage is similar to taskwarrior command line syntax without the need to the task id cmd prefix To add a task just enter the description and extra attributes if needed inside the Add task field For instance Edit extension usage in github README prio H due today gnome It will add a task with description Edit extension usage in github README priority H tag gnome and due date set to today The pending task list can be filtered using the Add filter field The filter field is persistent For instance for filtering all the task belonging to a specific project gnome extension proj gnome extension When the task is done simply click on done button The task can be started and stopped if fitting your workflow By clicking on the description a submenu will be displayed allowing to delete or modify that specific task For instance to modify the due date to next monday click on modify button and enter in the modal window due monday The extension was developped primarily to support my own TODO workflow trying to keep the unobtrusive quality of taskwarrior Any improvement idea is welcome Installation From gnome extensions website The extension is available from the extensions gnome org website Visit the following link for instructions https extensions gnome org extension 1052 taskwarrior integration From source The extension can be installed directly from source either for the convenience of using git or to test the latest version Clone the desire branch with git git clone https github com sgaraud gnome extension taskwarrior git local share gnome shell extensions taskwarrior integration sgaraud github com A Shell reload is required code Alt F2 r Enter code and extension has to be enabled with gnome tweak tool Configuration Configuration option currently available with gnome tweak tool taskwarrior gnome shell extension preferences taskwarrior gnome shell extension preferences taskwarriorgnomeshellprefs01 png raw true taskwarrior gnome shell extension preferences Dependencies Taskwarrior V2 3 0 or higher exclamation Make sure Taskwarrior https taskwarrior org download is installed on your system Bug Reporting sweat_smile Bugs should be reported to the Github bug tracker issues https github com sgaraud gnome extension taskwarrior issues Author sgaraud Sylvain Garaud License Copyright C 2016 Sylvain Garaud This program is free software you can redistribute it and or modify it under the terms of the GNU General Public License as published by the Free Software Foundation either version 2 of the License or at your option any later version This program is distributed in the hope that it will be useful but WITHOUT ANY WARRANTY without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU General Public License for more details You should have received a copy of the GNU General Public License along with this program If not see http www gnu org licenses",
    "compatibility": "2.4.1+",
    "description": "gnome shell extension for integration of taskwarrior"
  },
  {
    "last_update": "2016-02-18",
    "author": [
      "Rafal (robin92)",
      "Micha\u0142 G\u00f3ral (mgoral)",
      "illa"
    ],
    "url_src": "https://github.com/robin92/tw4a",
    "url": "https://github.com/robin92/tw4a",
    "obsolete": false,
    "name": "tw4a",
    "theme": [
      "Android"
    ],
    "verified": "2016-04-24",
    "language": [
      "Java"
    ],
    "descriptionText": "taskwarrior for android",
    "category": "Unknown",
    "readme": "tw4a Build Status https travis ci org robin92 tw4a svg branch master https travis ci org robin92 tw4a Coverage Status https coveralls io repos robin92 tw4a badge svg branch master service github https coveralls io github robin92 tw4a branch master tw4a is Taskwarrior tw client for Android Under the hood it uses original Taskwarrior executable taken from the Termux termux project making it a convienient Taskwarrior wrapper for Android users Installation The easiest way to install tw4a is by downloading a compiled apk from a release releases page If you want to try out bleeding edge features you can build it by yourself To do so please refer to build instructions build wiki in our wiki wiki License tw4a is released under MIT license For details see LICENSE license tw http taskwarrior org termux https termux com releases https github com robin92 tw4a releases wiki https github com robin92 tw4a wiki build wiki https github com robin92 tw4a wiki Building the project license LICENSE",
    "compatibility": "2.4.1+",
    "description": "taskwarrior for android"
  },
  {
    "last_update": "2015-05-28",
    "author": [
      "Tomas Babej (tbabej)",
      "Joseph Method (tristil)"
    ],
    "url_src": "https://github.com/tbabej/taskpirate",
    "url": "https://github.com/tbabej/taskpirate",
    "obsolete": false,
    "name": "taskpirate",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "A pluggable system for tasklib based TaskWarrior hooks. Faster, less boilerplate code!",
    "category": "Unknown",
    "readme": "Taskpirate Taskpirate is a pluggable system for TaskWarrior python hooks Why Simpler hooks def hook_example task task description changed by a hook The above is fully working example no more boilerplate needed Much faster execution time in case of multiple hooks read the more details section Install You ll need tasklib as a dependency pip install user git git github com tbabej tasklib develop Then you need to drop on add pirate and on modify pirate into task hooks After that you can just clone any taskpirate enabled hook as a subfolder into task hooks git clone https github com tbabej task default date time task hooks default date time How to write a taskpirate hook In your hook s repository any file matching pirate_add py will be searched for hooks in on add event In the same sense any file matching pirate_mod py will be searched for hooks in on modify event Now the pirate_add_example py might look as follows def hook_example task task description changed by a hook Any function in pirate_add_example that is called hook_ will be considered as a hook in on add event It will be passed the Task object corresponding to the current state of the task being added as modified by the previous hooks More details TaskWarrior hooks are intended to be simple but they involve writing some boilerplate code parsing formatting json To allow users to write dead simple code they can leverage tasklib Using tasklib simplifies things a lot however it s not a super lightweight usage of tasklib can slow down the hook by as much as 30 50ms usual python hook can probably run in under 40ms since it imports multiple libraries This becomes a problem when user has multiple tasklib based hooks since the import time adds up Also note that taskpirate with arbitrary number of hooks will be most likely faster than 2 3 regular python hooks Example hooks You can look into my task default date time or task shift recurrence hooks",
    "compatibility": "2.4.1+",
    "description": "A pluggable system for tasklib based TaskWarrior hooks. Faster, less boilerplate code!"
  },
  {
    "last_update": "2015-02-14",
    "author": [
      "Silumesii Maboshe (smaboshe)"
    ],
    "url_src": "https://github.com/smaboshe/taskwarrior-backup",
    "url": "https://github.com/smaboshe/taskwarrior-backup",
    "obsolete": false,
    "name": "taskwarrior-backup",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "A script to backup Taskwarrior tasks.",
    "category": "Unknown",
    "readme": "",
    "compatibility": "2.4.1+",
    "description": "A script to backup Taskwarrior tasks."
  },
  {
    "last_update": "2015-05-27",
    "author": [
      "Jochen Keil (jotrk)"
    ],
    "url_src": "https://github.com/jotrk/etc.taskwarrior",
    "url": "https://github.com/jotrk/etc.taskwarrior",
    "obsolete": false,
    "name": "etc.taskwarrior",
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": ""
  },
  {
    "last_update": "2015-04-26",
    "author": [
      "Johannes Wienke (languitar)"
    ],
    "url_src": "https://github.com/languitar/taskwarrior-emails",
    "url": "https://github.com/languitar/taskwarrior-emails",
    "obsolete": false,
    "name": "taskwarrior-emails",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "My minimalistic hack for sending taskwarrior task reminders.",
    "category": "Unknown",
    "readme": "Taskwarrior Email Daemon A minimalistic script to put into a user s crontab for sending out emails of open Taskwarrior tasks Usage Call send open tasks sh at the desired interval in your crontab Per default the current user is used as the email recipient A different recipient address can be given as the first command line argument Taskwarrior http taskwarrior org",
    "compatibility": "2.4.1+",
    "description": "My minimalistic hack for sending taskwarrior task reminders."
  },
  {
    "last_update": "2015-09-09",
    "author": [
      "Alan Young (harleypig)"
    ],
    "url_src": "https://github.com/harleypig/perl-taskwarrior",
    "url": "https://github.com/harleypig/perl-taskwarrior",
    "obsolete": false,
    "name": "perl-taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Perl"
    ],
    "descriptionText": "A perl package for interacting with the Taskwarrior ( http://taskwarrior.com ) to-do application.",
    "category": "Unknown",
    "readme": "SYNOPSIS use Taskwarrior qw all DESCRIPTION This is the main module for the Taskwarrior project All modules in the Taskwarrior namespace should use this module Using Taskwarrior is equivalent to the following code use strict use warnings use feature qw say state This module also exports a number of utility methods that make logging easier a dumper method that uses Data Dumper and the Carp https metacpan org pod Carp methods carp and croak are exported Additionally a task execute method is exported that handles calls to the task executable EXPORT This module does not export anything automatically When all is included in the use line see SYNOPSIS the following methods are exported into the calling codes namespace alert carp critical croak debug dumper emergency error info notice task warning See the description for each method for details I don t know why but including just a specific method e g use Taskwarrior qw alert does not work You will have to use all until this issue is resolved SUBROUTINES AND METHODS import This method is not exported import is called when use Taskwarrior is invoked This is equivalent to the following code use utf8 use strict use warnings use feature qw say state unimport This method is not exported unimport is called when no Taskwarrior is invoked This is equivalent to the following code no utf8 no strict no warnings no feature task This method is exported task takes whatever is passed to it and calls the task executable with those parameters and returns the raw results to the caller No validation is performed The caller is expected to handle any errors reported by the task executable You can pass either a reference to an array or a list my task_parms qw pro personal _ids task task_parms or task qw pro personal _ids dumper This method is exported dumper is equivalent to the following code Dumper somevariable logmsg This method is not exported If the value sent to logmsg is a scalar logmsg figures out some basic information about the environment of the calling code and prepends it to the msg being sent to the log E g the code debug Some debugging message will send something like the following to the log file Package Name method Some debugging message If the value sent to logmsg is a reference then dumper will be used to dump the contents of the variable The subroutine name will not be prefixed logmsg accepts multiple values The following is valid debug Debugging FooBar somehash This will send something like the following to the log Package Name method Debugging FooBar VAR1 key value debug info notice warning error critical alert emergency These are the various log levels",
    "compatibility": "2.4.1+",
    "description": "A perl package for interacting with the Taskwarrior ( http://taskwarrior.com ) to-do application."
  },
  {
    "last_update": "2016-04-21",
    "author": [
      "Sujeevan Vijayakumaran (svijee)"
    ],
    "url_src": "https://github.com/svijee/taskwarrior-snap",
    "url": "https://github.com/svijee/taskwarrior-snap",
    "obsolete": false,
    "name": "taskwarrior-snap",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Snap for taskwarrior",
    "category": "Unknown",
    "readme": "taskwarrior snap Snap for taskwarrior",
    "compatibility": "2.4.1+",
    "description": "Snap for taskwarrior"
  },
  {
    "last_update": "2013-12-21",
    "author": [
      "Justin Hammond (roaet)"
    ],
    "url_src": "https://github.com/roaet/dot-taskwarrior",
    "url": "https://github.com/roaet/dot-taskwarrior",
    "obsolete": false,
    "name": "dot-taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "My task warrior config",
    "category": "Unknown",
    "readme": "dot taskwarrior My task warrior config",
    "compatibility": "2.4.1+",
    "description": "My task warrior config"
  },
  {
    "last_update": "2014-05-30",
    "author": [],
    "url_src": "https://github.com/liambrownweb/taskwarrior-tray",
    "url": "https://github.com/liambrownweb/taskwarrior-tray",
    "obsolete": false,
    "name": "taskwarrior-tray",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Python-based tray icon for Taskwarrior. It does dead-simple quick entry for now, probably other things later.",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "Python-based tray icon for Taskwarrior. It does dead-simple quick entry for now, probably other things later."
  },
  {
    "last_update": "2014-09-22",
    "author": [
      "eviltester"
    ],
    "url_src": "https://github.com/eviltester/blackopstesting_taskwarrior",
    "url": "https://github.com/eviltester/blackopstesting_taskwarrior",
    "obsolete": false,
    "name": "blackopstesting_taskwarrior",
    "theme": [
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Exploratory testing notes for the Black Ops Testing Webinar for TaskWarrior on 22nd September 2014",
    "category": "Unknown",
    "readme": "Black Ops Testing Taskwarrior Webinar Alan Richardson s exploratory testing notes compendiumdev co uk http www compendiumdev co uk eviltester com http www eviltester com seleniumsimplified com http www seleniumsimplified com javafortesters com http www javafortesters com Exploratory testing notes for the Black Ops Testing Webinar for TaskWarrior on 22nd September 2014 http blackopstesting com For this Webinar we were testing TaskWarrior http taskwarrior org You will see My notes which I made in Google Docs in the pdf in the root extracts from taskwarrior in the data directory screenshots of the working environment in images earlyMacTesting has a dump of early testing that I was going to investigate the main log files of the session as history dumps or other in the txt files This should act as a supplement when you watch the webinar and hopefully as a standalone example of some exploratory testing and learning documentation approaches",
    "compatibility": "2.4.1+",
    "description": "Exploratory testing notes for the Black Ops Testing Webinar for TaskWarrior on 22nd September 2014"
  },
  {
    "last_update": "2015-05-06",
    "author": [
      "Brutus (brutus)"
    ],
    "url_src": "https://github.com/brutus/taskwarrior-local",
    "url": "https://github.com/brutus/taskwarrior-local",
    "obsolete": false,
    "name": "taskwarrior-local",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "A set of shell functions to use TASKWARRIOR with a directory local DB.",
    "category": "Unknown",
    "readme": "Taskwarrior Local A set of shell functions to use a directory local Taskwarrior DB instead of the global one Usage Source the script from your shell or bashrc bash_aliases or similar The script provides two functions commands mktaskdb Creates a task directory for the DB and a taskrc file that points to it both in the local directory and only if they don t exists already local task alias ltask and lt Use this exaclty like the normal task command The difference is that if a taskrc exists in the current directory it is used instead of the global Taskwarrior DB Taskwarrior http taskwarrior org",
    "compatibility": "2.4.1+",
    "description": "A set of shell functions to use TASKWARRIOR with a directory local DB."
  },
  {
    "last_update": "2015-04-27",
    "author": [
      "Nikola Petrov (nikolavp)"
    ],
    "url_src": "https://github.com/nikolavp/taskwarrior-utils",
    "url": "https://github.com/nikolavp/taskwarrior-utils",
    "obsolete": false,
    "name": "taskwarrior-utils",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Automatically exported from code.google.com/p/taskwarrior-utils",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "Automatically exported from code.google.com/p/taskwarrior-utils"
  },
  {
    "last_update": "2015-04-23",
    "author": [],
    "url_src": "https://github.com/mekanix/taskwarrior-curses",
    "url": "https://github.com/mekanix/taskwarrior-curses",
    "obsolete": false,
    "name": "taskwarrior-curses",
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "",
    "category": "Unknown",
    "readme": "taskwarrior curses",
    "compatibility": "2.4.1+",
    "description": ""
  },
  {
    "last_update": "2016-03-28",
    "author": [
      "Philip Douglass (philipsd6)"
    ],
    "url_src": "https://github.com/philipsd6/fpm-taskwarrior",
    "url": "https://github.com/philipsd6/fpm-taskwarrior",
    "obsolete": false,
    "name": "fpm-taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Makefile"
    ],
    "descriptionText": "Build Taskwarrior client from a Makefile using FPM",
    "category": "Unknown",
    "readme": "fpm taskwarrior Build Taskwarrior client from a Makefile using FPM As simple as console make make install Developed on Ubuntu but should also support building on RedHat based systems as well",
    "compatibility": "2.4.1+",
    "description": "Build Taskwarrior client from a Makefile using FPM"
  },
  {
    "last_update": "2016-02-21",
    "author": [
      "Paul Beckingham (pbeckingham)",
      "Renato Alves (Unode)",
      "Federico Hernandez (recollir)",
      "Tomas Babej (tbabej)",
      "wbsch",
      "Johannes S. (ValiValpas)",
      "Scott Kostyshak (scottkosty)",
      "elliot-forty-two",
      "Fidel Mato (nocejo)",
      "Daniel Shahaf (danielshahaf)",
      "Haitham Gad (hgad)",
      "Pietro Cerutti (gahr)",
      "Ben Boeckel (mathstuf)",
      "kraai",
      "Jeremy John Reeder (jeremyjohnreeder)",
      "Ralph Bean (ralphbean)",
      "Rainer M\u00fcller (raimue)",
      "P.C. Shyamshankar (sykora)",
      "drednout",
      "Uli Martens (youam)",
      "russells",
      "Ivan \u010cuki\u0107 (ivan-cukic)",
      "Leo Wzukw (leowzukw)",
      "Alexander Sulfrian (AlexanderS)",
      "steverader",
      "Thomas (sullivant)",
      "lolilolicon",
      "taskwarrior (taskwarrior)",
      "Bryce Harrington (bryceharrington)",
      "Dirk Deimeke (ddeimeke)",
      "Alan Young (harleypig)",
      "Jakub Wilk (jwilk)",
      "Jochen Sprickerhof (jspricke)",
      "Martin Natano (natano)",
      "Roman Inflianskas (rominf)",
      "atomicules (atomicules)",
      "Christopher J. Pilkington (cjp)",
      "Ben Armstrong (synrg)",
      "Andy Lester (petdance)",
      "hikhvar",
      "Dan White AD0CQ (etihwnad)",
      "Elias Probst (eliasp)",
      "Fr\u00e9d\u00e9ric Mangano (fmang)",
      "hito (fumihito)",
      "Jens Erat (JensErat)",
      "Johannes Wienke (languitar)",
      "Justin Forest (umonkey)",
      "Luke Macken (lmacken)",
      "Martin Klepsch (martinklepsch)",
      "Marton Suranyi (susu)",
      "Michal Vyskocil (mvyskocil)",
      "Mick Koch (kchmck)",
      "Natanael Copa (ncopa)",
      "Nicals (Nicals)",
      "Vincent Petithory (vincent-petithory)",
      "Rafal (robin92)",
      "\u0141ukasz Panek (pancurster)"
    ],
    "url_src": "https://github.com/ivan-cukic/taskwarrior-fork",
    "url": "https://github.com/ivan-cukic/taskwarrior-fork",
    "obsolete": false,
    "name": "taskwarrior-fork",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "C++"
    ],
    "descriptionText": "A small drop-in fork of taskwarrior",
    "category": "Unknown",
    "readme": "This is a fork of http taskwarrior org to provide some features not supported by upstream I do not plan to deviate much from the original TW just to add some missing features If these get accepted to upstream this repository will go away Current changes to upstream It allows overriding TW context by specifying TASK_CONTEXT environment variable",
    "compatibility": "2.4.1+",
    "description": "A small drop-in fork of taskwarrior"
  },
  {
    "last_update": "2016-02-22",
    "author": [
      "Ivan \u010cuki\u0107 (ivan-cukic)"
    ],
    "url_src": "https://github.com/ivan-cukic/taskwarrior-evernote",
    "url": "https://github.com/ivan-cukic/taskwarrior-evernote",
    "obsolete": false,
    "name": "taskwarrior-evernote",
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "",
    "category": "Unknown",
    "readme": "Evernote feeder for Taskwarrior Pulls notes from Evernote that have specific tag and adds them to Taskwarrior as tasks You need to set a few UDAs to Taskwarrior for this to work properly uda evernote_url type string uda evernote_url label Evernote URL uda evernote_id type string uda evernote_id label Evernote ID Usage taskwarrior evernote sync Pulls the notes from Evernote taskwarrior evernote sync list tags Lists Evernote tags and their UUIDs taskwarrior evernote sync help This message Configuration options tag_uid UID of the Evernote tag required project Tasks imported from Evernote will have this project set default evernote Requirements You need to set up GeekNote 1 and Taskwarrior 2 properly You need configobj termcolor bs4 and taskw python2 modules",
    "compatibility": "2.4.1+",
    "description": ""
  },
  {
    "last_update": "2016-03-03",
    "author": [
      "W. S. Wellington (thewellington)"
    ],
    "url_src": "https://github.com/thewellington/taskwarrior.widget",
    "url": "https://github.com/thewellington/taskwarrior.widget",
    "obsolete": false,
    "name": "taskwarrior.widget",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "CoffeeScript"
    ],
    "descriptionText": "A taskwarrior widget for Ubersicht",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "A taskwarrior widget for Ubersicht"
  },
  {
    "last_update": "2015-02-16",
    "author": [
      "Adam Coddington (coddingtonbear)"
    ],
    "url_src": "https://github.com/coddingtonbear/taskwarrior-timecrimes",
    "url": "https://github.com/coddingtonbear/taskwarrior-timecrimes",
    "obsolete": false,
    "name": "taskwarrior-timecrimes",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Travel back in time and undo your duplicate tasks' creation.",
    "category": "Unknown",
    "readme": "Taskwarrior Timecrimes Travel back in time and undo your duplicate tasks creation WARNING This has only barely been tested and although it did work as expected for the use case I wrote it for the command it generates might be incorrect Do read through the prompts carefully and use this at your own risk Installation Install using pip pip install taskwarrior timecrimes Use Just run the following command in a shell taskwarrior_timecrimes You ll be presented with a list of dates having recent changes After selecting the date that you d like the duplicated recurrences to be deleted from the command you can run to delete those tasks will be generated and printed to the console so you can run it yourself",
    "compatibility": "2.4.1+",
    "description": "Travel back in time and undo your duplicate tasks' creation."
  },
  {
    "last_update": "2014-12-30",
    "author": [
      "Anders Engstr\u00f6m (metamorph)"
    ],
    "url_src": "https://github.com/metamorph/taskwarrior-journal",
    "url": "https://github.com/metamorph/taskwarrior-journal",
    "obsolete": false,
    "name": "taskwarrior-journal",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "Extract a journal / diary from TaskWarrior entries",
    "category": "Unknown",
    "readme": "Work In Progress not ready to be used yet taskwarrior journal Extract a journal diary from TaskWarrior entries A silly effort to make the weekly time report easier Lists updated entries for the last week including annotations from the TaskWarrior log in reverse order",
    "compatibility": "2.4.1+",
    "description": "Extract a journal / diary from TaskWarrior entries"
  },
  {
    "last_update": "2015-02-02",
    "author": [
      "Ivan \u010cuki\u0107 (ivan-cukic)"
    ],
    "url_src": "https://github.com/ivan-cukic/taskwarrior-kactivities",
    "url": "https://github.com/ivan-cukic/taskwarrior-kactivities",
    "obsolete": false,
    "name": "taskwarrior-kactivities",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "TaskWarrior wrapper to allow goruping tasks by activity (KDE)",
    "category": "Unknown",
    "readme": "taskwarrior kactivities TaskWarrior wrapper to allow goruping tasks by activity KDE Usage First of all it is advisable to place the script somewhere in your PATH or create a shell alias and rename it to something easier to type than task py My personal preference is to call it just t If you run the command like you would run the regular TaskWarrior it will behave exactly like TaskWarrior apart from filtering the results to show only the tasks for the current activity If you want to give a command that should affect or list all tasks regardless of the activity they belong to you need to pass all as the first argument for the script or just call TaskWarrior directly Shows the tasks for the current activity t Shows all tasks regardless of the activity they belong to t all Creates a new task for the current activity t add Update the README md file Creates a new task for the project inside the current activity t add Update the README md file project TaskWarriorWrapper What does it do The script only modifies the arguments given to it and passes them to the TaskWarrior In essence it just prefixes the project name with the name of the activity if you specify the project name otherwise it uses the activity name as the project name For example if the current activity is called TaskWarrior Development t add Update the README md file becomes task add project taskwarrior_development Update the README md file t add Update the README md file project documentation becomes task add project taskwarrior_development documentation Update the README md file Requirements This script is written in Python 3 It only requires the dbus module to be installed",
    "compatibility": "2.4.1+",
    "description": "TaskWarrior wrapper to allow goruping tasks by activity (KDE)"
  },
  {
    "last_update": "2015-02-17",
    "author": [
      "Jack Laxson (jrabbit)"
    ],
    "url_src": "https://github.com/jrabbit/taskwarrior-debian",
    "url": "https://github.com/jrabbit/taskwarrior-debian",
    "obsolete": false,
    "name": "taskwarrior-debian",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Makefile"
    ],
    "descriptionText": "Debian packaging files for taskwarrior (deprecated)",
    "category": "Unknown",
    "readme": "Sample configs color themes and calendar files have been installed to usr share taskwarrior and can be included in taskrc like this include usr share taskwarrior dark 16 theme Jakub Wilk jwilk debian org",
    "compatibility": "2.4.1+",
    "description": "Debian packaging files for taskwarrior (deprecated)"
  },
  {
    "last_update": "2014-03-14",
    "author": [
      "Aaron Bieber (qbit)"
    ],
    "url_src": "https://github.com/qbit/taskwarrior-vim",
    "url": "https://github.com/qbit/taskwarrior-vim",
    "obsolete": false,
    "name": "taskwarrior-vim",
    "theme": [
      "Vim"
    ],
    "verified": "2016-04-24",
    "language": [
      "VimL"
    ],
    "descriptionText": "task warrior files for vim",
    "category": "Unknown",
    "readme": "Configure VIM for Syntax Highlighting of Taskwarrior Data The task data files pending data completed data and undo data configuration file taskrc as well as edits made via commands like task 1 edit can be color highlighted if you happen to use VIM as your preferred text editor Eventually this will happen automatically in newer versions of VIM but for now you have to do a little bit of file shuffling Prerequisites For this to work you need to first have syntax highlighting enabled when you use VIM This happens to be the default for most VIM installations but it is usually quite simple if that doesn t happen to be so in your case Rather than repeat the excellent VIM documentation here please see the appropriate VIM documentation itself Generally this can be made seen by starting vim gvim and issuing the following command help syntax You may prefer instead to read the help online at http vimdoc sourceforge net htmldoc syntax html syntax Configuring VIM to Understand Taskwarrior Data Once you have VIM s syntax highlighting enabled and working with other file types properly configuring it for use with taskwarrior is simple You simply need to copy some files that came with taskwarrior into your home directory so that you have vim ftdetect task vim vim syntax taskdata vim vim syntax taskedit vim vim syntax taskrc vim The source of these files varies depending on how you installed task If you installed task via a regular package rpm or deb you can find these files in usr share taskwarrior scripts vim If you built task yourself from the tarball using the default configure options these will be in usr local share taskwarrior scripts vim instead So you should be able to do one of the following cp av usr share taskwarrior scripts vim vim or cp av usr local share taskwarrior scripts vim vim You should then be ready to go All four above mentioned files are Copyright 2009 2012 John Florian and are available under the MIT license For the full text of this license see COPYING",
    "compatibility": "2.4.1+",
    "description": "task warrior files for vim"
  },
  {
    "last_update": "2015-06-18",
    "author": [
      "Giulio Eulisse (ktf)"
    ],
    "url_src": "https://github.com/ktf/taskwarrior-solarized",
    "url": "https://github.com/ktf/taskwarrior-solarized",
    "obsolete": false,
    "name": "taskwarrior-solarized",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Solarized theme for task warrior",
    "category": "Unknown",
    "readme": "taskwarrior solarized Solarized theme for task warrior",
    "compatibility": "2.4.1+",
    "description": "Solarized theme for task warrior"
  },
  {
    "last_update": "2015-08-18",
    "author": [
      "Vaclav Pavlin (vpavlin)"
    ],
    "url_src": "https://github.com/vpavlin/taskwarrior-dockerfile",
    "url": "https://github.com/vpavlin/taskwarrior-dockerfile",
    "obsolete": false,
    "name": "taskwarrior-dockerfile",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "A Dockerfile for Taskwarrior container image",
    "category": "Unknown",
    "readme": "Please read my article http vpavlin eu 2015 08 taskwarrior in docker container for more info",
    "compatibility": "2.4.1+",
    "description": "A Dockerfile for Taskwarrior container image"
  },
  {
    "last_update": "2016-01-13",
    "author": [
      "D630 (D630)"
    ],
    "url_src": "https://github.com/D630/taskwarrior-um",
    "url": "https://github.com/D630/taskwarrior-um",
    "obsolete": false,
    "name": "taskwarrior-um",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Use Taskwarrior as simple bookmark manager",
    "category": "Unknown",
    "readme": "README taskwarrior um https github com d630 taskwarrior um is a tiny bash shell wrapper for using the command line todo manager Taskwarrior http taskwarrior org as a simple bookmark manager by defining User Defined Attributes UDAs http taskwarrior org docs udas html BUGS REQUESTS Please feel free to open an issue or put in a pull request on https github com D630 taskwarrior um GIT To download the very latest source code git clone https github com D630 taskwarrior um In order to use the latest tagged version do also something like this cd taskwarrior um git checkout git describe abbrev 0 tags INSTALL Put bin taskum on your PATH and copy doc examples taskumrc to TASKUM_CONFIG USAGE INVOCATION taskum h v n o O m TW_NATIVE ENVIRONMENT VARIABLES TASKUM_CONFIG Default XDG_CONFIG_HOME HOME config taskum taskrc TASKUM_DATA Default XDG_DATA_HOME HOME local share taskum OPTIONS h help v version m use menu Use a menu when adding project and tags Configure it in Taskum AddMenu Defaults are dmenu and slmenu Don t execute taskum via source when using this option n verbose nothing Means task rc verbose nothing o verbose on task rc verbose on O verbose off task rc verbose off EXAMPLES See INFO master doc INFO md NOTICE taskwarrior um has been written in GNU bash http www gnu org software bash on Debian GNU Linux 9 stretch sid https www debian org using these programs packages GNU bash 4 3 42 1 release GNU coreutils 8 23 mkdir sort tr dmenu 4 6 grep GNU grep 2 22 procps ng 3 3 11 ps sed GNU sed 4 2 2 slmenu 0 1 task 2 5 0 LICENCE Copyrights master doc COPYRIGHT GNU GPLv3 master doc LICENCE",
    "compatibility": "2.4.1+",
    "description": "Use Taskwarrior as simple bookmark manager"
  },
  {
    "last_update": "2016-04-06",
    "author": [
      "Alessandro Molari (alem0lars)"
    ],
    "url_src": "https://github.com/alem0lars/configs-taskwarrior",
    "url": "https://github.com/alem0lars/configs-taskwarrior",
    "obsolete": false,
    "name": "configs-taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Taskwarrior configuration (fizzy compliant)",
    "category": "Unknown",
    "readme": "configs taskwarrior TaskWarrior configuration fizzy compliant",
    "compatibility": "2.4.1+",
    "description": "Taskwarrior configuration (fizzy compliant)"
  },
  {
    "last_update": "2016-04-19",
    "author": [
      "Adam Coddington (coddingtonbear)"
    ],
    "url_src": "https://github.com/coddingtonbear/taskwarrior-capsules",
    "url": "https://github.com/coddingtonbear/taskwarrior-capsules",
    "obsolete": false,
    "name": "taskwarrior-capsules",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Plugin framework wrapping taskwarrior",
    "category": "Unknown",
    "readme": "Taskwarrior Capsules The easy plugin framework for Taskwarrior Taskwarrior Capsules allows you to easily extend Taskwarrior functionality to add new commands and other things Docs are available on RTD http taskwarrior capsules readthedocs org _",
    "compatibility": "2.4.1+",
    "description": "Plugin framework wrapping taskwarrior"
  },
  {
    "last_update": "2015-09-11",
    "author": [
      "Paul Beckingham (pbeckingham)",
      "Renato Alves (Unode)",
      "Federico Hernandez (recollir)",
      "Tomas Babej (tbabej)",
      "wbsch",
      "Johannes S. (ValiValpas)",
      "Scott Kostyshak (scottkosty)",
      "elliot-forty-two",
      "Fidel Mato (nocejo)",
      "Daniel Shahaf (danielshahaf)",
      "Haitham Gad (hgad)",
      "Pietro Cerutti (gahr)",
      "Ben Boeckel (mathstuf)",
      "kraai",
      "Jeremy John Reeder (jeremyjohnreeder)",
      "Ralph Bean (ralphbean)",
      "Rainer M\u00fcller (raimue)",
      "P.C. Shyamshankar (sykora)",
      "russells",
      "Uli Martens (youam)",
      "drednout",
      "Leo Wzukw (leowzukw)",
      "Alexander Sulfrian (AlexanderS)",
      "steverader",
      "Thomas (sullivant)",
      "lolilolicon",
      "taskwarrior (taskwarrior)",
      "Dirk Deimeke (ddeimeke)",
      "Bryce Harrington (bryceharrington)",
      "Alan Young (harleypig)",
      "Jakub Wilk (jwilk)",
      "Jochen Sprickerhof (jspricke)",
      "Martin Natano (natano)",
      "Roman Inflianskas (rominf)",
      "atomicules (atomicules)",
      "Christopher J. Pilkington (cjp)",
      "Ben Armstrong (synrg)",
      "Andy Lester (petdance)",
      "hikhvar",
      "Dan White AD0CQ (etihwnad)",
      "Elias Probst (eliasp)",
      "Fr\u00e9d\u00e9ric Mangano (fmang)",
      "hito (fumihito)",
      "Jens Erat (JensErat)",
      "Johannes Wienke (languitar)",
      "Justin Forest (umonkey)",
      "Luke Macken (lmacken)",
      "Martin Klepsch (martinklepsch)",
      "Marton Suranyi (susu)",
      "Michal Vyskocil (mvyskocil)",
      "Mick Koch (kchmck)",
      "Natanael Copa (ncopa)",
      "Nicals (Nicals)",
      "Vincent Petithory (vincent-petithory)",
      "\u0141ukasz Panek (pancurster)"
    ],
    "url_src": "https://github.com/tbabej/task",
    "url": "https://github.com/tbabej/task",
    "obsolete": false,
    "name": "task",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "C++"
    ],
    "descriptionText": "A unconservative fork of taskwarrior/task.",
    "category": "Unknown",
    "readme": "Experimental fork This is an experimental fork of Taskwarrior It indends to offer underground solutions stuff which was not approved or even submitted upstream It also serves as a sandbox for these features to be tested refined and narrowed Features added might not be documented or tested at the quality of the Taskwarrior project Pushing policy To ensure that patches can be still easily submitted upstream this git repository will not be a good citizen To keep the the extra changes on top of current development branch from upstream this branch will be regularly rebased This means you ll need update your copies with git pull force Extra features Extended support for external scripts via task execute The implementation of the execute command has been altered to pass two environment variables to the spawned process TASK_FILTER contains command line part which represents a filter TASK_ARGS contains command line part which represents non filtered arguments This allows you to create neat aliases in the taskrc file Simple example with this you can use task 4 open instead of having to do task open 4 alias open execute taskopen TASK_FILTER More complex example Note at the end which eats the arguments which are passed to this command since they are already passed to the command via TASK_ARGS alias append execute for TASK_ID in task TASK_FILTER _ids do task TASK_ID mod task _get TASK_ID description TASK_ARGS done Parts of original Taskwarrior readme Thank you for taking a look at Taskwarrior Taskwarrior is a GTD todo list task management command line utility with a multitude of features It is a portable well supported and very active Open Source project Taskwarrior has binary distributions online documentation demonstration movies and you ll find all the details at http taskwarrior org At the site you ll find online documentation downloads news and more Your contributions are especially welcome Whether it comes in the form of code patches ideas discussion bug reports encouragement or criticism your input is needed For support options take a look at http taskwarrior org support Please send your code patches to support taskwarrior org Consider joining bug tasktools org answers tasktools org and participating in the future of Taskwarrior Taskwarrior is released under the MIT license For details check the LICENSE file",
    "compatibility": "2.4.1+",
    "description": "A unconservative fork of taskwarrior/task."
  },
  {
    "last_update": "2015-09-09",
    "author": [
      "Fidel Mato (nocejo)"
    ],
    "url_src": "https://github.com/nocejo/tland",
    "url": "https://github.com/nocejo/tland",
    "obsolete": false,
    "name": "tland",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Perl"
    ],
    "descriptionText": "Taskwarrior landscape",
    "category": "Unknown",
    "readme": "tland Taskwarrior landscape NAME tland pl Taskwarrior landscape SYNOPSIS perl tland pl 2d 3w 2m DESCRIPTION Identifying and telling apart tasks by dates in the output of a Taskwarrior list command is somewhat difficult for me so I use this script to simplify it It shows the tasks due for each day clearly separated AM PM divided and every day week month shown in a explicit way",
    "compatibility": "2.4.1+",
    "description": "Taskwarrior landscape"
  },
  {
    "last_update": "2015-11-24",
    "author": [
      "Brock Wilcox (awwaiid)"
    ],
    "url_src": "https://github.com/awwaiid/tnote",
    "url": "https://github.com/awwaiid/tnote",
    "obsolete": false,
    "name": "tnote",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "TaskWarrior + jrnl",
    "category": "Unknown",
    "readme": "TaskWarrior jrnl This simple little script lets me associate jrnl entries with tasks cross tagging each for searchability http maebert github io jrnl Cool journal keeper http taskwarrior org cool task keeper",
    "compatibility": "2.4.1+",
    "description": "TaskWarrior + jrnl"
  },
  {
    "last_update": "2016-04-03",
    "author": [
      "Florijan Hamzic (cinatic)"
    ],
    "url_src": "https://github.com/cinatic/taskwhisperer",
    "url": "https://github.com/cinatic/taskwhisperer",
    "obsolete": false,
    "name": "taskwhisperer",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "Taskwhisperer is a extension for TaskWarrior Application https://taskwarrior.org. It is to display upcoming tasks and task details as well as to create and modify them.",
    "category": "Unknown",
    "readme": "Screenshot https github com cinatic taskwhisperer raw master images menu png gnome shell extension taskwhisperer is a simple extension for displaying pending tasks created by TaskWarrior https taskwarrior org in GNOME Shell The data is fetched from export function of TaskWarrior TaskWarrior Docs https taskwarrior org docs Installation After the installation restart GNOME Shell Alt F2 r Enter and enable the extension through gnome tweak tool Not Yet commited Go on the TaskWhisperer https extensions gnome org extension 1039 taskwhisperer extension page on extensions gnome org and click on the switch OFF ON Generic Local installation Move files into your locale locale share gnome shell extension directory and enable the extension via the Tweak Tool Preparation Make sure you have TaskWarrior installed Preview Task creation Screenshot https github com cinatic taskwhisperer raw master images create png Task modification Screenshot https github com cinatic taskwhisperer raw master images modify png Troubleshooting Wrong JSON Format gnome shell 1916 Gjs WARNING JS ERROR TypeError taskListData map is not a function Some TaskWarrior packages e g in GnUbuntu came without opt in the json array on flag So you have to add json array on in your taskrc https taskwarrior org docs configuration html Licence Copyright C 2016 Florijan Hamzic florijanh gmail com This file is part of gnome shell extension taskwhisperer gnome shell extension taskwhisperer is free software you can redistribute it and or modify it under the terms of the GNU General Public License as published by the Free Software Foundation either version 3 of the License or at your option any later version gnome shell extension taskwhisperer is distributed in the hope that it will be useful but WITHOUT ANY WARRANTY without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU General Public License for more details You should have received a copy of the GNU General Public License along with gnome shell extension taskwhisperer If not see http www gnu org licenses",
    "compatibility": "2.4.1+",
    "description": "Taskwhisperer is a extension for TaskWarrior Application https://taskwarrior.org. It is to display upcoming tasks and task details as well as to create and modify them."
  },
  {
    "last_update": "2015-09-07",
    "author": [
      "David J Patrick (linuxcaffe)",
      "Tomas Babej (tbabej)"
    ],
    "url_src": "https://github.com/tbabej/taskwarrior-tag_expire-hook",
    "url": "https://github.com/tbabej/taskwarrior-tag_expire-hook",
    "obsolete": false,
    "name": "taskwarrior-tag_expire-hook",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "An on-launch hook to expire (status:deleted) any task with an +expire hook, that is past due",
    "category": "Unknown",
    "readme": "taskwarrior tag_expire hook This taskwarrior hook script is intended to get my feet wet learning how hook scripts work starting with a basic one to offer users an easy alternative to assigning an until date value that is immediately after the due date for those tasks that are un completable beyond the due date By assigning a user configurable expire tag a task will be automatically and silently deleted This is desirable for high frequncy or daily tasks like taking your vitamins You don t need an overdue reminder to take yesterdays vitamins If you took them yesterday and marked the task completed or you didn t and today it was automatically deleted you still have a decent record of hits and misses Possible advantages over using the until date attribute speed of entry expire could even be x as opposed to until date due date 1 does not rely on recurring tasks until value shifting with due value tags are visible in most reports unlike until attribute",
    "compatibility": "2.4.1+",
    "description": "An on-launch hook to expire (status:deleted) any task with an +expire hook, that is past due"
  },
  {
    "last_update": "2015-03-08",
    "author": [
      "Adam Coddington (coddingtonbear)"
    ],
    "url_src": "https://github.com/coddingtonbear/taskwarrior-subtask-capsule",
    "url": "https://github.com/coddingtonbear/taskwarrior-subtask-capsule",
    "obsolete": false,
    "name": "taskwarrior-subtask-capsule",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Easily create subtasks",
    "category": "Unknown",
    "readme": "Taskwarrior Subtask Capsule This capsule makes it easy to create subtasks Note although this capsule works just fine it is still a work in progress Installation 1 Make sure you have Taskwarrior Capsules https github com coddingtonbear taskwarrior capsules _ installed 2 Install this library pip install taskwarrior subtask capsule 3 That s all Use tw some filter subtask task description Example Say that you have a task id 28 that you d like to create a subtask for tw 28 subtask This is my subtask s title",
    "compatibility": "2.4.1+",
    "description": "Easily create subtasks"
  },
  {
    "last_update": "2015-03-08",
    "author": [
      "Adam Coddington (coddingtonbear)"
    ],
    "url_src": "https://github.com/coddingtonbear/taskwarrior-blocks-capsule",
    "url": "https://github.com/coddingtonbear/taskwarrior-blocks-capsule",
    "obsolete": false,
    "name": "taskwarrior-blocks-capsule",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Mark tasks as dependent on one another with 'blocks' as well as 'depends'",
    "category": "Unknown",
    "readme": "Taskwarrior Blocks Capsule When defining tasks in taskwarrior you currently have only one option annotating which tasks a given task depends upon using the depends argument This capsule adds a new argument blocks which you can use for creating task dependencies from the opposite side Installation 1 Make sure you have Taskwarrior Capsules https github com coddingtonbear taskwarrior capsules _ installed 2 Install this library pip install taskwarrior blocks capsule 3 That s all Use Create a task that blocks another by using the blocks argument with comma separated list of task UUIDs or IDs imagine that you have a task with an ID of 25 for which you d like to create a dependent task tw add Make sure to apply peanut butter to bread blocks 25 The above command will cause two commands to be executed behind the scenes task add Make sure to apply peanut butter to bread let s pretend that this is created as task 26 task 25 modify depends 26",
    "compatibility": "2.4.1+",
    "description": "Mark tasks as dependent on one another with 'blocks' as well as 'depends'"
  },
  {
    "last_update": "2015-03-28",
    "author": [
      "Adam Coddington (coddingtonbear)"
    ],
    "url_src": "https://github.com/coddingtonbear/taskwarrior-EXAMPLE-capsule",
    "url": "https://github.com/coddingtonbear/taskwarrior-EXAMPLE-capsule",
    "obsolete": false,
    "name": "taskwarrior-EXAMPLE-capsule",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Example Taskwarrior capsule",
    "category": "Unknown",
    "readme": "Taskwarrior EXAMPLE Capsule This capsule is not actually useful on its own it s only here to help you write your own capsules Using this example First think of a name for your capsule then follow the below instructions before doing anything in the following examples we re pretending that you re adding a capsule named Hello 1 Rename the class EXAMPLE in taskwarrior_EXAMPLE_capsule capsule py to your capule s name In this example you d name the class Hello 2 Rename the folder taskwarrior_EXAMPLE_capsule to match your capsule s function For example if your capsule adds a command called hello you would rename the folder to taskwarrior_hello_capsule 3 Update setup py by following the instructions after comments starting with CHANGEME 4 Update LICENSE and change YOUR NAME to your name",
    "compatibility": "2.4.1+",
    "description": "Example Taskwarrior capsule"
  },
  {
    "last_update": "2016-01-07",
    "author": [
      "talwrii (talwrii)"
    ],
    "url_src": "https://github.com/talwrii/taskwarrior-activity-list",
    "url": "https://github.com/talwrii/taskwarrior-activity-list",
    "obsolete": false,
    "name": "taskwarrior-activity-list",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Hook for task warrior that stores stop and start times in task annotations",
    "category": "Unknown",
    "readme": "taskwarrior activity list An extension to taskwarrior which stores the details of when you start and stop activities in annotations Provides a utility twdisplay py to output summaries of activities Usage Ensure you have a taskwarrior with version 2 4 or more recent Attach the hook ln sf full_path_to hook py task hooks on_modify tal Run the twdisplay utility to summarise output twdisplay py format csv filter Add things to your path as appropriate Caveats This probably hits up against performance issues at some point the cost of starting and stopping a task is linear in the number of times it has started and stopped You might consider the extra noise in task info distracting Alternatives There is a similar project that writes into timebook Also another that keeps aggregates about the total time you have spent on projects timetrap and timebook are alternatives to taskwarrior which focus more on this type of logging However I have found their insistence of a current activity a little problematic",
    "compatibility": "2.4.1+",
    "description": "Hook for task warrior that stores stop and start times in task annotations"
  },
  {
    "last_update": "2015-03-23",
    "author": [
      "Jason Martin (jhmartin)"
    ],
    "url_src": "https://github.com/jhmartin/taskwarrior-effort-tracker",
    "url": "https://github.com/jhmartin/taskwarrior-effort-tracker",
    "obsolete": false,
    "name": "taskwarrior-effort-tracker",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Hook for Taskwarrior that records a log of time spent each day on each task",
    "category": "Unknown",
    "readme": "taskwarrior effort tracker Hook for Taskwarrior that records a log of time spent each day on each task Code Health https landscape io github jhmartin taskwarrior time report master landscape svg style flat https landscape io github jhmartin taskwarrior time report master Installation Place the file in task hooks Set a LEDGERFILE environmental variable where the output file should be written Output format is Date UID Seconds effort Project name or no project task description Example 2015 03 22 e28087e9 525e 403c 9c4b 1aed53809092 9 no project test3",
    "compatibility": "2.4.1+",
    "description": "Hook for Taskwarrior that records a log of time spent each day on each task"
  },
  {
    "last_update": "2015-05-16",
    "author": [
      "Alex Kir (osleg)"
    ],
    "url_src": "https://github.com/osleg/taskwarrior-timetracker-total",
    "url": "https://github.com/osleg/taskwarrior-timetracker-total",
    "obsolete": false,
    "name": "taskwarrior-timetracker-total",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Small script to get total on all times for a project with date filters. A supplement to kostajh/taskwarrior-time-tracking-hook",
    "category": "Unknown",
    "readme": "TaskWarrior Report A supplement script to http github com kostajh taskwarrior time tracking hook Getting total time for complete tasks on a project Usage python report py h usage report py h f YYYY DD MM t YYYY DD MM project positional arguments project optional arguments h help show this help message and exit f YYYY DD MM from YYYY DD MM From date inclusive t YYYY DD MM to YYYY DD MM To date exclusive For ease of use it is possible to chmod x report py and put it in PATH",
    "compatibility": "2.4.1+",
    "description": "Small script to get total on all times for a project with date filters. A supplement to kostajh/taskwarrior-time-tracking-hook"
  },
  {
    "last_update": "2016-03-14",
    "author": [
      "bmejias"
    ],
    "url_src": "https://github.com/bmejias/kanban4taskwarrior",
    "url": "https://github.com/bmejias/kanban4taskwarrior",
    "obsolete": false,
    "name": "kanban4taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Kanban verbs to wrap taskwarrior actions",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "Kanban verbs to wrap taskwarrior actions"
  },
  {
    "last_update": "2016-03-14",
    "author": [
      "S\u00e9bastien Le Corre (frenchbeard)"
    ],
    "url_src": "https://github.com/frenchbeard/docker-taskwarrior-server",
    "url": "https://github.com/frenchbeard/docker-taskwarrior-server",
    "obsolete": false,
    "name": "docker-taskwarrior-server",
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": null,
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": null
  },
  {
    "last_update": "2016-03-28",
    "author": [
      "Philip Douglass (philipsd6)"
    ],
    "url_src": "https://github.com/philipsd6/ifttt-evernote-taskwarrior",
    "url": "https://github.com/philipsd6/ifttt-evernote-taskwarrior",
    "obsolete": false,
    "name": "ifttt-evernote-taskwarrior",
    "theme": [
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "A Webhook to respond to IFTTT triggers from Evernote by adding tasks to Taskwarrior",
    "category": "Unknown",
    "readme": "ifttt evernote taskwarrior A Webhook to respond to IFTTT triggers from Evernote by adding tasks to Taskwarrior",
    "compatibility": "2.4.1+",
    "description": "A Webhook to respond to IFTTT triggers from Evernote by adding tasks to Taskwarrior"
  },
  {
    "last_update": "2016-03-23",
    "author": [
      "Bruno Vernay (BrunoVernay)"
    ],
    "url_src": "https://github.com/BrunoVernay/taskwarrior-site-test",
    "url": "https://github.com/BrunoVernay/taskwarrior-site-test",
    "obsolete": false,
    "name": "taskwarrior-site-test",
    "theme": [
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "A table filter experimentation for TaskWarrior web site",
    "category": "Unknown",
    "readme": "taskwarrior site test A table filter experimentation for TaskWarrior web site The goal is to improve the http taskwarrior org tools list See http brunovernay github io taskwarrior site test can even bookmark categories Front Ends http brunovernay github io taskwarrior site test Front Ends Depending on the branch GitHub rely on the branch name gh pages to publish the site Currently it is merged from kojs in branch filter js I motsly used this example http jiren github io filter js but it does not seem very popular supported known _Abandonned_ in branch ang2 I look at Angular2 but it is too big and invasive for this use case _Abandonned_ in branch kojs I use http KnockOutJS com which looks good and well suited for the job beware all dev occurs in gh pages currently Official TaskWarrior site Git https git tasktools org projects ST repos tt org browse html I started scraping the HTML data to fill the JSON file and maybe to add free search https github com BrunoVernay tw html parse See some other JS solutions https scotch io tutorials sort and filter a table using angular https github com aldeed meteor tabular https atmospherejs com aldeed tabular http jquery datatables meteor com https github com summitroute react structured filter test",
    "compatibility": "2.4.1+",
    "description": "A table filter experimentation for TaskWarrior web site"
  },
  {
    "last_update": "2015-03-08",
    "author": [
      "Adam Coddington (coddingtonbear)"
    ],
    "url_src": "https://github.com/coddingtonbear/taskwarrior-context-capsule",
    "url": "https://github.com/coddingtonbear/taskwarrior-context-capsule",
    "obsolete": false,
    "name": "taskwarrior-context-capsule",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Adds context functionality to taskwarrior",
    "category": "Unknown",
    "readme": "Taskwarrior Context Capsule This capsule implements Taskwarrior s Context RFC http taskwarrior org docs design context html _ Installation 1 Make sure you have Taskwarrior Capsules https github com coddingtonbear taskwarrior capsules _ installed 2 Install this library pip install taskwarrior context capsule 3 That s all Use See Context RFC http taskwarrior org docs design context html _",
    "compatibility": "2.4.1+",
    "description": "Adds context functionality to taskwarrior"
  },
  {
    "last_update": "2015-10-18",
    "author": [
      "openscreencast"
    ],
    "url_src": "https://github.com/openscreencast/openscreencast_videos_taskwarrior",
    "url": "https://github.com/openscreencast/openscreencast_videos_taskwarrior",
    "obsolete": false,
    "name": "openscreencast_videos_taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Videodateien mit dem Thema Taskwarrior vom Projekt openscreencast.de",
    "category": "Unknown",
    "readme": "Taskwarrior Videodateien mit dem Thema Taskwarrior vom Projekt openscreencast de Die Lizenz zu einer Video Datei steht in der dazugeh\u00f6rigen svg Datei",
    "compatibility": "2.4.1+",
    "description": "Videodateien mit dem Thema Taskwarrior vom Projekt openscreencast.de"
  },
  {
    "last_update": "2015-11-29",
    "author": [],
    "url_src": "https://github.com/frznlogic/qml-taskwarrior-executioner",
    "url": "https://github.com/frznlogic/qml-taskwarrior-executioner",
    "obsolete": false,
    "name": "qml-taskwarrior-executioner",
    "verified": "2016-04-24",
    "language": [
      "C++"
    ],
    "descriptionText": "",
    "category": "Unknown",
    "readme": "QML TaskWarrior Executioner This QML extension provide a way to perform different taskwarrior commands via command line from QML For the time being it is extremely basic and only developped for the needs of the QmlMirror project Requirements This extension requires taskwarrior 2 4 0 or higher Qt 5 Installation To install this package download qml taskwarrior executioner cd qml taskwarrior executioner mkdir build cd build qmake make j4 make install Usage See the test qml for a simple usage",
    "compatibility": "2.4.1+",
    "description": ""
  },
  {
    "last_update": "2016-03-12",
    "author": [],
    "url_src": "https://github.com/drkarl/taskwarrior-asana-sync",
    "url": "https://github.com/drkarl/taskwarrior-asana-sync",
    "obsolete": false,
    "name": "taskwarrior-asana-sync",
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "",
    "category": "Unknown",
    "readme": "taskwarrior asana sync This library requires the python taskwarrior libraries from http pypi python org pypi taskw and the asana client ruby gems from https github com tmac721 asana client",
    "compatibility": "2.4.1+",
    "description": ""
  },
  {
    "last_update": "2015-11-29",
    "author": [
      "Henry.T (Henry-T)"
    ],
    "url_src": "https://github.com/Henry-T/Todoist2Taskwarrior",
    "url": "https://github.com/Henry-T/Todoist2Taskwarrior",
    "obsolete": false,
    "name": "Todoist2Taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Todoist to taskwarrior exporter",
    "category": "Unknown",
    "readme": "Todoist2Taskwarrior Todoist to taskwarrior exporter",
    "compatibility": "2.4.1+",
    "description": "Todoist to taskwarrior exporter"
  },
  {
    "last_update": "2016-03-30",
    "author": [
      "fmeynadier"
    ],
    "url_src": "https://github.com/fmeynadier/taskwarrior-hamster-hook",
    "url": "https://github.com/fmeynadier/taskwarrior-hamster-hook",
    "obsolete": false,
    "name": "taskwarrior-hamster-hook",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "A minimal hook for TaskWarrior to track time with hamster-cli",
    "category": "Unknown",
    "readme": "taskwarrior hamster hook A minimal hook for TaskWarrior to help tracking time with hamster cli Prerequisites Taskwarrior 2 4 hamster cli 2 91 3 python Installation Copy or link on modify hamster into HOME task hooks Make sure it is executable Usage Start and stop tasks using the usual commands in Taskwarrior If a start is detected hook will call hamster cli start Task description project TAG1 TAG2 If a stop is detected hook will call hamster cli stop effectively stopping any task currently active in hamster",
    "compatibility": "2.4.1+",
    "description": "A minimal hook for TaskWarrior to track time with hamster-cli"
  },
  {
    "last_update": "2016-03-18",
    "author": [
      "Joshua I. James (jijames)"
    ],
    "url_src": "https://github.com/jijames/planner2taskwarrior",
    "url": "https://github.com/jijames/planner2taskwarrior",
    "obsolete": false,
    "name": "planner2taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "A script to add planner tasks to taskwarrior",
    "category": "Unknown",
    "readme": "planner2taskwarrior A bash script to add planner tasks to taskwarrior Generate plans with planner and automatically add all tasks into taskwarrior Tasks will use the start and due dates calculated in planner Usage planner2taskwarrior sh path to planner file xml As of 2016 03 18 the script will pull out all the tasks from the planner xml For each task Task already completed do nothing Task not completed check if already added If not added add new task New task will use 1 project name 2 task name 3 start date as wait 4 due date as wait If task already added update the wait and due dates Info Planner https wiki gnome org action show Apps Planner action show redirect Planner is an older project planning sytem that is standalone and easy to use Plans are saved in xml format Taskwarrior http taskwarrior org is a command line task management and prioritiation system To do Read project dependencies to properly assign task order Code cleanup If task is removed in planner remove in taskwarrior Import priority from planner Bug Creates duplicates if name of task has special characters",
    "compatibility": "2.4.1+",
    "description": "A script to add planner tasks to taskwarrior"
  },
  {
    "last_update": "2015-02-16",
    "author": [
      "Stefan Betz (encbladexp)"
    ],
    "url_src": "https://github.com/encbladexp/taskwarrior-antiglare-theme",
    "url": "https://github.com/encbladexp/taskwarrior-antiglare-theme",
    "obsolete": false,
    "name": "taskwarrior-antiglare-theme",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "A Taskwarrior Theme without annoying stuff.",
    "category": "Unknown",
    "readme": "Taskwarrior Antiglare Theme This is a simple taskwarrior http www taskwarrior org Theme without any extras no beauty but great usability Features Red Things are important due today due overdue Yellow Things get important next due Grey Things are nice to know but not important right now Priorities have no different colors reports should sort by priority Usage Just copy antiglare theme to a nice place on your filesystem then put this in your taskrc include task antiglare theme License Take a look a the awesome LICENSE i like franconian Beer",
    "compatibility": "2.4.1+",
    "description": "A Taskwarrior Theme without annoying stuff."
  },
  {
    "last_update": "2015-12-14",
    "author": [
      "Ralph Bean (ralphbean)"
    ],
    "url_src": "https://github.com/ralphbean/mattd.plugins.taskwarrior",
    "url": "https://github.com/ralphbean/mattd.plugins.taskwarrior",
    "obsolete": false,
    "name": "mattd.plugins.taskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "taskwarrior plugin for Matt Daemon",
    "category": "Unknown",
    "readme": "A taskwarrior http taskwarrior org _ plugin for mattd http github com ralphbean mattd core _ Configure this plugin by editing etc mattd d taskwarrior ini When you speak keyphrase mattd will being an interactive session to add new items to your TODO list",
    "compatibility": "2.4.1+",
    "description": "taskwarrior plugin for Matt Daemon"
  },
  {
    "last_update": "2016-02-19",
    "author": [
      "Adam Coddington (coddingtonbear)"
    ],
    "url_src": "https://github.com/coddingtonbear/taskwarrior-pomodoro-beeminder",
    "url": "https://github.com/coddingtonbear/taskwarrior-pomodoro-beeminder",
    "obsolete": false,
    "name": "taskwarrior-pomodoro-beeminder",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Track your pomodoros in Beeminder",
    "category": "Unknown",
    "readme": "Taskwarrior Pomodoro Beeminder Incrementer Simple Usage 1 Store your Beeminder Personal Authentication Token using taskwarrior pomodoro beeminder store_auth_token YOUR BEEMINDER USERNAME 2 Configure Taskwarrior Pomodoro https github com coddingtonbear taskwarrior pomodoro to increment your Beeminder goal by entering the following into your taskrc pomodoro postCompletionCommand usr local bin taskwarrior pomodoro beeminder increment_goal YOUR BEEMINDER USERNAME YOUR BEEMINDER GOAL SLUG Configurable Usage 1 Store your Beeminder Personal Authentication Token using taskwarrior pomodoro beeminder store_auth_token YOUR BEEMINDER USERNAME 2 Create a file in your home directory named taskwarrior pomodoro beeminder cfg with contents something like the following These settings will apply to all below sections DEFAULT username YOUR BEEMINDER USERNAME Each section configures the application to post to a specific goal when a task matches its constraints If you do not specify a goal slug we ll assume that the goal slug in Beeminder matches the section name For incrementing a specific goal for only tasks having specified tags Note that tags are comma separated and all tags listed must be present on the given task If you would like to increment a given goal when either of two tags are present just create a new section having the same goal slug some arbitrary name goal YOUR BEEMINDER GOAL SLUG tags TAG ONE TAG TWO For incrementing a specific goal for only tasks having a specified project Note that you can use globbing for example if you wanted to increment this goal only when a task s project starts with work you could enter work some other arbitrary name goal YOUR BEEMINDER GOAL SLUG project YOUR PROJECT NAME 3 Configure Taskwarrior Pomodoro https github com coddingtonbear taskwarrior pomodoro to increment the relevant Beeminder goals by entering the following into your taskrc pomodoro postCompletionCommand usr local bin taskwarrior pomodoro beeminder autoincrement Example Config This is my taskwarrior pomodoro beeminder cfg that you can use as an example DEFAULT username coddingtonbear pomodoros pomodoros mig tags MIG pomodoros mig coursera goal pomodoros mig project coursera pomodoros opensource tags Opensource pomodoros work tags Work",
    "compatibility": "2.4.1+",
    "description": "Track your pomodoros in Beeminder"
  },
  {
    "last_update": "2016-03-19",
    "author": [
      "Tomas Babej (tbabej)"
    ],
    "url_src": "https://github.com/tbabej/taskwarrior-block-recurrence-hook",
    "url": "https://github.com/tbabej/taskwarrior-block-recurrence-hook",
    "obsolete": false,
    "name": "taskwarrior-block-recurrence-hook",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Blocks creation of child recurrent tasks on the machine.",
    "category": "Unknown",
    "readme": "Deprecated Use taskrc recurrence no setting instead This project is deprecated the recommended solution is to use recurrence no setting in your taskrc Taskwarrior Block Recurrence Hook This is a hook for TaskWarrior http www taskwarrior org which blocks spawning of child recurrence tasks on the client where it is enabled This is useful as a workaround for https bug tasktools org browse TD 44 where different clients would spawn different child recurrence tasks for the same parent task Install git clone https github com tbabej taskwarrior block recurrence hook git cp taskwarrior block recurrencehook on task hooks This hook leverages tasklib so you need to install that too pip install tasklib Example of usage Put into your task hooks folder and observe that recurrent tasks are not being generated",
    "compatibility": "2.4.1+",
    "description": "Blocks creation of child recurrent tasks on the machine."
  },
  {
    "last_update": "2016-04-13",
    "author": [
      "Fr\u00e9d\u00e9ric Plourde (fplourde)"
    ],
    "url_src": "https://github.com/fplourde/Taskwarrior-habitica-hooks",
    "url": "https://github.com/fplourde/Taskwarrior-habitica-hooks",
    "obsolete": false,
    "name": "Taskwarrior-habitica-hooks",
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "",
    "category": "Unknown",
    "readme": "Taskwarrior Habitica Hook Add todo task on Habiti com when task add is fired and complete it on task done Install Download files wget Copy files to task hooks mkdir p task hooks cp on add habitrpg 01 py task hooks cp on modify habitrpg 01 py task hooks Get your API Key and User Key on https habitica com options settings api https habitica com options settings api and edit line 8 and 9 of both files API_KEY YOURAPIKEY API_USER YOURAPIUSERKEY Usage Nothing specific task add and task done edit Habitica Un install Delete the hook rm task hooks on add habitrpg 01 py task hooks rm task hooks on modify habitrpg 01 py task hooks",
    "compatibility": "2.4.1+",
    "description": ""
  },
  {
    "last_update": "2016-03-28",
    "author": [
      "Philip Douglass (philipsd6)"
    ],
    "url_src": "https://github.com/philipsd6/fpm-taskwarrior-server",
    "url": "https://github.com/philipsd6/fpm-taskwarrior-server",
    "obsolete": false,
    "name": "fpm-taskwarrior-server",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Makefile"
    ],
    "descriptionText": "Build Taskwarrior server from a Makefile using FPM!",
    "category": "Unknown",
    "readme": "fpm taskwarrior server Build Taskwarrior server from a Makefile using FPM As simple as console make make install Developed on Ubuntu but should also support building on RedHat based systems as well",
    "compatibility": "2.4.1+",
    "description": "Build Taskwarrior server from a Makefile using FPM!"
  },
  {
    "last_update": "2016-04-20",
    "author": [
      "Check your git settings! (invalid-email-address)"
    ],
    "url_src": "https://github.com/venturecommunism/meteor-taskwarrior-react",
    "url": "https://github.com/venturecommunism/meteor-taskwarrior-react",
    "obsolete": false,
    "name": "meteor-taskwarrior-react",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "taskwarrior client in meteor/react",
    "category": "Unknown",
    "readme": "meteor mantra kickstarter bring your meteor mantra development up to speed Please make sure you read Mantra Specification https kadirahq github io mantra and visit the official repository https github com kadirahq mantra Keep in mind that Mantra is an approach to application architecture rather than a framework It is supposed to keep our options open and not lock us in to any particular library we are free to choose how manage routing state management and data binding In other words bring your own toolkit flow router react router GraphQL Redux or any other shiny new thing Features follows mantra feature specific modules approach if interested please join an ongoing discussion here https github com kadirahq mantra issues 3 formsy react for user login registration and password forms formsy react https github com christianalfoni formsy react and formsy react components https github com twisty formsy react components user registration login logout with application wide state composed in pure React JS components with react komposer https github com kadirahq react komposer there is no blaze ui or any blaze to react simple but complete Colors modules wih CRUD simple but not fully complete user management module tcomb form https github com gcanti tcomb form based forms in Colors module meteor astronomy https github com jagi meteor astronomy models looking forward to the upcoming v2 bootstrap theme module based on Flatly https bootswatch com flatly with a configuration file you can replace it or remove if you have other requirements screen homepage public screens homepage png screen register public screens register png screen login public screens login png screen password public screens password png screen users collection public screens users collection png screen users add public screens users add png screen colors collection public screens colors collection png screen colors add public screens colors add png screen colors single public screens colors single png Setting Up make sure you have Meteor installed clone this repo make sure you are on mantra modules experiment 02 branch npm install meteor port 5005 Your app should be running http localhost 5005 http localhost 5005 Roadmap This is an early draft Mantra architecture is very fresh and React environment is quite dynamic that means things will change and break We will be following the discussions and will try to keep this project up to date The goal is to bring some simple yet valuable to most apps features user management role management ACL management profile page account page advanced CRUD component with pagination file manager Running Tests to be completed In this app every part of the client side is fully tested using the familiar tools like Mocha Chai and Sinon Run tests with npm test See package json for more information about testing setup",
    "compatibility": "2.4.1+",
    "description": "taskwarrior client in meteor/react"
  },
  {
    "last_update": "2014-02-27",
    "author": [],
    "url_src": "https://github.com/gerrowadat/pytaskwarrior",
    "url": "https://github.com/gerrowadat/pytaskwarrior",
    "obsolete": false,
    "name": "pytaskwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Python libraries for TaskWarrior",
    "category": "Unknown",
    "readme": "This is in active dev probably not suitable for forking",
    "compatibility": "2.4.1+",
    "description": "Python libraries for TaskWarrior"
  },
  {
    "last_update": "2015-02-08",
    "author": [],
    "url_src": "https://github.com/jinnovation/taskronin",
    "url": "https://github.com/jinnovation/taskronin",
    "obsolete": false,
    "name": "taskronin",
    "theme": [
      "Android"
    ],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Android client for Taskwarrior.",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "Android client for Taskwarrior."
  },
  {
    "last_update": "2015-09-05",
    "author": [
      "Jan Palus (jpalus)"
    ],
    "url_src": "https://github.com/pld-linux/taskserver",
    "url": "https://github.com/pld-linux/taskserver",
    "obsolete": false,
    "name": "taskserver",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Taskserver is a sync server for Taskwarrior and related products",
    "category": "Unknown",
    "readme": "Welcome To Taskserver Taskserver is a daemon or service that will allow you to share tasks among different client applications primarily Taskwarrior Taskserver is compatible with Taskwarrior version 2 4 x and later but works best with the latest Taskwarrior Taskserver is complex It is not for anyone who is unfamiliar with the operation of daemons Easiest Setup There is a setup script that will lead you through all necessary steps to setup the Taskserver create certs configure a client and sync script setup_server bash Alternately there is online documentation that will lead you through the separate steps http taskwarrior org docs taskserver setup html Documentation Most of the documentation has been moved online so we can continually improve it http taskwarrior org docs In addition there are two man pages installed taskd 1 taskdctl 1 taskdrc 5 Known Issues Please see this page for a list of issues and their status Taskwarrior https bug tasktools org browse TW Taskserver https bug tasktools org browse TD Feedback Your feedback is welcomed and encouraged Please send it to support taskwarrior org",
    "compatibility": "2.4.1+",
    "description": "Taskserver is a sync server for Taskwarrior and related products"
  },
  {
    "last_update": "2015-12-13",
    "author": [
      "jeaye (jeaye)"
    ],
    "url_src": "https://github.com/jeaye/remind-warrior",
    "url": "https://github.com/jeaye/remind-warrior",
    "obsolete": false,
    "name": "remind-warrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Clojure"
    ],
    "descriptionText": "TaskWarrior -> Remind converter",
    "category": "Unknown",
    "readme": "remind warrior remind warrior reads TaskWarrior s https taskwarrior org tasks filters and sorts them then converts them to the Remind https www roaringpenguin com products remind format This allows me to use Wyrd http pessimization com software wyrd to see all of my TODOs and due dates as well as my normal reminders Build bash lein uberjar Usage Add the following line to your reminders adjusting as needed remind INCLUDE home USER remind remind warrior rem Now add a job to your crontab https wiki archlinux org index php Cron In this example we update every 5 minutes bash crontab e 5 java jar projects remind warrior target uberjar remind warrior 0 1 0 standalone jar remind remind warrior rem",
    "compatibility": "2.4.1+",
    "description": "TaskWarrior -> Remind converter"
  },
  {
    "last_update": "2016-04-07",
    "author": [
      "Felix Mai (8ware)"
    ],
    "url_src": "https://github.com/8ware/task-history-git",
    "url": "https://github.com/8ware/task-history-git",
    "obsolete": false,
    "name": "task-history-git",
    "theme": [
      "Git"
    ],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Git-based History Hook for Taskwarrior",
    "category": "Unknown",
    "readme": "Git based History Hook for Taskwarrior Keeping taskwarrior s data under version control grants various advantages including a detailed change history and of course synchronization capabilities There are several scripts which aim to provide that functionality but most of them have some little drawbacks For example taskgit task git sh and gtw are implemented as wrapper scripts which imply either aliasing or using an unfamiliar command On the other hand on exit_git py already exploits taskwarrior s hook capabilities but does not provide useful commit messages while maintaining redundant data This approach also uses taskwarrior s hook mechanism but maintains the data in a more clever manner taskgit https gist github com Unode 9366218 taskgit Gist task git sh https github com kostajh task git task git gtw https github com hoxu gtw gtw on exit_git py https gist github com wbsch fe5d0f392657fdfa6fe4 on exit_git py Gist Concept Instead of tracking all data files only the pending data file is kept under version control The idea is to generate the required information for the backlog data completed data and undo data files from the commit history For example the completed data file contains all deleted and completed entries which are moved from the pending data file each time the garbage collection is invoked 1 This appears as deletion in the commit history and thus can easily appended to the unsynced completed data file on a remote computer As mentioned this can be done for the other two files in a similar way By means of the post merge git hook these three files can be updated automatically 1 http taskwarrior org docs ids html ID Numbers Advantages The repository can be kept at a minimum size since all information are given by the commit history Changes in the history of the pending data file can be projected directly onto the other files Drawbacks If the format of any file changes the generation procedure is likely to break Updating the data files after a large git update can be time consuming",
    "compatibility": "2.4.1+",
    "description": "Git-based History Hook for Taskwarrior"
  },
  {
    "last_update": "2016-04-08",
    "author": [
      "jareds"
    ],
    "url_src": "https://github.com/jareds/docker-taskd",
    "url": "https://github.com/jareds/docker-taskd",
    "obsolete": false,
    "name": "docker-taskd",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Task server for taskwarrior packaged as a docker container",
    "category": "Unknown",
    "readme": "Taskwarrior taskd for Docker c 2016 Jared Stofflett Redistribution and modifications are welcome see the LICENSE file for details Taskwarrior http www taskwarrior org is an open source cross platform command line task management tool It allows you to capture annotate manipulate and present your tasks then sync them among devices This Dockerfile packages taskd Taskwarrior s sync server built from source During initial setup you create an organization and initial user This docker image is not currently available on Docker Hub build docker build t taskd Setup The image stores configuration and data in var taskd which you should persist somewhere Configuration is copied when running with the init command For creating the initial directory hierarchy and example configuration run the following command to create a persistent volume docker create v var taskd name taskddata busybox To initialize the configuration and create your first user run docker run volumes from taskddata name taskdserver rm taskd usr local bin init sh public jared 192 168 99 100 Replace public with your organization name jared with your user name and 192 168 99 100 with the IP address or domain name your server will be accessed at configuration To get required files for setup run docker cp taskddata var taskd taskd For setting up taskd with the copied files refer to official documentation Note for password use the folder name at orgs public 9714c653 dd82 4626 9b11 879386f0d90a where public was the organization you created and 9714c653 dd82 4626 9b11 879386f0d90a will be replaced with the name of the folder created when creating your first user Running a Container Run the image in a container exposing taskd s port and making var taskd permanent An example run command is docker run volumes from taskddata name taskdserver p 53589 53589 d taskd usr local bin server sh",
    "compatibility": "2.4.1+",
    "description": "Task server for taskwarrior packaged as a docker container"
  },
  {
    "last_update": "2014-09-09",
    "author": [
      "Fidel Mato (nocejo)"
    ],
    "url_src": "https://github.com/nocejo/tsh",
    "url": "https://github.com/nocejo/tsh",
    "obsolete": false,
    "name": "tsh",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Perl"
    ],
    "descriptionText": "Simulated Taskwarrior shell",
    "category": "Unknown",
    "readme": "Simulated Taskwarrior shell Starting development Watch your data Make backups tsh pl is released under the MIT license For details check the LICENSE file",
    "compatibility": "2.4.1+",
    "description": "Simulated Taskwarrior shell"
  },
  {
    "last_update": "2015-01-26",
    "author": [
      "Roy Zuo (roylez)"
    ],
    "url_src": "https://github.com/roylez/syncwarrior",
    "url": "https://github.com/roylez/syncwarrior",
    "obsolete": false,
    "name": "syncwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "Sync toodledo with taskwarrior",
    "category": "Unknown",
    "readme": "",
    "compatibility": "2.4.1+",
    "description": "Sync toodledo with taskwarrior"
  },
  {
    "last_update": "2014-03-16",
    "author": [
      "tribly"
    ],
    "url_src": "https://github.com/tribly/task-notify",
    "url": "https://github.com/tribly/task-notify",
    "obsolete": false,
    "name": "task-notify",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Various notifications for taskwarrior",
    "category": "Unknown",
    "readme": "task notify Various notifications for taskwarrior Pretty simple plain and stupid at the moment Usage Make a cronjob to remind you every 30 Minutes bash 30 location of your skript",
    "compatibility": "2.4.1+",
    "description": "Various notifications for taskwarrior"
  },
  {
    "last_update": "2015-09-25",
    "author": [
      "codemunchies (codemunchies)"
    ],
    "url_src": "https://github.com/codemunchies/habitrpg",
    "url": "https://github.com/codemunchies/habitrpg",
    "obsolete": false,
    "name": "habitrpg",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "A taskwarrior like command-line interface for HabitRPG",
    "category": "Unknown",
    "readme": "Gem Version https badge fury io rb habitrpg svg http badge fury io rb habitrpg HabitRPG is a command line interface that makes an attempt to emulate taskwarrior while using www habitrpg com HabitAPI is called and used for all of the things related to communication with www habitrpg com servers To install run gem install habitrpg and run habitrpg help for more info This is an alpha release as of 2015 02 28 and still has much work to be done Data returned from the API calls are still not being parsed or displayed in a human readable format To begin using it run habitrpg init and follow the prompts Your API user id and user key are being stored in habitrpg id_habitrpg HabitRPG makes an effort to protect your keys by verifying your id_habitrpg file is chmod 0600 every time you run the application At this time we only have support for Linux and OS X with Windows planned once the application is returning useful data",
    "compatibility": "2.4.1+",
    "description": "A taskwarrior like command-line interface for HabitRPG"
  },
  {
    "last_update": "2015-09-14",
    "author": [
      "hut"
    ],
    "url_src": "https://github.com/hut/gold",
    "url": "https://github.com/hut/gold",
    "obsolete": false,
    "name": "gold",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "reward system for taskwarrior",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "reward system for taskwarrior"
  },
  {
    "last_update": "2014-04-02",
    "author": [
      "Marc (miefda)"
    ],
    "url_src": "https://github.com/miefda/taskbot",
    "url": "https://github.com/miefda/taskbot",
    "obsolete": false,
    "name": "taskbot",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "taskwarrior irc bot",
    "category": "Unknown",
    "readme": "taskbot taskwarrior irc bot usage node taskbot js",
    "compatibility": "2.4.1+",
    "description": "taskwarrior irc bot"
  },
  {
    "last_update": "2015-09-10",
    "author": [
      "Gabriel Pettier (tshirtman)"
    ],
    "url_src": "https://github.com/tshirtman/.task",
    "url": "https://github.com/tshirtman/.task",
    "obsolete": false,
    "name": ".task",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "my taskwarrior config",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "my taskwarrior config"
  },
  {
    "last_update": "2015-08-07",
    "author": [
      "David J Patrick (linuxcaffe)"
    ],
    "url_src": "https://github.com/linuxcaffe/twx",
    "url": "https://github.com/linuxcaffe/twx",
    "obsolete": false,
    "name": "twx",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Perl"
    ],
    "descriptionText": "taskwarrior export scripts",
    "category": "Unknown",
    "readme": "twx _taskwarrior export scripts as found at the bottom of http taskwarrior org tools _ This repo is for the development and ideally replacement of these legacy taskwarrior add ons that represent considerable out of the box functionality Because these scripts have languished under usr local share doc task addons for years with little fanfare or contributions they have been almost forgotten IMHO the scripts themselves should be reimplemented harnessing the current task v 2 4 5 import and export capabilities",
    "compatibility": "2.4.1+",
    "description": "taskwarrior export scripts"
  },
  {
    "last_update": "2015-09-25",
    "author": [
      "Tilman Bender (er4z0r)"
    ],
    "url_src": "https://github.com/er4z0r/habitwarrior",
    "url": "https://github.com/er4z0r/habitwarrior",
    "obsolete": false,
    "name": "habitwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Provides integration between taskwarrior and habitrpg.",
    "category": "Unknown",
    "readme": "habitwarrior Provides integration between taskwarrior and habitrpg This project is not yet functional",
    "compatibility": "2.4.1+",
    "description": "Provides integration between taskwarrior and habitrpg."
  },
  {
    "last_update": "2015-05-05",
    "author": [
      "Gary B. Genett (garybgenett)"
    ],
    "url_src": "https://github.com/garybgenett/tasks",
    "url": "https://github.com/garybgenett/tasks",
    "obsolete": false,
    "name": "tasks",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Taskwarrior & Google Tasks: configuration, automation & reporting",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "Taskwarrior & Google Tasks: configuration, automation & reporting"
  },
  {
    "last_update": "2015-04-28",
    "author": [
      "Pablo Vizcay (vizcay)"
    ],
    "url_src": "https://github.com/vizcay/webwarrior",
    "url": "https://github.com/vizcay/webwarrior",
    "obsolete": false,
    "name": "webwarrior",
    "theme": [
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "Taskwarrior web frontend",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "Taskwarrior web frontend"
  },
  {
    "last_update": "2015-10-07",
    "author": [
      "Nikolai Nowaczyk (niknow)"
    ],
    "url_src": "https://github.com/niknow/TaskArena",
    "url": "https://github.com/niknow/TaskArena",
    "obsolete": false,
    "name": "TaskArena",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "A tool adding collaborative functionality to TaskWarrior.",
    "category": "Unknown",
    "readme": "TaskArena image https travis ci org niknow TaskArena svg branch master target https travis ci org niknow TaskArena image https coveralls io repos niknow TaskArena badge svg branch master service github target https coveralls io github niknow TaskArena branch master A tool adding collaborative functionality to TaskWarrior Project status broken Warning Before trying out TaskArena it is strongly suggested that you create a backup of your TaskWarrior database Installation Clone this repo git clone https github com niknow TaskArena git Switch into TaskArena and install the python library cd TaskArena python setup py install Move the arenacmd py into your local bin folder and rename it to tarena mv arenacmd py usr bin tarena Now TaskArena can install itself by tarena install This creates some entries in the taskrc of your TaskWarrior which are neccessary so that TaskArena can interact with TaskWarrior List of Commands A list of possible commands can be generated via tarena cmdlist install installs TaskArena uninstall uninstalls TaskArena create creates a new arena delete deletes an arena list lists all arenas add adds a task to an arena remove removes a task from an local lists all local task of an arena remote lists all remote tasks of an arena sync syncs an arena cmdlist creates a list of all commands A more detailled explaination of the various commands can be found in the following tutorial Tutorial The general syntax of tarena can be read by typing tarena h We will walk you through it in the following Creating a new arena To start working on tasks collaboratively you first have to create an arena in which you can put them tarena create You will be asked for a name for your arena The name should be the common theme of the tasks you want to work on together for instance the name of a project Next you will be asked for a local and a remote folder The local folder should be the path of your usual local TaskWarrior database The remote folder should be a new folder that you can share with your collaborators for instance a folder in your Dropbox Warning By giving tarena the path to your local TaskWarrior database you automatically give it read and write permissions to this database Since this project is in an experimental state we again strongly advise you to make a backup of this folder first Managing arenas You can create as many arenas as you like as long as their names are unique A list of all arenas can be produced via tarena list You could delete your arena by tarena delete arena Putting tasks into an arena You can put tasks from your TaskWarrior into your arena tarena add arena filter Here arena should be the name of your arena and filter can be any TaskWarrior filter For instance if you have tasks like this ID DESCRIPTION 1 cut the lawn 2 tidy up cellar You can add the first one to your housework arena via tarena add housework 1 If they are part of a project i e if your task report looks like this ID DESCRIPTION PROJECT 1 cut the lawn housework 2 tidy up cellar housework You can also add them via tarena add housework project housework The filter can be as complex as you like tarena add housework project housework garden due before 1month Managing tasks in an arena You can remove tasks from an arena in the same fashion For instance tarena remove housework 1 would remove the task with ID 1 You can see a list of all local tasks in your arena via tarena local housework You can see a list of all remote tasks in your arena via tarena remote housework Syncinc tasks So far everything we did happened in your local TaskWarrior database To actually share it you use tarena sync arena So to synchronize your housework tarena sync housework A dialog will walk you through the synchronization In the end only the tasks belonging to your arena will be synchronized with the remote folder Actually working together To actually work together you have to give your collaborator access to your remote folder for instance by sharing that folder via Dropbox Your collaborator has to create an arena with the same name and specify his local TaskWarrior folder as well as his remote folder in his Dropbox In order for him to get your tasks he has to perform an ordinary sync tarena sync houework A technical hint Technically the installation of TaskArena adds some User Defined Attributes UDA to your TaskWarrior After you have added a task to an arena you can see them via task 1 info assuming that the task with ID 1 has been added TaskWarrior will display all information it has on the task and among other things Arena housework ArenaTaskID 156139121905747781424456029047977931020 The UDAs Arena and ArenaTaskID are used by tarena to interact with TaskWarrior Uninstallation To remove TaskArena one has to undo all the steps of the installation in reverse order Remove the entries in the taskrc via tarena uninstall Remove the command line interface by deleting tarena from your local bin folder rm tarena Uninstall the python library by deleting all its files You can get a list of these via python setup py install record files txt cat files txt",
    "compatibility": "2.4.1+",
    "description": "A tool adding collaborative functionality to TaskWarrior."
  },
  {
    "last_update": "2016-03-30",
    "author": [
      "Felix Mai (8ware)",
      "Jeremy Symon (jtsymon)"
    ],
    "url_src": "https://github.com/8ware/task-gantt",
    "url": "https://github.com/8ware/task-gantt",
    "obsolete": false,
    "name": "task-gantt",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Perl"
    ],
    "descriptionText": "Generating Gantt charts from Taskwarrior entries",
    "category": "Unknown",
    "readme": "task gantt Generating Gantt charts from Taskwarrior entries task gantt status pending pro task gantt doc gantt png The idea is to specify a due date and a duration UDA and then treat the task as it would start at due duration and end at due date Setup 1 Add duration as user defined attribute to your taskrc uda duration type numeric 2 Install Project Gantt perl module cpanm Project Gantt Usage task gantt stdout d description o filename filters For example to generate a Gantt chart of all pending tasks and watch it directly with feh execute task gantt stdout status pending feh",
    "compatibility": "2.4.1+",
    "description": "Generating Gantt charts from Taskwarrior entries"
  },
  {
    "last_update": "2016-01-12",
    "author": [
      "Henry.T (Henry-T)"
    ],
    "url_src": "https://github.com/Henry-T/TaskWarriorReport",
    "url": "https://github.com/Henry-T/TaskWarriorReport",
    "obsolete": false,
    "name": "TaskWarriorReport",
    "theme": [
      "Time",
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "generate up-to-time web page & custom completed task report based on great tool \u2014\u2014 TaskWarrior",
    "category": "Unknown",
    "readme": "TaskWarriorReport generate up to time web page amp custom completed task report based on great tool TaskWarrior",
    "compatibility": "2.4.1+",
    "description": "generate up-to-time web page & custom completed task report based on great tool \u2014\u2014 TaskWarrior"
  },
  {
    "last_update": "2015-12-22",
    "author": [
      "kostajh"
    ],
    "url_src": "https://github.com/kostajh/LibTask",
    "url": "https://github.com/kostajh/LibTask",
    "obsolete": false,
    "name": "LibTask",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "PHP"
    ],
    "descriptionText": "PHP library for interacting with Taskwarrior 2.x",
    "category": "Unknown",
    "readme": "LibTask PHP Library for Taskwarrior LibTask is a PHP library for interacting with Taskwarrior http www taskwarrior org 2 x You can use LibTask to add modify delete and view tasks in a Taskwarrior database Build Status https travis ci org kostajh LibTask png branch master https travis ci org kostajh LibTask Usage php php use LibTask Task Task use LibTask Taskwarrior taskwarrior new Taskwarrior Add a task task new Task Grind coffee beans task setDue today setStatus pending setProject morning setTags array coffee life setPriority H response taskwarrior save task getResponse Load tasks tasks taskwarrior loadTasks overdue array status pending References Taskwarrior JSON Format http taskwarrior org projects taskwarrior wiki JSON_format Author Kosta Harlan http kostaharlan net",
    "compatibility": "2.4.1+",
    "description": "PHP library for interacting with Taskwarrior 2.x"
  },
  {
    "last_update": "2015-01-22",
    "author": [
      "Spiehr (garykl)"
    ],
    "url_src": "https://github.com/garykl/dotwarrior",
    "url": "https://github.com/garykl/dotwarrior",
    "obsolete": false,
    "name": "dotwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "meaningfull bullet lists with taskwarrior and graphviz",
    "category": "Unknown",
    "readme": "dotwarrior dotwarrior creates meaningful bullet lists in graph appearance Using the output of taskwarrior export nice visualizations using graphviz are produced If you don t use taskwarrior this program won t make any sense to you except you want to learn using it which could point out to be useful Some features provided by dotwarrior only make sense when using taskwarrior with a certain workflow I use taskwarrior s tags intensively for categorizing tasks by topic people that are affected places actions to be taken for finishing a task The produced visualizations are a colorful graphs mathematical for networks whose nodes boxes with text in it can be 1 tasks 2 tags 3 projects 4 annotations Edges connections between nodes represented as arrows can be 1 task task 2 task tag 3 task annotation 4 task project 5 tag project 6 tags tag The configuration options are already extensive but not fully developed Configuration is done in python3 which is the language dotwarrior is written in usage Dotwarrior is called as follows if it is executable file permission and in a folder inside the PATH variable taskwarrior export dotwarrior py out taskwarrior export project presentation dotwarrior py presi taskwarrior export work dotwarrior py constr An argument without a dash is interpeted as filename which means we just created three files out svg presi svg and constr svg More possible output formats will follow Note that taskwarrior must be invoked with the export option which produces data in JSON format that is piped into dotwarrior As a consequence the full power of taskwarrior is conserved as it is dotwarrior is only useful if you fine tune your own configurations An arbitrary number of configurations can be created it is an instance of the configuration class Conf and then be used by specifying command line options See also section configuration command line options configuration Configuration is done in python3 One or more configuration objects configtemplate Conf are instantiated one of them is dynamically chosen at run time through configurable command line arguments see section configuration command line options Several example configurations are given in config py The following paragraphs provide an overview over the planned and partly realized configuration options It s probably a good idea to read configtemplate py in parallel to the following For the following subsections assume that there is an object conf Conf colors different colors for different status of tasks can be are set like completed pending deleted or being a tag or a project The following options are available and its default values are shown It is hopwfully self explanatory conf colors project white conf colors annotation yellow conf colors blocked green conf colors unblocked lightgreen conf colors done grey conf colors wait white conf colors deleted pink conf colors tag white conf colors fillTag black conf colors fontTag white conf colors other white conf colors fontDefault black conf colors byUrgency False Colors can also be HSV codes h s v h s and v being numbers between 0 and 1 and RGB as hex code e g 00ff33 The option byUrgency is special If it is set to True the default colors for tasks are ignored Instead a color code is used for indicating the urgency of a task which is calculated by taskwarrior If option byEntry is set and byUrgency is not set the task nodes are colored by the date when they were created layout The layout is one of the possible programs of the graphvis library e g dot neato circo fdp sfdp Read man dot for more information nodes which nodes shall be shown True means show False mean don t show Self explanatory edges One can choose to show edges between certain tags by setting conf edges tagVStags True This is only useful when setting conf nodes tasks False because the connections between different tags are set when one task has multiple tags It shows you information about your working style like what kind of stuff are you doing when working at certain places or with certain persons or what are you really doing when working on certain topics This option is only useful if you use tags extensively You can also set conf edges projectVStags True which again is only useful when conf nodes tasks False since connection between a project and a tag is drawn when a task in a project has that tag excluded those tags are supressed conf excluded tags deleted tasks are not shown conf excluded taskStatus deleted deleted tasks are not connected to tags conf excluded taggedTaskStatus set deleted deleted and completed tasks annotations are not shown conf excluded annotationStatus deleted completed weights how strong are the different kinds of nodes connected by their edges values should be greater than zero Small values mean weak connections large values lead to strong attraction misc penwidth characters per line tag hierarchy Setting conf tagHierarchy to some dictionary builds up a tag hierarchy Entirely new tag symbols which are not contained in your taskwarrior data can be used conf tagHierarchy program maintain implement test refactor This would lead to connections between program with each of the elements in the value list Of course many such key value pairs can be defined and keys can be used in the value list of other pairs as well This proves useful not only for having a clearer view but also for having a better alignment relativ to certain actions or places This again is only useful when using tags extensively command line options The keys in configs can be used as command line options by prefixing If such an option is given the corresponding value of configs is used task project dotwarrior status pending export dotwarrior py urg out creates a graph that is color coded by urgency that means urgent tasks that should be done at first are colored in red whereas more unimportant tasks are blue It is saved in out svg examples The file config py contains many examples of configurations described above Default values can be found in configtemplate py How could I This project was a spontaneous effect build out of graphdeps http pastebin com 9EyvEL0M Graphdeps after finding the inspiring taskwarrior",
    "compatibility": "2.4.1+",
    "description": "meaningfull bullet lists with taskwarrior and graphviz"
  },
  {
    "last_update": "2014-11-10",
    "author": [],
    "url_src": "https://github.com/jackbaty/Mutt2Task",
    "url": "https://github.com/jackbaty/Mutt2Task",
    "obsolete": false,
    "name": "Mutt2Task",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Add TaskWarrior Task from Mutt",
    "category": "Unknown",
    "readme": "My variant of Mutt2Task originally here https github com ValiValpas taskopen",
    "compatibility": "2.4.1+",
    "description": "Add TaskWarrior Task from Mutt"
  },
  {
    "last_update": "2015-06-27",
    "author": [
      "Luis Carlos Cruz (carlitux)"
    ],
    "url_src": "https://github.com/linkux-it/battleground",
    "url": "https://github.com/linkux-it/battleground",
    "obsolete": false,
    "name": "battleground",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "injecting trello steroids to taskwarrior",
    "category": "Unknown",
    "readme": "Battleground Battleground is a command line tool to improve taskwarrior Or hooks still pending this definition First feature is just sync with trello dashboard with some mapping on each sides Taskwarrior Trello Project Task Board Task Card Features ________ 1 Both sides sync should create move edit cards on trello also on taskwarrior 2 Use start stop taskwarrior commands to track time This work should be defined by team this will allow to do better estimations 3 Create customs reports powered by task warrior",
    "compatibility": "2.4.1+",
    "description": "injecting trello steroids to taskwarrior"
  },
  {
    "last_update": "2016-02-11",
    "author": [
      "fmeynadier"
    ],
    "url_src": "https://github.com/fmeynadier/yatwtt",
    "url": "https://github.com/fmeynadier/yatwtt",
    "obsolete": false,
    "name": "yatwtt",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Yet another Taskwarrior time-tracker",
    "category": "Unknown",
    "readme": "yatwtt Yet another Taskwarrior time tracker A very limited attempt to add some time tracking abilities to Taskwarrior http www taskwarrior org work in progress Status update I more or less gave up on trying to reimplement a time tracking system around Taskwarrior But I found Gnome s Hamster https github com projecthamster hamster time tracker to be quite usable so instead I now use a hook to track time there instead This hook is very small and can be found here https github com fmeynadier taskwarrior hamster hook Goal The aim here is to embed the data within the tasks so it should be OK with servers using start and stop TW commands as inputs but keeping the possibility of altering it a posteriori to correct for mistakes or acknowledge some work done in the past The traditionnal way to do so storing data in the annotations makes those annotations overcrowded and useless and it is not very safe to edit Roadmap Write a hook that stores start stop date in an UDA e g timetracking Modify the tasktime https github com svenhertle tasktime script to take this data into account Write scripts that allow to manipulate those dates easily i e commands like task N started 2h ago start date set 2 h in the past still active task N worked 3h start date set 3h in the past and stop date set now etc Write conversion script that moves start stop annotations into the new UDA",
    "compatibility": "2.4.1+",
    "description": "Yet another Taskwarrior time-tracker"
  },
  {
    "last_update": "2014-11-09",
    "author": [
      "krobin (robinkaranu)"
    ],
    "url_src": "https://github.com/robinkaranu/task-hooks",
    "url": "https://github.com/robinkaranu/task-hooks",
    "obsolete": false,
    "name": "task-hooks",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "My (buggy, insecure) taskwarrior hooks",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "My (buggy, insecure) taskwarrior hooks"
  },
  {
    "last_update": "2016-01-23",
    "author": [
      "vigilancer"
    ],
    "url_src": "https://github.com/vigilancer/Potter",
    "url": "https://github.com/vigilancer/Potter",
    "obsolete": false,
    "name": "Potter",
    "theme": [
      "OSX"
    ],
    "verified": "2016-04-24",
    "language": [
      "Swift"
    ],
    "descriptionText": "Taskwarrior OS X taskbar extension",
    "category": "Unknown",
    "readme": "Potter Taskwarrior OS X taskbar extension Inspired by coddingtonbear taskwarrior pomodoro https github com coddingtonbear taskwarrior pomodoro But without pomodoro and written from scratch x Allows multiple filters x Properly tracks started stopped task state x and something else can t recall TODO elaborate readme ABANDONED turned out taskwarrior sucks hard one day I woke up with corruped database unreliable sadly maybe I ll write own taskwarrior with blackjack and all or not or not is a safe bet I guess",
    "compatibility": "2.4.1+",
    "description": "Taskwarrior OS X taskbar extension"
  },
  {
    "last_update": "2016-04-23",
    "author": [
      "brieashley",
      "bbbbbrie"
    ],
    "url_src": "https://github.com/brieashley/taskrc",
    "url": "https://github.com/brieashley/taskrc",
    "obsolete": false,
    "name": "taskrc",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "My ~/.taskrc file for taskwarrior",
    "category": "Unknown",
    "readme": "taskrc Taskwarrior http taskwarrior org taskwarrior org is Free and Open Source Software that manages your TODO list from the command line It is flexible fast and unobtrusive It does its job then gets out of your way This is my taskrc containing my preferred customizations For optimal performance use with terminator http gnometerminator blogspot com p introduction html terminator and solarized https github com ghuntley terminator solarized terminator solarized Feel free to clone fork and improve task list task list images task list png raw true task list task burndown daily task burndown daily images task burndown daily png raw true task burndown daily",
    "compatibility": "2.4.1+",
    "description": "My ~/.taskrc file for taskwarrior"
  },
  {
    "last_update": "2015-07-07",
    "author": [
      "Paul Beckingham (pbeckingham)",
      "Renato Alves (Unode)",
      "Federico Hernandez (recollir)",
      "Dirk Deimeke (ddeimeke)",
      "elenril",
      "Ben Boeckel (mathstuf)",
      "Rainer M\u00fcller (raimue)",
      "Dominik Heidler (asdil12)",
      "Jochen Sprickerhof (jspricke)",
      "Marton Suranyi (susu)",
      "Pietro Cerutti (gahr)",
      "Ralph Bean (ralphbean)"
    ],
    "url_src": "https://github.com/goldenHairDafo/taskd",
    "url": "https://github.com/goldenHairDafo/taskd",
    "obsolete": false,
    "name": "taskd",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "C++"
    ],
    "descriptionText": "Mirror of the taskserver from taskwarrior.org ",
    "category": "Unknown",
    "readme": "Welcome To Taskserver Taskserver is a daemon or service that will allow you to share tasks among different client applications primarily Taskwarrior Taskserver is compatible with Taskwarrior version 2 4 x and later but works best with the latest Taskwarrior Taskserver is complex It is not for anyone who is unfamiliar with the operation of daemons Easiest Setup There is a setup script that will lead you through all necessary steps to setup the Taskserver create certs configure a client and sync script setup_server bash Alternately there is online documentation that will lead you through the separate steps http taskwarrior org docs taskserver setup html Documentation Most of the documentation has been moved online so we can continually improve it http taskwarrior org docs In addition there are two man pages installed taskd 1 taskdctl 1 taskdrc 5 Known Issues Please see this page for a list of issues and their status Taskwarrior https bug tasktools org browse TW Taskserver https bug tasktools org browse TD Feedback Your feedback is welcomed and encouraged Please send it to support taskwarrior org",
    "compatibility": "2.4.1+",
    "description": "Mirror of the taskserver from taskwarrior.org "
  },
  {
    "last_update": "2016-01-03",
    "author": [
      "Steffen Fritz (ampoffcom)"
    ],
    "url_src": "https://github.com/steffenfritz/ptwmail",
    "url": "https://github.com/steffenfritz/ptwmail",
    "obsolete": false,
    "name": "ptwmail",
    "theme": [
      "Mail"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "a mail-to-task application for TaskWarrior",
    "category": "Unknown",
    "readme": "ptwmail A mail to task application for TaskWarrior Inspired by twmail https github com nerab TaskWarriorMail which is written in Ruby and needs fetchmail ptwmail needs Python3 Important ptwmail expects a dedicated mail account It uses the mail payload as argument for task add see Examples Installation 1 Download 2 Configure the mail account in ptwmail py read the comments 3 Execute Examples 1 test ptwmail adds the task test ptwmail to your task list 2 test ptwmail due 2015 11 31 adds the task test ptwmail with due date 2015 11 31 to your task list 3 test ptwmail due 2015 11 31 github project TaskWarrior priority H adds the task test ptwmail with due date tag project and priority",
    "compatibility": "2.4.1+",
    "description": "a mail-to-task application for TaskWarrior"
  },
  {
    "last_update": "2015-11-24",
    "author": [
      "Brock Wilcox (awwaiid)"
    ],
    "url_src": "https://github.com/awwaiid/tw-gmail-star-sync",
    "url": "https://github.com/awwaiid/tw-gmail-star-sync",
    "obsolete": false,
    "name": "tw-gmail-star-sync",
    "theme": [
      "Mail"
    ],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "Sync TaskWarrior and Starred Gmail Emails",
    "category": "Unknown",
    "readme": "TaskWarrior Gmail Stars After setup throw this sucker in your crontab to run ever now and then Upon running Newly gmail starred thread add as a task Removed gmail star already task mark task done Task marked as done remove gmail star Which is pretty neat Now I star a message and it magically shows up in my TODO list If I address the message I can either un star it or mark it as done You might want to edit the script to add modify how your tasks get tagged TODO External config for new task tags",
    "compatibility": "2.4.1+",
    "description": "Sync TaskWarrior and Starred Gmail Emails"
  },
  {
    "last_update": "2016-03-12",
    "author": [
      "Raoul Ren\u00e9 Melcer (rrmelcer)"
    ],
    "url_src": "https://github.com/rrmelcer/asana-warrior",
    "url": "https://github.com/rrmelcer/asana-warrior",
    "obsolete": false,
    "name": "asana-warrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "Exchange tasks from asana.com and Taskwarrior",
    "category": "Unknown",
    "readme": "asana warrior Exchange tasks from asana com https asana com and Taskwarrior http taskwarrior org Build Status https travis ci org rrmelcer asana warrior svg branch master https travis ci org rrmelcer asana warrior codecov io https codecov io github rrmelcer asana warrior coverage svg branch master https codecov io github rrmelcer asana warrior branch master",
    "compatibility": "2.4.1+",
    "description": "Exchange tasks from asana.com and Taskwarrior"
  },
  {
    "last_update": "2016-03-31",
    "author": [
      "Enrico Zini (spanezz)"
    ],
    "url_src": "https://github.com/spanezz/calcli",
    "url": "https://github.com/spanezz/calcli",
    "obsolete": false,
    "name": "calcli",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Taskwarrior-inspired CalDAV command line tool.",
    "category": "Unknown",
    "readme": "calcli command line calendar tool Taskwarrior inspired command line calendar tool built on top of khal http lostpackets de khal s library",
    "compatibility": "2.4.1+",
    "description": "Taskwarrior-inspired CalDAV command line tool."
  },
  {
    "last_update": "2014-09-12",
    "author": [
      "kostajh"
    ],
    "url_src": "https://github.com/kostajh/seed-drill",
    "url": "https://github.com/kostajh/seed-drill",
    "obsolete": false,
    "name": "seed-drill",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Log your times in Harvest from Taskwarrior",
    "category": "Unknown",
    "readme": "Seed Drill A seed drill is a sowing device that precisely positions seeds in the soil and then covers them And this is a script to automate logging your times in Harvest http getharvest com from Taskwarrior http taskwarrior org tasks Usage task harvest 3 takes the time stored in task 3 and logs it in the appropriate project in Harvest with the task type you specify Use task start and task stop as usual to track your time When you re ready to log your time type task id uuid mod actual time where time is the actual amount of time you spent on the task maybe your Taskwarrior timer wasn t totally accurate Then type task harvest id uuid and you re done Install Clone this repo somewhere Configuration Quite a bit of configuration is needed But don t worry you only need to do this once Taskwarrior Configuration UDAs Create the following UDAs in your taskrc file uda actual type duration uda actual label Actual Time uda harvestcomment type string uda harvestcomment label Harvest Comment uda harvestproject type numeric uda harvestproject label Harvest Project uda harvesttasktype type numeric uda harvesttasktype label Harvest Task Type Add a command alias Add something like the following to your taskrc alias harvest execute python path to seed drill seed drill command py In this example harvest is the name of the command e g task harvest 3 but you can call this whatever you want Seed Drill Configuration Setup your credentials file Create a file at harvest credentials yml Enter this text and update the subdomain email and password values subdomain email email password password If you are using multiple accounts just add another item to the array subdomain email email password password subdomain_two email another_email password password_two Defining your task types Replace subdomain email and password below curl https subdomain harvestapp com daily H Accept application json H Content Type application json u email password X GET harvest subdomain json Repeat for each subdomain you use to track times Whenever you update your projects task types in Harvest you should re run this command to get the latest data Create your project map In Taskwarrior you probably track projects with project names like example and misc or hopefully something more interesting than that You need to define a mapping of Taskwarrior project names to Harvest project IDs For example example name Example project id 5990760 misc name Miscellany id 6300599 Save this content in harvest projects yml Look in the previously created harvest subdomain json to find project IDs Make sure you use unique project keys across multiple accounts e g don t have misc as a Taskwarrior project that maps to multiple Harvest subdomains",
    "compatibility": "2.4.1+",
    "description": "Log your times in Harvest from Taskwarrior"
  },
  {
    "last_update": "2015-06-26",
    "author": [
      "Tray (torrancew)"
    ],
    "url_src": "https://github.com/torrancew/arch-taskd",
    "url": "https://github.com/torrancew/arch-taskd",
    "obsolete": false,
    "name": "arch-taskd",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Arch PKGBUILD for the TaskWarrior TaskServer",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "Arch PKGBUILD for the TaskWarrior TaskServer"
  },
  {
    "last_update": "2015-09-01",
    "author": [
      "David J Patrick (linuxcaffe)"
    ],
    "url_src": "https://github.com/linuxcaffe/tw-vim-color",
    "url": "https://github.com/linuxcaffe/tw-vim-color",
    "obsolete": false,
    "name": "tw-vim-color",
    "theme": [
      "Vim"
    ],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "color configurations for taskwarrior-in-vim",
    "category": "Unknown",
    "readme": "tw vim color color configurations for taskwarrior in vim",
    "compatibility": "2.4.1+",
    "description": "color configurations for taskwarrior-in-vim"
  },
  {
    "last_update": "2013-11-27",
    "author": [],
    "url_src": "https://github.com/gerrowadat/tasksergeant",
    "url": "https://github.com/gerrowadat/tasksergeant",
    "obsolete": false,
    "name": "tasksergeant",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "AppEngine based repository for taskwarrior tasks.",
    "category": "Unknown",
    "readme": "Still in active dev prototyping",
    "compatibility": "2.4.1+",
    "description": "AppEngine based repository for taskwarrior tasks."
  },
  {
    "last_update": "2014-03-29",
    "author": [],
    "url_src": "https://github.com/nerab/twtest",
    "url": "https://github.com/nerab/twtest",
    "obsolete": false,
    "name": "twtest",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "Helpers for writing TaskWarrior tests in Ruby",
    "category": "Unknown",
    "readme": "twtest Helpers for writing TaskWarrior http taskwarrior org tests in Ruby It isolates tests by running TaskWarrior tests in their own data directory independent from any default data directory you may have on your workstation Build Status https secure travis ci org nerab twtest png branch master http travis ci org nerab twtest Installation Add this line to your application s Gemfile gem twtest And then execute bundle Or install it yourself as gem install twtest Usage Have a look at the example nerab twtest blob master test unit test_example rb Contributing 1 Fork it 2 Create your feature branch git checkout b my new feature 3 Commit your changes git commit am Added some feature 4 Push to the branch git push origin my new feature 5 Create new Pull Request",
    "compatibility": "2.4.1+",
    "description": "Helpers for writing TaskWarrior tests in Ruby"
  },
  {
    "last_update": "2015-10-04",
    "author": [
      "Peadar Grant (peadargrant)"
    ],
    "url_src": "https://github.com/peadargrant/semestertask",
    "url": "https://github.com/peadargrant/semestertask",
    "obsolete": false,
    "name": "semestertask",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Semester-centric task addition script for taskwarrior",
    "category": "Unknown",
    "readme": "Semester task prep script c 2016 Peadar Grant What this program does TaskWarrior is a great way for managing weekly teaching prep tasks for academics Although it features an inbuilt recurrence feature some workflows require repeated tasks to be distinctly numbered For example a lecture course might have 3 lectures each week for 13 weeks each with an associated prep task semestertask py is one way to automate the insertion of those tasks Key features Works on a simple week class numbering scheme to easily distinguish jobs Inserted jobs can be associated with a project Chain dependencies of each task to its predecessor are possible but there seems to be an O n 2 issue in the underlying library Due date can be set to a specific day of the week relative to a base date time Wait time can be set relative to the due date in days",
    "compatibility": "2.4.1+",
    "description": "Semester-centric task addition script for taskwarrior"
  },
  {
    "last_update": "2016-01-17",
    "author": [
      "Alexander Guschin (Rag0n)"
    ],
    "url_src": "https://github.com/Rag0n/TaskBerserk",
    "url": "https://github.com/Rag0n/TaskBerserk",
    "obsolete": false,
    "name": "TaskBerserk",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "TaskWarrior client app for iOS. MVVM + RxSwift",
    "category": "Unknown",
    "readme": "TaskBerserk TaskBerserk is a TaskWarrior tw client for iOS App uses Inthe am intheam RESTful API for syncing with TaskWarrior Feel free to create issues especially enhancement Current state Currently app is in early development stage Current development develop branch version v0 1 0 contains next improvements Basic functionality x Add tasks x Remove tasks Edit tasks x Change task s names Change task s project Change task s tags Change task s priority Basic gestures Done taskg Delete task x Fetching task via Intheam x Local storage CoreData Additional functionality x View all projects View all tags View project s tasks View tag s tasks Roadmap v0 1 0 Basic functionality fetching via Intheam v0 2 0 Syncing via Intheam v0 3 0 Better compatibility support depends on tasks sub projects gestures v0 4 0 Filters searching v0 5 0 UI v0 6 0 Calendar notifications v0 7 0 Reports charts Installation For now the only way to install app is to download and build it from a release page releases or clone from current development branch develop branch You should also add an AppKey plist file to project with your Inthe am API key xml dict key Intheam key string Your API Key string dict Changes v0 0 5 Prototype with support of syncing task via Inthe am intheam API App parses JSON into tasks and projects Licence TaskBerserk is released under MIT license For details see LICENSE license intheam https inthe am about tw http taskwarrior org releases https github com Rag0n TaskBerserk releases license LICENSE md version 0 0 5 https github com Rag0n TaskBerserk releases tag v0 0 5 develop branch https github com Rag0n TaskBerserk tree develop",
    "compatibility": "2.4.1+",
    "description": "TaskWarrior client app for iOS. MVVM + RxSwift"
  },
  {
    "last_update": "2016-02-21",
    "author": [
      "liloman"
    ],
    "url_src": "https://github.com/liloman/pomodoroTasks",
    "url": "https://github.com/liloman/pomodoroTasks",
    "obsolete": false,
    "name": "pomodoroTasks",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Systray app for pomodoro with taskwarrior",
    "category": "Unknown",
    "readme": "Don t make any excuse anymore to not use the Pomodoro Technique https en wikipedia org wiki Pomodoro_Technique Info Pomodoro technique allows you to concentrate on the current task and take short breaks meanwhile works If you get that and join it with a task manager alike taskwarrior or any other you can have a complete workflow accounting the time spend on any task meanwhile you take the proper rests for your brain body life and eyes A week hack project Dependencies 1 flock 2 inotify tools 3 yad 4 OPTIONAL taskwarrior or any task management You can modify eliminate this part very easily Great tools all indeed Why yet another pomodoro app There isn t anything with taskwarrior alike for linux AFAIK o Screenshots Relax time 25 minutes passed images screenshots timer1 png 25 minutes passed Back to work Back to work images screenshots timer2 png Back to work Trayicon Started with tooltip images screenshots started png Started with tooltip Paused with menu images screenshots paused png Paused with menu Stopped images screenshots stopped png Stopped Change Task images screenshots changeTask png Change task Change Task 2 images screenshots changeTask2 png Change task 2 Add new Task images screenshots addTask png Add new Task Install The typical workflow is start the daemon once log in systemd openbox autostart bash_profile and then control it with the simple trayicon app There is included a simple cli client tool too Spec Boilerplate implementation of the pomodoro technique with a bash written client server architecture Minimalistic implementation with FSM Finite State Machine mutex flock and some bash niceness TODO x Make the gtk trayicon app yad rulez x Only one daemon instance x Taskwarrior integration dbus branch Unit testing bats FIXED 1 Fix report weird bug with combo box values when changed from child form",
    "compatibility": "2.4.1+",
    "description": "Systray app for pomodoro with taskwarrior"
  },
  {
    "last_update": "2014-05-20",
    "author": [
      "dylanchase"
    ],
    "url_src": "https://github.com/dylanchase/pinboard",
    "url": "https://github.com/dylanchase/pinboard",
    "obsolete": false,
    "name": "pinboard",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "HTML exporter for Taskwarrior based on ",
    "category": "Unknown",
    "readme": "pinboard HTML exporter for Taskwarrior based on Pinboard HTML available at http taskwarrior org projects taskwarrior wiki ExternalScripts My version just adds the time that the export was performed at and a wrapper shell script which redirects the html to a file In my case I redirect the file to a dropbox folder Installation Make both files executable Also you will need to adjust the project list in update_todo sh to match your project list and you will need to adjust the paths in update_todo sh as needed",
    "compatibility": "2.4.1+",
    "description": "HTML exporter for Taskwarrior based on "
  },
  {
    "last_update": "2014-09-19",
    "author": [
      "jake (jakejohns)"
    ],
    "url_src": "https://github.com/jakejohns/py-muttwarrior",
    "url": "https://github.com/jakejohns/py-muttwarrior",
    "obsolete": false,
    "name": "py-muttwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "utility for mutt, taskwarrior, and taskopen",
    "category": "Unknown",
    "readme": "py muttwarrior utility for mutt taskwarrior and taskopen",
    "compatibility": "2.4.1+",
    "description": "utility for mutt, taskwarrior, and taskopen"
  },
  {
    "last_update": "2014-09-02",
    "author": [
      "neingeist (neingeist)"
    ],
    "url_src": "https://github.com/neingeist/task-recurring-delete",
    "url": "https://github.com/neingeist/task-recurring-delete",
    "obsolete": false,
    "name": "task-recurring-delete",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Delete overdue, recurring & duplicate taskwarrior tasks",
    "category": "Unknown",
    "readme": "Delete all overdue recurring and duplicate taskwarrior tasks and keep only the first of a kind Needs the taskw Python bindings to run This is a workaround for this issue https bug tasktools org browse TW 1314",
    "compatibility": "2.4.1+",
    "description": "Delete overdue, recurring & duplicate taskwarrior tasks"
  },
  {
    "last_update": "2015-11-30",
    "author": [
      "Homer Painter (hpainter)"
    ],
    "url_src": "https://github.com/hpainter/task-toggl",
    "url": "https://github.com/hpainter/task-toggl",
    "obsolete": false,
    "name": "task-toggl",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "Taskwarrior CSV export for toggl.com",
    "category": "Unknown",
    "readme": "Taskwarrior CSV exporter for Toggl com Export taskwarrior start stop times for import into toggl com Usage Usage task toggl rb options Options e email EMAIL Toggl user email address s start_annotation TEXT Start annotation Default Started task z stop_annotation TEXT Stop annotation Default Stopped task x export cmd CMD Command used to export task data Default task export h help Prints this help Options can be stored in a config file at task toggl yml see included example Notes Only items that include start stop time annotations are included in the script output By default the export is configured to map taskwarrior item descriptions to toggl s Project field This is just how I like it but if you want to use the taskwarrior project name and include the description as the toggl Task then just update the field mapping in the config file Also see http support toggl com csv import new",
    "compatibility": "2.4.1+",
    "description": "Taskwarrior CSV export for toggl.com"
  },
  {
    "last_update": "2016-03-14",
    "author": [
      "Felix Mai (8ware)"
    ],
    "url_src": "https://github.com/8ware/task-dashboard",
    "url": "https://github.com/8ware/task-dashboard",
    "obsolete": false,
    "name": "task-dashboard",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Perl"
    ],
    "descriptionText": "A tmux-based dashboard for taskwarrior",
    "category": "Unknown",
    "readme": "task dashboard A tmux based dashboard for taskwarrior Screenshot doc screenshot png Setup 1 Clone repository git clone https github com 8ware task dashboard git 2 Copy sample configuration file to its expected location cp doc sample config json task dashboard json If the task shell is not available the last command must be adjusted 3 Start dashboard preferably maximized urxvt e PWD task dashboard Layout Configuration The configuration of the layout is closely tied to tmux behavior of splitting windows Thus the target pane and execution order does matter The layout is constructed splitting a pivot pane i e the pane which would be focussed if splitting manually The layout configuration consists of a key which is the layout specification and an array of commands as its value Instead of a command another nested layout can be specified which allows to create more complex setups The keys have the following structure h v pN lN Such a layout specification consists of a split direction i e h or v as used with the tmux split window command h for a vertical and v for a horizontal split one pivot pane indicator and one or more split directives e g percentage p33 for a pane ratio of 2 1 or lines l2 for creating a pane with just two lines height For example the layout v l2 p33 will result in tree panes which are split horizontally where the top pane is two lines high the bottom pane is approx one third of the window height i e a third of the window s height minus the two previously split lines and the middle pane fills the rest of the space since it is the pivot pane When constructing an own layout the split order has to be taken into account Internally the list of split directives is processed in the following order 1 all directives before the pivot pane indicator split above 2 all directives after the pivot pane indicator split below in reverse order Consider the following directives v p50 p33 This will split the pane into three even panes First the pane is split with a 2 1 ratio then the pane is split again with a 1 1 ratio resulting in 1 1 1 See the example configuration doc sample config json file for a more complex example WARNING If you don t pay attention to always include the rc hooks off option in task commands use rc verbose hook to avoid unnecessary output you easily create a fork bomb because using task commands invokes the hook which updates the view again Markers Markers are used to annotate commands to indicate special handling for them Currently two markers are supported the focus marker and the no update marker The former can be used to focus a certain pane after layouting has been finished the latter will prevent execution of that command when updating the views e g when running task shell in one pane Note that the order of the marker matters for now valid invalid Any improvements especially regarding more intuitive ways of describing the layout are appreciated",
    "compatibility": "2.4.1+",
    "description": "A tmux-based dashboard for taskwarrior"
  },
  {
    "last_update": "2016-03-10",
    "author": [
      "Alan Young (harleypig)"
    ],
    "url_src": "https://github.com/harleypig/node-twlib",
    "url": "https://github.com/harleypig/node-twlib",
    "obsolete": false,
    "name": "node-twlib",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "A TaskWarrior library for Node.js",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "A TaskWarrior library for Node.js"
  },
  {
    "last_update": "2016-03-30",
    "author": [
      "Matthias Beyer (matthiasbeyer)",
      "Erick Tryzelaar (erickt)"
    ],
    "url_src": "https://github.com/matthiasbeyer/task-hookrs",
    "url": "https://github.com/matthiasbeyer/task-hookrs",
    "obsolete": false,
    "name": "task-hookrs",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Rust"
    ],
    "descriptionText": "A Rust library for writing taskwarrior hooks and general interfacing with taskwarrior",
    "category": "Unknown",
    "readme": "task hookrs task hookrs is a rust library for writing taskwarrior https taskwarrior org hooks License task hookrs A Rust library for writing taskwarrior hooks and general interfacing with taskwarrior Copyright C 2016 Matthias Beyer This library is free software you can redistribute it and or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation either version 2 1 of the License or at your option any later version This library is distributed in the hope that it will be useful but WITHOUT ANY WARRANTY without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU Lesser General Public License for more details You should have received a copy of the GNU Lesser General Public License along with this library if not see http www gnu org licenses For more information and the full license text see the LICENSE file LICENSE",
    "compatibility": "2.4.1+",
    "description": "A Rust library for writing taskwarrior hooks and general interfacing with taskwarrior"
  },
  {
    "last_update": "2015-11-06",
    "author": [
      "\u00d3scar Garc\u00eda Amor (ogarcia)"
    ],
    "url_src": "https://github.com/ogarcia/trellowarrior",
    "url": "https://github.com/ogarcia/trellowarrior",
    "obsolete": false,
    "name": "trellowarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Tool to sync Taskwarrior projects with Trello boards",
    "category": "Unknown",
    "readme": "TrelloWarrior Tool to sync Taskwarrior projects with Trello boards Requeriments In Taskwarrior First for all you need configure some UDAs in Taskwarrior to store some Trello data This is very very very important If you dont have the UDAs configured before run TrelloWarrior you ll destroy your Taskwarrior tasks data To set UDAs in Taskwarrior simply edit taskrc and add the following lines UDAs uda trelloid type string uda trelloid label Trello ID uda trellolistname type string uda trellolistname label Trello List Name The first UDA trelloid is used to store the Trello Card ID and establish an equivalence between Trello Cards and Taskwarrior Tasks Note that you never never never never period should edit this field The second UDA trellolistname is used to determine the Trello List where the Card Task is stored You can edit this field without problems to move task of list For TrelloWarrior Prepare environ For run TrelloWarrior you need to install tasklib https github com robgolding63 tasklib and py trello https github com sarumont py trello TrelloWarrior uses this python helpers to comunicate with Taskwarrior and Trello You can use you package system to install it but the easy form is use a Python 2 7 Virtualenv sh virtualenv2 trw trw bin activate pip install tasklib pip install py trello Note that in several distributions the Virtualenv executable is called simply virtualenv instead virtualenv2 Get the keys TrelloWarrior access to Trello via API You need generate an access token for it First go to https trello com app key to get your API Key and API Secret In a bash compatible shell run the following exports to config configure with your data sh export TRELLO_API_KEY your_api_key export TRELLO_API_SECRET your_api_secret export TRELLO_NAME TrelloWarrior export TRELLO_EXPIRATION 30days Note You can set the TRELLO_EXPIRATION to 1hour 1day 30days never We recomend use 30days for tests and never for daily use Run now the trello util into Virtualenv to get token and token secret sh python trw lib python2 7 site packages trello util py This return some like this Request Token oauth_token 1c5ad394834dde42a7655437ab3e0060 oauth_token_secret dffc3a62622ef450028f685406bceacc Go to the following link in your browser https trello com 1 OAuthAuthorizeToken oauth_token 1c5ad334134dde46a8659437ab3e0069 scope read write expiration 30days name trellowarrior Have you authorized me y n You must visit the link to authorize the token This gives you a pin like this You have granted access to your Trello information To complete the process please give this verification code 17894a35a2f745c3a184cf8e4bb5f1f9 Respond yes and insert the pin What is the PIN 17894a35a2f745c3a184cf8e4bb5f1f9 Access Token oauth_token 0469c6271416af6eae10123fdae0afc1135e9082bb0b5ba87b2f8a1db9d7f0b1 oauth_token_secret a978b159692cfc315377790669ac99a0 You may now access protected resources using the access tokens above Finaly you have access tokens to put in TrelloWarrior config file Configuration The TrelloWarrior config is very easy There is a trellowarrior conf sample file that you can modify to set with your data DEFAULT Section In DEFAULT section is mandatory set you Trello API key and token and at least one sync proyect The sync proyect corresponds with the next sections that define the Taskwarrior project and Trello board equivalence taskwarrior_taskrc_location Optional Define where is located your taskrc file Default taskrc taskwarrior_data_location Optional Define where is located your task data dir Default task trello_api_key MANDATORY Your Trello Api Key trello_api_secret MANDATORY Your Trello Api Secret trello_token MANDATORY Your Trello Token trello_token_secret MANDATORY Your Trello Token Secret sync_projects MANDATORY Define what sections are loaded separated by spaces Project Board Sections The Project Board sections are called from sync_projects and define the equivalence betwen Taskwarrior and Trello tw_project_name MANDATORY The name of project in Taskwarrior trello_board_name MANDATORY The name of Trello Board trello_todo_list Optional The name of Trello list where new pending tasks are stored Default To Do trello_doing_list Optional The name of Trello list for active tasks Default Doing trello_done_list Optional The name of Trello list for done taks Default Done Equivalences Taskwarrior Trello UDA trelloid Card ID UDA trellolistname List Name Project Board Name Description Card Name Due Card Due Date Know limitations The main objetive of TaskWarrior is be simple so it doesn t manage colisions The sync strategy is last modified wins this means that if you do a modification in Trello and later a modification in Taskwarrior TrelloWarrior does the sync and maintain the Taskwarrior data cause it is the last touched You can have infinite lists in your Trello but all of them are considered as pending You only can have one doing list and one done list but this lists can be configured For now only syncs Title Description Due dates and Status",
    "compatibility": "2.4.1+",
    "description": "Tool to sync Taskwarrior projects with Trello boards"
  },
  {
    "last_update": "2016-02-03",
    "author": [
      "David J Patrick (linuxcaffe)"
    ],
    "url_src": "https://github.com/linuxcaffe/tw-fix-uuid-dupe-sh",
    "url": "https://github.com/linuxcaffe/tw-fix-uuid-dupe-sh",
    "obsolete": false,
    "name": "tw-fix-uuid-dupe-sh",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "(placeholder for) a script to help \"fix\" taskwarrior duplicate uuids",
    "category": "Unknown",
    "readme": "tw fix uuid dupe sh placeholder for a script to help fix taskwarrior duplicate uuids",
    "compatibility": "2.4.1+",
    "description": "(placeholder for) a script to help \"fix\" taskwarrior duplicate uuids"
  },
  {
    "last_update": "2016-01-08",
    "author": [
      "David J Patrick (linuxcaffe)"
    ],
    "url_src": "https://github.com/linuxcaffe/tw-ann-hook",
    "url": "https://github.com/linuxcaffe/tw-ann-hook",
    "obsolete": false,
    "name": "tw-ann-hook",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "A taskwarrior hook that enables automatic and multi-line annotations.",
    "category": "Unknown",
    "readme": "tw ann hook A taskwarrior hook that enables automatic and multi line annotations STATUS Imaginary this is a stub of an idea What would tw ann hook do Currently to add an annotation in taskwarrior issue the command task 142 annot This is the text of the annotation but if you just use task 142 annot you get error message Additional text must be provided Instead of that error message this hook would start your editor as long as it s vim and open a buffer as annotation text On saving the file the line breaks and tab chars are translated to JSON esc codes and the text is saves as the annotation The other thing this hook would should could do is to allow a configutable tag like ann that opens the edit annotation vim function for a task whenever it is started or completed",
    "compatibility": "2.4.1+",
    "description": "A taskwarrior hook that enables automatic and multi-line annotations."
  },
  {
    "last_update": "2016-03-28",
    "author": [
      "John Nelson (celador)"
    ],
    "url_src": "https://github.com/celador/CodeTask",
    "url": "https://github.com/celador/CodeTask",
    "obsolete": false,
    "name": "CodeTask",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "TypeScript"
    ],
    "descriptionText": "CodeTask is a Visual Studio Code for TaskWarrior Integration",
    "category": "Unknown",
    "readme": "README This is the README for your extension CodeTask You can author your README using Visual Studio Code Here are some useful editor keyboard shortcuts Split the editor Cmd on OSX or Ctrl on Windows and Linux Toggle preview Shift CMD V on OSX or Shift Ctrl V on Windows and Linux Press Ctrl Space Windows Linux or Cmd Space OSX to see a list of Markdown snippets For more information Visual Studio Code s Markdown Support http code visualstudio com docs languages markdown Markdown Syntax Reference https help github com articles markdown basics Enjoy",
    "compatibility": "2.4.1+",
    "description": "CodeTask is a Visual Studio Code for TaskWarrior Integration"
  },
  {
    "last_update": "2014-09-19",
    "author": [
      "Ankur Sinha (sanjayankur31)"
    ],
    "url_src": "https://github.com/sanjayankur31/task-theme",
    "url": "https://github.com/sanjayankur31/task-theme",
    "obsolete": false,
    "name": "task-theme",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "A repository where I play around with taskwarrior theme files",
    "category": "Unknown",
    "readme": "task theme A repository where I play around with taskwarrior theme files",
    "compatibility": "2.4.1+",
    "description": "A repository where I play around with taskwarrior theme files"
  },
  {
    "last_update": "2015-02-11",
    "author": [
      "Mike Cooper (mythmon)"
    ],
    "url_src": "https://github.com/mythmon/bug-task",
    "url": "https://github.com/mythmon/bug-task",
    "obsolete": false,
    "name": "bug-task",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "Add tasks in Taskwarrior that correspond to Bugzilla bugs.",
    "category": "Unknown",
    "readme": "Add tasks in Taskwarrior http taskwarrior org that correspond to Bugzilla bugs",
    "compatibility": "2.4.1+",
    "description": "Add tasks in Taskwarrior that correspond to Bugzilla bugs."
  },
  {
    "last_update": "2015-03-17",
    "author": [
      "Jason Martin (jhmartin)"
    ],
    "url_src": "https://github.com/jhmartin/taskd-ami",
    "url": "https://github.com/jhmartin/taskd-ami",
    "obsolete": false,
    "name": "taskd-ami",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "Repo to support creating a Taskwarrior Taskd AMI",
    "category": "Unknown",
    "readme": "taskd ami Repo to support creating a Taskwarrior Taskd AMI",
    "compatibility": "2.4.1+",
    "description": "Repo to support creating a Taskwarrior Taskd AMI"
  },
  {
    "last_update": "2015-02-15",
    "author": [
      "David J Patrick (linuxcaffe)"
    ],
    "url_src": "https://github.com/linuxcaffe/themes",
    "url": "https://github.com/linuxcaffe/themes",
    "obsolete": false,
    "name": "themes",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "16color and 256color, light and dark theme files for taskwarrior",
    "category": "Unknown",
    "readme": "taskwarrior themes _16color and 256color light and dark theme files for taskwarrior_ This is a set of alternate themes for taskwarrior http taskwarrior org They designed to be optimally readable and they are different from the current default set in two important ways they attempt to assign only a forground _or_ a background color to each element allowing color combinations that still mean something They use a completely different order of precedence embedded in each theme which means the colors are applied in a completely different sequence than the default set To try them out download clone them to a local directory and include one of them at a time in your taskrc file I keep mine in task themes pre example include task themes dark 256 theme pre",
    "compatibility": "2.4.1+",
    "description": "16color and 256color, light and dark theme files for taskwarrior"
  },
  {
    "last_update": "2015-09-07",
    "author": [
      "David J Patrick (linuxcaffe)"
    ],
    "url_src": "https://github.com/linuxcaffe/tw-workflow-hook",
    "url": "https://github.com/linuxcaffe/tw-workflow-hook",
    "obsolete": false,
    "name": "tw-workflow-hook",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "A taskwarrior taskpirate hook to initiate actions on task start",
    "category": "Unknown",
    "readme": "Taskwarrior Start Actions Hook This is a hook for TaskWarrior http www taskwarrior org which allows configurable actions to be initiated on task ID start Install Note This hook has been written to leverage taskpirate for greater hook efficiency Please see https github com tbabej taskpirate for instructions Don t worry it s straightforward git clone https github com linuxcaffe task start actions cp task start actions on task hooks This hook leverages tasklib so you need to install that too pip install tasklib Use case",
    "compatibility": "2.4.1+",
    "description": "A taskwarrior taskpirate hook to initiate actions on task start"
  },
  {
    "last_update": "2016-01-11",
    "author": [
      "Kevin Lanni (therealklanni)"
    ],
    "url_src": "https://github.com/therealklanni/taskwiz",
    "url": "https://github.com/therealklanni/taskwiz",
    "obsolete": false,
    "name": "taskwiz",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "Port of TaskWarrior as a Node.js library",
    "category": "Unknown",
    "readme": "TaskWiz Build Status https travis ci org therealklanni taskwiz svg branch master https travis ci org therealklanni taskwiz A TaskWarrior compatible Node js task library TaskWiz is a reimplementation port of the features of TaskWarrior in Node js This is the core library for implementing TaskWiz TaskWarrior in a JavaScript application",
    "compatibility": "2.4.1+",
    "description": "Port of TaskWarrior as a Node.js library"
  },
  {
    "last_update": "2016-04-11",
    "author": [
      "Jessica Lord (jlord)",
      "John Nelson (celador)",
      "Kevin Sawicki (kevinsawicki)",
      "Timothy Cyrus (tcyrus)",
      "Ivan \u017du\u017eak (izuzak)",
      "Ionic\u0103 Biz\u0103u (IonicaBizau)",
      "Clemens Tolboom (clemens-tolboom)",
      "Alexander Georgievskiy (galeksandrp)",
      "John Muhl (johnmuhl)",
      "Jumpei Ogawa (phanect)",
      "Zane Sterling (Shriken)",
      "bokuweb (bokuweb)",
      "fscherwi (fscherwi)",
      "Takahiro Kubo (icoxfog417)",
      "laiso (laiso)"
    ],
    "url_src": "https://github.com/celador/tasktray",
    "url": "https://github.com/celador/tasktray",
    "obsolete": false,
    "name": "tasktray",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "Task Tray is a tray app that helps with TaskWarrior",
    "category": "Unknown",
    "readme": "electron quick start Clone and run for a quick way to see an Electron in action This is a minimal Electron application based on the Quick Start Guide http electron atom io docs latest tutorial quick start within the Electron documentation A basic Electron application needs just these files index html A web page to render main js Starts the app and creates a browser window to render HTML package json Points to the app s main file and lists its details and dependencies You can learn more about each of these components within the Quick Start Guide http electron atom io docs latest tutorial quick start To Use To clone and run this repository you ll need Git https git scm com and Node js https nodejs org en download which comes with npm http npmjs com installed on your computer From your command line bash Clone this repository git clone https github com atom electron quick start Go into the repository cd electron quick start Install dependencies and run the app npm install npm start Learn more about Electron and its API in the documentation http electron atom io docs latest License CC0 Public Domain LICENSE md",
    "compatibility": "2.4.1+",
    "description": "Task Tray is a tray app that helps with TaskWarrior"
  },
  {
    "last_update": "2015-09-04",
    "author": [
      "David J Patrick (linuxcaffe)"
    ],
    "url_src": "https://github.com/linuxcaffe/taskdata",
    "url": "https://github.com/linuxcaffe/taskdata",
    "obsolete": false,
    "name": "taskdata",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "a taskwarrior utility program to directly manipulate task *.data files",
    "category": "Unknown",
    "readme": "taskdata a taskwarrior utility program to directly manipulate task data files status imaginary Taskwarrior http taskwarrior org users have long asked questions about ID s changing or not changing and about archiving tasks that are deleted to another file This imaginary program seeks to address this sort of action and adds a few as well bu directly manipulating the contents and sequence of the core taskdata files pending data completed data undo data and backlog data This is not to be taken lightly Manipulating the core data set presents a risk of data loss and threatens to confuse the task sync and undo logic but STILL I d like go ahead and describe this imaginary program as though the data integrity and task sync undo issues were all taken care of For the purposes of discussion please put those concerns on hold and imagine pre usage taskdata filter command target sort order commands backup target file copies all 4 data files taskrc to a dated taskdata gz or zip file revert source file overwrites taskdata files with dated taskdate gz defaults to newest check target file tests data files for errors format compliance dupe uuids etc filter archive target file matching tasks removed from completed data and appended to target file filter move target file matching tasks removed from pending data and appended to target file filter delete deletes matching tasks from completed data sort sort field s sort lines in pending data according to task sort field s config options set in script or config file backup_required yes no whether a date taskdata gz file must be present before proceding backup_frequency N sets the maximum number of days between backups 0 every time auto backup_keep N sets the number of backup files to keep 0 all backup_name YYYY_MM_DD_taskdata gz sets the default backup name template begins with valid date fmt backup_target_dir path sets the default backup folder archive_target path file data sets default archive target file move_target path file data sets default move target file sort_default field1 field2 sets default sort order defined like tasks report X sort config pre The taskdata command should generate ample feedback and confirmational prompts y n always check file format integrity and abort without changes if any errors are found add or remove entries to backlog data and undo data to reconcile the changes",
    "compatibility": "2.4.1+",
    "description": "a taskwarrior utility program to directly manipulate task *.data files"
  },
  {
    "last_update": "2015-06-28",
    "author": [
      "Vonpupp (vonpupp)"
    ],
    "url_src": "https://github.com/vonpupp/dotfiles-task",
    "url": "https://github.com/vonpupp/dotfiles-task",
    "obsolete": false,
    "name": "dotfiles-task",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "My dotfiles for taskwarrior and gcalcli. Managed by homeshick.",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "My dotfiles for taskwarrior and gcalcli. Managed by homeshick."
  },
  {
    "last_update": "2016-04-14",
    "author": [
      "Jack Desert (jackdesert)"
    ],
    "url_src": "https://github.com/jackdesert/freecinc",
    "url": "https://github.com/jackdesert/freecinc",
    "obsolete": false,
    "name": "freecinc",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "HTML"
    ],
    "descriptionText": "A hosted solution for syncing your TaskWarrior client",
    "category": "Unknown",
    "readme": "FreeCinc Setting up your own TaskServer http taskwarrior org docs taskserver why html takes some effort By running freecinc on the same server as your TaskServer you allow others access to sync with your TaskServer Like sharing is caring Like free beer Like love and a handshake Live on the Web The original FreeCinc is live on the web at FreeCinc com https freecinc com Setting up TaskServer Start with the TaskServer Docs http taskwarrior org docs taskserver setup html and get help in the taskwarrior channel on FreeNode Once you have your TaskServer syncing with a client set these variables in config location yml install_dir wherever pki_dir wherever pki salt whatever Then start the web server ideally in development mode the first time so you can see any error messages Starting the web server Development Mode Basic bundle exec rackup config freecinc ru With port specified bundle exec rackup config freecinc ru p 9952 With binding to 0 0 0 0 for use in a VM bundle exec rackup config freecinc ru o 0 0 0 0 With auto reloading bundle exec rerun rackup config freecinc ru o 0 0 0 0 background pattern rb Production Mode It is recommended that you start freecinc using the wrapper script That way if it dies it is immediately replaced with another nohup script run_freecinc_indefinitely sh Starting Guard LiveReload bundle exec guard g views Starting Sass cd path to freecinc bundle exec sass watch path to freecinc public sass path to freecinc public Starting taskd on the Server It is recommended that you start taskd using the wrapper script That way if it dies it is immediately replaced with another cd freecinc nohup script run_taskd_indefinitely sh Running tests bundle exec rspec GoLang Script to see if sync is still working The script in tools restart_unless_sync go is a remote monitoring service for taskd If you make changes to restart_unless_sync go build it go build restart_unless_sync go Then commit the changes and the changes to the executable which is named restart_unless_sync and push them to a remote monitoring server Put this in your crontab on the remote monitoring server LOG home ubuntu freecinc tools log go log home ubuntu freecinc tools bin restart_unless_sync LOG 2 LOG In order for it to work you must first set up taskwarrior on the server where you will run this script Script that kills taskd if the memory usage is too high It is recommended to run this script once a minute from your production server if you are experiencing occasional memory bloats with taskd freecinc tools restart_if_memory sh It is built as a bash script so that it can start up without inducing extra memory penalty in case the memory is already running out TODO Pull details from tools restart unless sync go out into a config file",
    "compatibility": "2.4.1+",
    "description": "A hosted solution for syncing your TaskWarrior client"
  },
  {
    "last_update": "2015-01-12",
    "author": [
      "Glitch (Glitch-is)"
    ],
    "url_src": "https://github.com/Glitch-is/InnaTasks",
    "url": "https://github.com/Glitch-is/InnaTasks",
    "obsolete": false,
    "name": "InnaTasks",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Sends your Assignments, Homework and Tests from Inna to TaskWarrior",
    "category": "Unknown",
    "readme": "InnaTasks Sends your Assignments Homework and Tests from Inna to TaskWarrior http taskwarrior org Work In Progress",
    "compatibility": "2.4.1+",
    "description": "Sends your Assignments, Homework and Tests from Inna to TaskWarrior"
  },
  {
    "last_update": "2016-02-04",
    "author": [
      "Adam Coddington (coddingtonbear)"
    ],
    "url_src": "https://github.com/coddingtonbear/nagios-taskserver-plugin",
    "url": "https://github.com/coddingtonbear/nagios-taskserver-plugin",
    "obsolete": false,
    "name": "nagios-taskserver-plugin",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Nagios plugin for monitoring Taskwarrior's Taskserver (AKA taskd)",
    "category": "Unknown",
    "readme": "Nagios Plugin for monitoring Taskwarrior s Taskserver Using this with Nagios 1 Install this package using pip pip install nagios taskserver plugin or from a clone of this repository using pip pip install or from a clone of this repository using setup py python setup py install 2 Copy plugin taskserver cfg and plugin restart_taskserver cfg into your nagios plugin path On Ubuntu 12 04 this will be etc nagios plugins config 3 Add a new service definition to your nagios services configuration e g etc nagios3 conf d services_nagios2 conf for example check that taskserver is running define service hostgroup_name taskservers service_description Taskserver check_command check_taskserver path to taskrc use generic service notification_interval 0 event_handler restart_taskserver sudo service taskd restart 4 Add a hostgroup matching the hostgroup name above to your hostgroup configuration e g etc nagios3 conf d hostgroups_nagios2 conf define hostgroup hostgroup_name taskservers alias Taskd Servers members your_hostname Using this with a Cron Job Add a cron job in a format like the following to your crontab usr local bin nagios_taskserver_plugin restart_if_failed task binary usr local bin task var taskd nagios taskrc usr sbin service taskd restart replacing usr local bin task with the path to your Taskwarrior client var taskd nagios taskrc with the path to your test clone s taskrc path and usr sbin service taskd restart with the command to run for restarting the Taskserver if it has become stuck",
    "compatibility": "2.4.1+",
    "description": "Nagios plugin for monitoring Taskwarrior's Taskserver (AKA taskd)"
  },
  {
    "last_update": "2016-03-16",
    "author": [
      "David J Patrick (linuxcaffe)",
      "Alan Young (harleypig)"
    ],
    "url_src": "https://github.com/linuxcaffe/tw-sched-sh",
    "url": "https://github.com/linuxcaffe/tw-sched-sh",
    "obsolete": false,
    "name": "tw-sched-sh",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "an urgency-driven, context-aware scheduling script for taskwarrior",
    "category": "Unknown",
    "readme": "tw sched sh _STATUS In development coming along still quite broken BEWARE _ An urgency driven context aware scheduling script for taskwarrior This script is designed to make the process of scheduling re scheduling and un scheduling even easier Instead of a complex algorithm tw sched sh uses taskwarrior contexts and filters and like with like to match candidates with targets Candidates are matching READY PENDING and not blocked or scheduled after now and served up most urgent first Targets are matching tasks with an upcoming sched date sorted soonest first The IDs are used as sched ID scheduled the list length is configurable SCREENSHOT Usage tsch sh b c context d h l limit r u task filters b batch mode Use n to override default limit c context override current context c none for no context d debug mode spews various debug info l N override batch limit to N items r re schedule mode acts on sched stale and sch tags u un schedule mode clear or reset currently scheduled tasks filters any trailing arguments are passed as task filters at the Schedule prompt ID offset eg 142 217 15min 67 2hr 123 2dy etc date offset including forms like mon eow 11th Jul10 etc h elp show this usage text q uit exit without changes Installing Clone this github repo To use task scripts paste this git clone github com linuxcaffe tw sched sh git task scripts in a console then put or symlink tsch sh in your PATH like ln s task scripts tw sched sh tsch sh task scripts tsch The sched rc file must be included from taskrc with an entry like include task scripts sched rc or tsch will exit with a message Edit this file to set user configs Modes By default tsch offers up the most urgent matching and ready tasks one at a time single mode By using the b flag batch mode tsch will act on groups of matching tasks up to a sched rc configured limit Override that batch limit by using a numeric value like b12 Using the r flag puts tsch into Re schedule mode starting with an option to clear any matching stale sched dates sched before today while adding a configurable sch tag Then any matching tasks with the sch tag are listed as candidates for re scheduling Using the u flag puts tsch into Un schedule mode candidates are matching already scheduled tasks to clear or reset their sched date at the Schedule prompr",
    "compatibility": "2.4.1+",
    "description": "an urgency-driven, context-aware scheduling script for taskwarrior"
  },
  {
    "last_update": "2016-04-19",
    "author": [
      "Povilas Staskus (nitesuit)",
      "Klaudijus (Saonela)"
    ],
    "url_src": "https://github.com/nitesuit/KanWarrior",
    "url": "https://github.com/nitesuit/KanWarrior",
    "obsolete": false,
    "name": "KanWarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "The TaskWarrior visualisation and extension for team management",
    "category": "Unknown",
    "readme": "",
    "compatibility": "2.4.1+",
    "description": "The TaskWarrior visualisation and extension for team management"
  },
  {
    "last_update": "2014-01-19",
    "author": [
      "Raymond Finzel (rfinz)"
    ],
    "url_src": "https://github.com/rfinz/taskui",
    "url": "https://github.com/rfinz/taskui",
    "obsolete": false,
    "name": "taskui",
    "theme": [
      "GUI"
    ],
    "verified": "2016-04-24",
    "language": [
      "Java"
    ],
    "descriptionText": "Thin GUI wrapper around SSH commands for managing your to-do list with Taskwarrior. GTD!",
    "category": "Unknown",
    "readme": "taskui Thin GUI wrapper around SSH commands for managing your to do list with Taskwarrior GTD Currently Pre Alpha",
    "compatibility": "2.4.1+",
    "description": "Thin GUI wrapper around SSH commands for managing your to-do list with Taskwarrior. GTD!"
  },
  {
    "last_update": "2015-03-30",
    "author": [
      "Will Paul (dropofwill)"
    ],
    "url_src": "https://github.com/dropofwill/task_time",
    "url": "https://github.com/dropofwill/task_time",
    "obsolete": false,
    "name": "task_time",
    "theme": [
      "Time"
    ],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "A taskwarrior plugin that adds time tracking and reporting features (still WIP)",
    "category": "Unknown",
    "readme": "task_time Travis CI Build Status https travis ci org dropofwill task_time svg branch master https travis ci org dropofwill task_time Coveralls Coverage Status https coveralls io repos dropofwill task_time badge svg https coveralls io r dropofwill task_time Description A taskwarrior plugin that adds time tracking and reporting features still WIP Usage task_time filter start stop switch edit modify report export Dependencies Taskwarrior 2 4 require custom UDAs recurrences and duration data types Ruby 2 currently untested on older versions Ruby gem in development dropofwill rtasklib http github com dropofwill rtasklib See task_time gemspec for the latest Ruby dependencies Build Instructions rake build Install rake install License Release under the MIT License MIT Copyright copy 2015 Will Paul Contributing 1 Fork it https github com my github username task_time fork 2 Create your feature branch git checkout b my new feature 3 Commit your changes git commit am Add some feature 4 Push to the branch git push origin my new feature 5 Create a new Pull Request Research Planning Research taskw v tasklib v new ruby bindings gem Decided to role my own ruby wrapper rtasklib http github com dropofwill rtasklib taskserver should I save all data in UDA s so taskserver can sync it properly Data Configuration Plan User taskrc Client Custom UDA data config stored in task clients yaml Project Default UDA data config stored in task projects yaml Tracking UDAs Estimate Custom UDA duration Progress Custom UDA number 0 1 optional user entered Accuracy Custom UDA number 0 1 Projection Custom UDA number 0 1 Time Custom UDA duration In Out pairs User Client Project default configs currency USD string hourly_rate 25 number rounding true boolean rounding_minutes 15 number User configs Project configs Client configs Reports Timesheet Workload Accuracy Resolution Time Punch Card a la Github Chart",
    "compatibility": "2.4.1+",
    "description": "A taskwarrior plugin that adds time tracking and reporting features (still WIP)"
  },
  {
    "last_update": "2016-02-18",
    "author": [
      "Adrian Sad\u0142ocha (Necior)"
    ],
    "url_src": "https://github.com/Necior/task-interval",
    "url": "https://github.com/Necior/task-interval",
    "obsolete": false,
    "name": "task-interval",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Script which adds tasks to taskwarrior with a bunch of intervals (due dates)",
    "category": "Unknown",
    "compatibility": "2.4.1+",
    "description": "Script which adds tasks to taskwarrior with a bunch of intervals (due dates)"
  },
  {
    "last_update": "2016-01-14",
    "author": [
      "Yanis Guenane (Spredzy)"
    ],
    "url_src": "https://github.com/Spredzy/ics2task",
    "url": "https://github.com/Spredzy/ics2task",
    "obsolete": false,
    "name": "ics2task",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "A CLI tool to import ICS (RFC5455) event into task in TaskWarrior",
    "category": "Unknown",
    "readme": "ics2task A CLI tool to import ICS RFC5455 event into task in TaskWarrior Considering that an event Meeting Todo Call etc is nothing more than a todo task with a set date it makes perfect sense to be able to import them into TaskWarrior By default the tasks imported are imported in the ics2task project Once imported running task calendar will give you your agenda Requires This module requires two other python modules icalendar to parse RFC5455 compliant data taskw python bindings for TaksWarrior It works both on python2 and python3 Install This module is available on pip pip install ics2task Example ics2task can either take a file or an input stream ics2task path to ics file ics task project ics2task or cat path to ics file ics ics2task task project ics2task It becomes really handy in use with mutt where one could add a maccro that would pipe and attached ics file into ics2task directly",
    "compatibility": "2.4.1+",
    "description": "A CLI tool to import ICS (RFC5455) event into task in TaskWarrior"
  },
  {
    "last_update": "2016-03-24",
    "author": [
      "Bruno Vernay (BrunoVernay)"
    ],
    "url_src": "https://github.com/BrunoVernay/tw-html-parse",
    "url": "https://github.com/BrunoVernay/tw-html-parse",
    "obsolete": false,
    "name": "tw-html-parse",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "HTML"
    ],
    "descriptionText": "Parse the TaskWarrior page describing the tools and extensions. Output a JSON file.",
    "category": "Unknown",
    "readme": "tw html parse Parse the TaskWarrior page describing the tools and extensions Output a JSON file This is an utility that is used to migrate the current page http taskwarrior org tools to a new page http brunovernay github io taskwarrior site test Front 20Ends It parses the HTML data from the origin page and outputs a JSON file that is used by the new page to display data Currently this is a one shot migration tool but it could evolve to be used as a more recurent tool to check for new data and updates There is an API to get GitHub info https github com kohsuke github api",
    "compatibility": "2.4.1+",
    "description": "Parse the TaskWarrior page describing the tools and extensions. Output a JSON file."
  },
  {
    "last_update": "2015-06-02",
    "author": [
      "Andrew Grathwohl (agrathwohl)"
    ],
    "url_src": "https://github.com/agrathwohl/pushupwarrior",
    "url": "https://github.com/agrathwohl/pushupwarrior",
    "obsolete": false,
    "name": "pushupwarrior",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Ruby"
    ],
    "descriptionText": "Make and maintain a daily pushups routine via taskwarrior and pgp integration",
    "category": "Unknown",
    "readme": "pushupwarrior Make and maintain a daily pushups routine via taskwarrior and pgp integration Pushup Warrior http upload wikimedia org wikipedia commons 7 74 Push ups 3 1 png We re gonna take you from zero to hero",
    "compatibility": "2.4.1+",
    "description": "Make and maintain a daily pushups routine via taskwarrior and pgp integration"
  },
  {
    "last_update": "2015-08-26",
    "author": [
      "Lars (FiskerLars)"
    ],
    "url_src": "https://github.com/FiskerLars/taskharrier",
    "url": "https://github.com/FiskerLars/taskharrier",
    "obsolete": false,
    "name": "taskharrier",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Haskell"
    ],
    "descriptionText": "Small script to parse ics and execute taskwarrior to generate a new task from vcEvents",
    "category": "Unknown",
    "readme": "taskharrier Small script to parse ics and execute taskwarrior to generate a new task from vcEvents from the email invitations people tend to spread around Use it for example by including it into your mailcap file pre application ics taskharrier s needsterminal description Add Event Invitations to taskwarrior nametemplate s ics pre Compilation Follow the basic sandboxed installation guide https www haskell org cabal users guide installing packages html developing with sandboxes pre cabal sandbox init cabal install only dependencies cabal build pre",
    "compatibility": "2.4.1+",
    "description": "Small script to parse ics and execute taskwarrior to generate a new task from vcEvents"
  },
  {
    "last_update": "2016-03-14",
    "author": [
      "Nikolai Nowaczyk (niknow)"
    ],
    "url_src": "https://github.com/niknow/eisenmux",
    "url": "https://github.com/niknow/eisenmux",
    "obsolete": false,
    "name": "eisenmux",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "A bash script creating an Eisenhower matrix on the terminal using tmux and TaskWarrior.",
    "category": "Unknown",
    "readme": "eisenmux A bash script creating an Eisenhower Matrix https en wikipedia org wiki Time_management The_Eisenhower_Method on the terminal using tmux https en wikipedia org wiki Tmux and TaskWarrior https taskwarrior org Requirements Linux tmux TaskWarrior Installation use git clone to download this repo copy the eisenhower sh to any conventient location add the TaskWarrior reports from twreports to your TaskWarrior either by copy pasting them into your taskrc or by adding a link to twreports optional change the definitions of urgent and important in twreports to your needs Usage eisenhower sh Recommendation Add an alias to your bashrc for instance alias te path to your script eisenhower sh",
    "compatibility": "2.4.1+",
    "description": "A bash script creating an Eisenhower matrix on the terminal using tmux and TaskWarrior."
  },
  {
    "last_update": "2015-04-26",
    "author": [
      "Sinan Goo (nasoym)"
    ],
    "url_src": "https://github.com/nasoym/task_tools",
    "url": "https://github.com/nasoym/task_tools",
    "obsolete": false,
    "name": "task_tools",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Shell"
    ],
    "descriptionText": "bash command line tools to provide calendar or hierarchy reports for taskwarrior tasks",
    "category": "Unknown",
    "readme": "Task Tools This repository contains bash command line tools which should provide hierarchy and calendar reports for task warrior tasks thrchy This bash script lists tasks arranged by their dependencies blocking blocked Dependencies jq http stedolan github io jq Usage Listing tasks thrchy options ids ids are one or more space separated task ids Examples thrchy 23 thrchy 23 34 5 possible options a show also closed tasks j default use the exported json to print the tasks r report name use the task warrior report to show the tasks if the report only shows pending tasks the a option has no effect Adding new dependent task thrchy id add normal task warrior commands id is the task id which should depend on the newly created task Examples thrchy 23 add tag tag2 subject description text prio H thrchy 23 add new task description Change task dependency thrchy id move parent_id id is the task id which should be blocking another task parent_id is the task id which should be depending on id Examples thrchy 23 move 39 tcal This tool shows tasks which are scheduled for the current week Dependencies gnu date util on Mac OS X install it via homebrew Usage Usage tcal week task warrior filters task warrior report Usage Examples show tasks which are scheduled for the current week tcal show tasks which are scheduled for a specific week tcal 08 tcal 08 09 10 show tasks which are scheduled for current and next week tcal 1 show tasks which are scheduled for previous and current week tcal 1 show tasks which are scheduled for today tcal today show tasks which are scheduled for a specific date tcal 2015 01 01 any valid task warrior filters can be specified after the optional week specifier tcal 1 tag1 tag2 proj name prio H any report can be specified in order to change the output tcal 1 minimal tlog Experimental script to store spent time in a custom field and report logged time of the last few days",
    "compatibility": "2.4.1+",
    "description": "bash command line tools to provide calendar or hierarchy reports for taskwarrior tasks"
  },
  {
    "last_update": "2015-01-26",
    "author": [
      "Zolt\u00e1n Nagy (abesto)"
    ],
    "url_src": "https://github.com/abesto/taskproxy",
    "url": "https://github.com/abesto/taskproxy",
    "obsolete": false,
    "name": "taskproxy",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "JavaScript"
    ],
    "descriptionText": "A fully configurable HTTP frontend for showing views of your taskwarrior TODO list.",
    "category": "Unknown",
    "readme": "taskproxy A fully configurable HTTP frontend for showing views of your taskwarrior http taskwarrior org TODO list It calls task and passes the output through aha to turn the colored ASCII into colored HTML Use case I use this to share my tasks not tracked on a Kanban board with my team My setup is a cronjob on my dev machine that periodically runs task sync which syncs to a taskserver I host from which in turn reads another cronjob this time on the server task sync ing to the user which then runs this application This way I use task normally during the day and it automatically generates an online accessible version of the state of my tasks Configuring Try env task alwaysfilters list tag work auth type basic auth realm dragonses auth file htpasswd npm start Assemblies required Note the lack of a Getting started section I don t promise it s trivial to set up",
    "compatibility": "2.4.1+",
    "description": "A fully configurable HTTP frontend for showing views of your taskwarrior TODO list."
  },
  {
    "last_update": "2015-12-24",
    "author": [
      "David J Patrick (linuxcaffe)"
    ],
    "url_src": "https://github.com/linuxcaffe/tw-hledger-add-hook",
    "url": "https://github.com/linuxcaffe/tw-hledger-add-hook",
    "obsolete": false,
    "name": "tw-hledger-add-hook",
    "theme": [
      "Ledger"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "A taskwarrior hook-script to add accounting info to hledger, after completing a transaction-related task.",
    "category": "Unknown",
    "readme": "taskwarrior hledger add hook _note no functioning code here yet this is mostly concept so far ideas welcome_ Taskwarrior http taskwarrior org is great for tracking all kinds of tasks and many of those tasks will be transactional having something to do with accounting pay Hydro Electric bill invoice Random Productions for video shoot buy new furnace gaskets tracking these and doing these is great but it s HALF the job If you are completing these tasks but not recording the transactions in some accounting system you are missing an opportunity to get your sh t together Luckily there are a few excellent accounting packages for people who use taskwarrior If you use TW then you probably like things at the command line and you probably appreciate having all of your data in human readable and editable text files For that sort of user you there exists ledger That s http ledger cli org and it s haskell cousin http hledger org Both of these programs work the same way and to a large extent are file compatible that is you can create a file in one and read it with the other and either of them will help you track all sorts of accounting transactions and generate detailed and accurate reports This tw hook script will use hledger http hledger org and it s interactive add function http hledger org manual html add taking all of the details of the accounting related task you just completed and piping it through the interactive add command into a properly formatted ledger file The object here is to tie the act of marking such a task done directly to the ledger process so you don t have to do it later It will take only seconds to do as you have already entered most of the data and metadata and the hledger add function offers good predictive defaults Using this hook will help you establish a regular pattern of accurate bookkeeping and if you don t do it right then you ll forget Requirements taskwarrior http taskwarrior org download hledger http hledger org download html tasklib https github com tbabej tasklib tree develop note must use develop branch for how it could work see the psudocode in the on modify hledger add file",
    "compatibility": "2.4.1+",
    "description": "A taskwarrior hook-script to add accounting info to hledger, after completing a transaction-related task."
  },
  {
    "last_update": "2015-12-24",
    "author": [
      "David J Patrick (linuxcaffe)"
    ],
    "url_src": "https://github.com/linuxcaffe/tw-wiz-sh",
    "url": "https://github.com/linuxcaffe/tw-wiz-sh",
    "obsolete": false,
    "name": "tw-wiz-sh",
    "theme": [],
    "verified": "2016-04-24",
    "language": [],
    "descriptionText": "taskwarrior \"wizard\" script, to help users with various tw-related things",
    "category": "Unknown",
    "readme": "tw wiz sh taskwarrior wizard script to help users with various tw related things",
    "compatibility": "2.4.1+",
    "description": "taskwarrior \"wizard\" script, to help users with various tw-related things"
  },
  {
    "last_update": "2016-04-07",
    "author": [
      "Sebastian Oeste (blastmaster)"
    ],
    "url_src": "https://github.com/blastmaster/matetask",
    "url": "https://github.com/blastmaster/matetask",
    "obsolete": false,
    "name": "matetask",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Don't forget to pay your Drinks! Add a taskwarrior-task if your matemat balance is critical.",
    "category": "Unknown",
    "readme": "matetask py Description Simple script which scrapes your matemate balance and creates a taskwarrior task if your current balance fall below a minimum License matetask is distributed under the Gnu General Public License GPL See the LICENSE file for the full license text",
    "compatibility": "2.4.1+",
    "description": "Don't forget to pay your Drinks! Add a taskwarrior-task if your matemat balance is critical."
  },
  {
    "last_update": "2016-02-05",
    "author": [
      "Spencer Mamer (spencermamer)"
    ],
    "url_src": "https://github.com/spencermamer/task-graphdeps",
    "url": "https://github.com/spencermamer/task-graphdeps",
    "obsolete": false,
    "name": "task-graphdeps",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Updated for of the graphdeps.py Taskwarrior \u2192 GraphViz script, which creates a colorful graph of task dependencies",
    "category": "Unknown",
    "readme": "task graphdeps Updated for of the graphdeps py Taskwarrior GraphViz script which creates a colorful graph of task dependencies",
    "compatibility": "2.4.1+",
    "description": "Updated for of the graphdeps.py Taskwarrior \u2192 GraphViz script, which creates a colorful graph of task dependencies"
  },
  {
    "last_update": "2016-01-19",
    "author": [
      "Paul Broadwith (pauby)"
    ],
    "url_src": "https://github.com/pauby/PSTodo",
    "url": "https://github.com/pauby/PSTodo",
    "obsolete": false,
    "name": "PSTodo",
    "theme": [],
    "verified": "2016-04-24",
    "language": [
      "PowerShell"
    ],
    "descriptionText": "This is a powershell CLI to the Todo.txt todo file format with some PowerShell like features and alson taking inspiration from Taskwarrior.",
    "category": "Unknown",
    "readme": "PSTodo This is a powershell CLI to the Todo txt http todotxt com todo file format with some PowerShell like features and alson taking inspiration from Taskwarrior Based originally on PsTodoTxt https github com derantell PsTodoTxt it has been completely rewritten Goal The goal of this project is to create a command line interface to Todo txt and add in some important Taskwarrior features such as prioritisation and ease of editing tasks Todo txt Components Each task is split into Todo txt components These components are detailed in New TodoObject ps1 Configuration format PSTodo s configuration format is stored in Get TodoDefaultConfig ps1 TODO Nothing yet not released version 1 yet References The Todo txt Format https github com ginatrapani todo txt cli wiki The Todo txt Format SimpleTask https github com mpcjanssen simpletask android blob master src main assets listsandtags en md took the idea for some of the addons from here recurring tasks hidden tasks etc Simpletask LIsts and Tags https github com mpcjanssen simpletask android blob master src main assets listsandtags en md How to GTD with SimpleTask https gist github com alehandrof 9941620 How TaskWarrior handles Urgency http taskwarrior org docs urgency html How topydo handles urgency https github com bram85 topydo wiki Importance",
    "compatibility": "2.4.1+",
    "description": "This is a powershell CLI to the Todo.txt todo file format with some PowerShell like features and alson taking inspiration from Taskwarrior."
  },
  {
    "last_update": "2016-04-01",
    "author": [
      "Bruno Vernay (BrunoVernay)"
    ],
    "url_src": "https://github.com/BrunoVernay/tw-tools-update",
    "url": "https://github.com/BrunoVernay/tw-tools-update",
    "obsolete": false,
    "name": "tw-tools-update",
    "theme": [
      "Git",
      "Web"
    ],
    "verified": "2016-04-24",
    "language": [
      "Python"
    ],
    "descriptionText": "Use the GitHub-API to update the list of tools and extensions related to TaskWarrior. It is displayed on the web site.",
    "category": "Unknown",
    "readme": "tw tools update Use the GitHub API to update the list of tools and extensions related to TaskWarrior It will be displayed on the web site http taskwarrior org tools This is linked to the project of future Tool page http brunovernay github io taskwarrior site test It is a work in progress The idea is to use the GitHub API to search project related to TaskWarrior and update the list of tools display on TaskWarrior site from this list Project currently works in Java but I created a Python branch as it is more idiomatic to the TaskWarrior community https github com PyGithub PyGithub might be a good start there are many Python projects addressing GitHub https developer github com libraries python even a book Mining the Social Web https www safaribooksonline com library view mining the social 9781449368180 We still have to set the category manually Does not seem to be a way to get the license You have to enter your GitHub token given the number of required requests https github com settings tokens It only covers GitHub projects currently We might apply a diff after the update to keep manual changes We might apply a filter before to exclude this very project for example Note the text description is pure text no HTML There are duplicated names I use the url_src as a unique identifier But some project changed URL for example xtw changed its login name so the url is different I output a warning and create a duplicate The mapping category manual name name description description url homepage url_src html_url license language language will get only the primary language have to request languages_url to know more author owner login collaborators contributors teams We have to make multiple request to get the real name instead of the Login theme best guess from description verified today last_update updated_at pushed_at would be more conservative but would miss commits in non master branches",
    "compatibility": "2.4.1+",
    "description": "Use the GitHub-API to update the list of tools and extensions related to TaskWarrior. It is displayed on the web site."
  }
]